{
  "version": 3,
  "sources": ["../node_modules/hash-wasm/dist/index.umd.js", "../src/index.js", "../node_modules/@noble/ed25519/index.js", "../node_modules/@noble/hashes/src/cryptoNode.ts", "../node_modules/@noble/hashes/src/utils.ts", "../node_modules/@noble/hashes/src/hmac.ts", "../node_modules/@noble/hashes/src/_md.ts", "../node_modules/@noble/hashes/src/legacy.ts", "../node_modules/@noble/hashes/src/ripemd160.ts", "../node_modules/@noble/hashes/src/_u64.ts", "../node_modules/@noble/hashes/src/sha2.ts", "../node_modules/@noble/hashes/src/sha256.ts", "../node_modules/@noble/hashes/src/sha512.ts", "../src/hd.js", "../node_modules/@noble/hashes/src/pbkdf2.ts", "../src/bip39.js", "../src/bech32m.js", "../src/constants.js", "../src/publickey.js", "../src/keypair.js", "../node_modules/@noble/hashes/src/sha3.ts", "../node_modules/@noble/post-quantum/src/utils.ts", "../node_modules/@noble/post-quantum/src/slh-dsa.ts", "../src/utils.js", "../src/slh-public.js", "../src/slh-keypair.js", "../src/wallet.js", "../src/address.js", "../src/connection.js", "../node_modules/@leachain/sctp/dist/sctp.node.mjs", "../src/system-program.js", "../src/transaction.js"],
  "sourcesContent": ["/*!\n * hash-wasm (https://www.npmjs.com/package/hash-wasm)\n * (c) Dani Biro\n * @license MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.hashwasm = {}));\n})(this, (function (exports) { 'use strict';\n\n    var name$l = \"adler32\";\n    var data$l = \"AGFzbQEAAAABDANgAAF/YAAAYAF/AAMHBgABAgEAAgUEAQECAgYOAn8BQYCJBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAQtIYXNoX1VwZGF0ZQACCkhhc2hfRmluYWwAAw1IYXNoX0dldFN0YXRlAAQOSGFzaF9DYWxjdWxhdGUABQpTVEFURV9TSVpFAwEK6wkGBQBBgAkLCgBBAEEBNgKECAvjCAEHf0EAKAKECCIBQf//A3EhAiABQRB2IQMCQAJAIABBAUcNACACQQAtAIAJaiIBQY+AfGogASABQfD/A0sbIgEgA2oiBEEQdCIFQYCAPGogBSAEQfD/A0sbIAFyIQEMAQsCQAJAAkACQAJAIABBEEkNAEGACSEGIABBsCtJDQFBgAkhBgNAQQAhBQNAIAYgBWoiASgCACIEQf8BcSACaiICIANqIAIgBEEIdkH/AXFqIgJqIAIgBEEQdkH/AXFqIgJqIAIgBEEYdmoiAmogAiABQQRqKAIAIgRB/wFxaiICaiACIARBCHZB/wFxaiICaiACIARBEHZB/wFxaiICaiACIARBGHZqIgJqIAIgAUEIaigCACIEQf8BcWoiAmogAiAEQQh2Qf8BcWoiAmogAiAEQRB2Qf8BcWoiAmogAiAEQRh2aiIEaiAEIAFBDGooAgAiAUH/AXFqIgRqIAQgAUEIdkH/AXFqIgRqIAQgAUEQdkH/AXFqIgRqIAQgAUEYdmoiAmohAyAFQRBqIgVBsCtHDQALIANB8f8DcCEDIAJB8f8DcCECIAZBsCtqIQYgAEHQVGoiAEGvK0sNAAsgAEUNBCAAQQ9LDQEMAgsCQCAARQ0AAkACQCAAQQNxIgUNAEGACSEBIAAhBAwBCyAAQXxxIQRBACEBA0AgAiABQYAJai0AAGoiAiADaiEDIAUgAUEBaiIBRw0ACyAFQYAJaiEBCyAAQQRJDQADQCACIAEtAABqIgUgAS0AAWoiBiABLQACaiIAIAFBA2otAABqIgIgACAGIAUgA2pqamohAyABQQRqIQEgBEF8aiIEDQALCyACQY+AfGogAiACQfD/A0sbIANB8f8DcEEQdHIhAQwECwNAIAYoAgAiAUH/AXEgAmoiBCADaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgRqIAQgBkEEaigCACIBQf8BcWoiBGogBCABQQh2Qf8BcWoiBGogBCABQRB2Qf8BcWoiBGogBCABQRh2aiIEaiAEIAZBCGooAgAiAUH/AXFqIgRqIAQgAUEIdkH/AXFqIgRqIAQgAUEQdkH/AXFqIgRqIAQgAUEYdmoiBGogBCAGQQxqKAIAIgFB/wFxaiIEaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgJqIQMgBkEQaiEGIABBcGoiAEEPSw0ACyAARQ0BCyAAQX9qIQcCQCAAQQNxIgVFDQAgAEF8cSEAIAUhBCAGIQEDQCACIAEtAABqIgIgA2ohAyABQQFqIQEgBEF/aiIEDQALIAYgBWohBgsgB0EDSQ0AA0AgAiAGLQAAaiIBIAYtAAFqIgQgBi0AAmoiBSAGQQNqLQAAaiICIAUgBCABIANqampqIQMgBkEEaiEGIABBfGoiAA0ACwsgA0Hx/wNwIQMgAkHx/wNwIQILIAIgA0EQdHIhAQtBACABNgKECAsxAQF/QQBBACgChAgiAEEYdCAAQYD+A3FBCHRyIABBCHZBgP4DcSAAQRh2cnI2AoAJCwUAQYQICzsAQQBBATYChAggABACQQBBACgChAgiAEEYdCAAQYD+A3FBCHRyIABBCHZBgP4DcSAAQRh2cnI2AoAJCwsVAgBBgAgLBAQAAAAAQYQICwQBAAAA\";\n    var hash$l = \"02ddbd17\";\n    var wasmJson$l = {\n    \tname: name$l,\n    \tdata: data$l,\n    \thash: hash$l\n    };\n\n    /******************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n        var e = new Error(message);\r\n        return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n    };\n\n    class Mutex {\n        constructor() {\n            this.mutex = Promise.resolve();\n        }\n        lock() {\n            let begin = () => { };\n            this.mutex = this.mutex.then(() => new Promise(begin));\n            return new Promise((res) => {\n                begin = res;\n            });\n        }\n        dispatch(fn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const unlock = yield this.lock();\n                try {\n                    return yield Promise.resolve(fn());\n                }\n                finally {\n                    unlock();\n                }\n            });\n        }\n    }\n\n    var _a;\n    function getGlobal() {\n        if (typeof globalThis !== \"undefined\")\n            return globalThis;\n        if (typeof self !== \"undefined\")\n            return self;\n        if (typeof window !== \"undefined\")\n            return window;\n        return global;\n    }\n    const globalObject = getGlobal();\n    const nodeBuffer = (_a = globalObject.Buffer) !== null && _a !== void 0 ? _a : null;\n    const textEncoder = globalObject.TextEncoder\n        ? new globalObject.TextEncoder()\n        : null;\n    function intArrayToString(arr, len) {\n        return String.fromCharCode(...arr.subarray(0, len));\n    }\n    function hexCharCodesToInt(a, b) {\n        return ((((a & 0xf) + ((a >> 6) | ((a >> 3) & 0x8))) << 4) |\n            ((b & 0xf) + ((b >> 6) | ((b >> 3) & 0x8))));\n    }\n    function writeHexToUInt8(buf, str) {\n        const size = str.length >> 1;\n        for (let i = 0; i < size; i++) {\n            const index = i << 1;\n            buf[i] = hexCharCodesToInt(str.charCodeAt(index), str.charCodeAt(index + 1));\n        }\n    }\n    function hexStringEqualsUInt8(str, buf) {\n        if (str.length !== buf.length * 2) {\n            return false;\n        }\n        for (let i = 0; i < buf.length; i++) {\n            const strIndex = i << 1;\n            if (buf[i] !==\n                hexCharCodesToInt(str.charCodeAt(strIndex), str.charCodeAt(strIndex + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n    const alpha = \"a\".charCodeAt(0) - 10;\n    const digit = \"0\".charCodeAt(0);\n    function getDigestHex(tmpBuffer, input, hashLength) {\n        let p = 0;\n        for (let i = 0; i < hashLength; i++) {\n            let nibble = input[i] >>> 4;\n            tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n            nibble = input[i] & 0xf;\n            tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n        }\n        return String.fromCharCode.apply(null, tmpBuffer);\n    }\n    const getUInt8Buffer = nodeBuffer !== null\n        ? (data) => {\n            if (typeof data === \"string\") {\n                const buf = nodeBuffer.from(data, \"utf8\");\n                return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n            }\n            if (nodeBuffer.isBuffer(data)) {\n                return new Uint8Array(data.buffer, data.byteOffset, data.length);\n            }\n            if (ArrayBuffer.isView(data)) {\n                return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            }\n            throw new Error(\"Invalid data type!\");\n        }\n        : (data) => {\n            if (typeof data === \"string\") {\n                return textEncoder.encode(data);\n            }\n            if (ArrayBuffer.isView(data)) {\n                return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            }\n            throw new Error(\"Invalid data type!\");\n        };\n    const base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    const base64Lookup = new Uint8Array(256);\n    for (let i = 0; i < base64Chars.length; i++) {\n        base64Lookup[base64Chars.charCodeAt(i)] = i;\n    }\n    function encodeBase64(data, pad = true) {\n        const len = data.length;\n        const extraBytes = len % 3;\n        const parts = [];\n        const len2 = len - extraBytes;\n        for (let i = 0; i < len2; i += 3) {\n            const tmp = ((data[i] << 16) & 0xff0000) +\n                ((data[i + 1] << 8) & 0xff00) +\n                (data[i + 2] & 0xff);\n            const triplet = base64Chars.charAt((tmp >> 18) & 0x3f) +\n                base64Chars.charAt((tmp >> 12) & 0x3f) +\n                base64Chars.charAt((tmp >> 6) & 0x3f) +\n                base64Chars.charAt(tmp & 0x3f);\n            parts.push(triplet);\n        }\n        if (extraBytes === 1) {\n            const tmp = data[len - 1];\n            const a = base64Chars.charAt(tmp >> 2);\n            const b = base64Chars.charAt((tmp << 4) & 0x3f);\n            parts.push(`${a}${b}`);\n            if (pad) {\n                parts.push(\"==\");\n            }\n        }\n        else if (extraBytes === 2) {\n            const tmp = (data[len - 2] << 8) + data[len - 1];\n            const a = base64Chars.charAt(tmp >> 10);\n            const b = base64Chars.charAt((tmp >> 4) & 0x3f);\n            const c = base64Chars.charAt((tmp << 2) & 0x3f);\n            parts.push(`${a}${b}${c}`);\n            if (pad) {\n                parts.push(\"=\");\n            }\n        }\n        return parts.join(\"\");\n    }\n    function getDecodeBase64Length(data) {\n        let bufferLength = Math.floor(data.length * 0.75);\n        const len = data.length;\n        if (data[len - 1] === \"=\") {\n            bufferLength -= 1;\n            if (data[len - 2] === \"=\") {\n                bufferLength -= 1;\n            }\n        }\n        return bufferLength;\n    }\n    function decodeBase64(data) {\n        const bufferLength = getDecodeBase64Length(data);\n        const len = data.length;\n        const bytes = new Uint8Array(bufferLength);\n        let p = 0;\n        for (let i = 0; i < len; i += 4) {\n            const encoded1 = base64Lookup[data.charCodeAt(i)];\n            const encoded2 = base64Lookup[data.charCodeAt(i + 1)];\n            const encoded3 = base64Lookup[data.charCodeAt(i + 2)];\n            const encoded4 = base64Lookup[data.charCodeAt(i + 3)];\n            bytes[p] = (encoded1 << 2) | (encoded2 >> 4);\n            p += 1;\n            bytes[p] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n            p += 1;\n            bytes[p] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n            p += 1;\n        }\n        return bytes;\n    }\n\n    const MAX_HEAP = 16 * 1024;\n    const WASM_FUNC_HASH_LENGTH = 4;\n    const wasmMutex = new Mutex();\n    const wasmModuleCache = new Map();\n    function WASMInterface(binary, hashLength) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let wasmInstance = null;\n            let memoryView = null;\n            let initialized = false;\n            if (typeof WebAssembly === \"undefined\") {\n                throw new Error(\"WebAssembly is not supported in this environment!\");\n            }\n            const writeMemory = (data, offset = 0) => {\n                memoryView.set(data, offset);\n            };\n            const getMemory = () => memoryView;\n            const getExports = () => wasmInstance.exports;\n            const setMemorySize = (totalSize) => {\n                wasmInstance.exports.Hash_SetMemorySize(totalSize);\n                const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                memoryView = new Uint8Array(memoryBuffer, arrayOffset, totalSize);\n            };\n            const getStateSize = () => {\n                const view = new DataView(wasmInstance.exports.memory.buffer);\n                const stateSize = view.getUint32(wasmInstance.exports.STATE_SIZE, true);\n                return stateSize;\n            };\n            const loadWASMPromise = wasmMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {\n                if (!wasmModuleCache.has(binary.name)) {\n                    const asm = decodeBase64(binary.data);\n                    const promise = WebAssembly.compile(asm);\n                    wasmModuleCache.set(binary.name, promise);\n                }\n                const module = yield wasmModuleCache.get(binary.name);\n                wasmInstance = yield WebAssembly.instantiate(module, {\n                // env: {\n                //   emscripten_memcpy_big: (dest, src, num) => {\n                //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n                //     const memView = new Uint8Array(memoryBuffer, 0);\n                //     memView.set(memView.subarray(src, src + num), dest);\n                //   },\n                //   print_memory: (offset, len) => {\n                //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n                //     const memView = new Uint8Array(memoryBuffer, 0);\n                //     console.log('print_int32', memView.subarray(offset, offset + len));\n                //   },\n                // },\n                });\n                // wasmInstance.exports._start();\n            }));\n            const setupInterface = () => __awaiter(this, void 0, void 0, function* () {\n                if (!wasmInstance) {\n                    yield loadWASMPromise;\n                }\n                const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                memoryView = new Uint8Array(memoryBuffer, arrayOffset, MAX_HEAP);\n            });\n            const init = (bits = null) => {\n                initialized = true;\n                wasmInstance.exports.Hash_Init(bits);\n            };\n            const updateUInt8Array = (data) => {\n                let read = 0;\n                while (read < data.length) {\n                    const chunk = data.subarray(read, read + MAX_HEAP);\n                    read += chunk.length;\n                    memoryView.set(chunk);\n                    wasmInstance.exports.Hash_Update(chunk.length);\n                }\n            };\n            const update = (data) => {\n                if (!initialized) {\n                    throw new Error(\"update() called before init()\");\n                }\n                const Uint8Buffer = getUInt8Buffer(data);\n                updateUInt8Array(Uint8Buffer);\n            };\n            const digestChars = new Uint8Array(hashLength * 2);\n            const digest = (outputType, padding = null) => {\n                if (!initialized) {\n                    throw new Error(\"digest() called before init()\");\n                }\n                initialized = false;\n                wasmInstance.exports.Hash_Final(padding);\n                if (outputType === \"binary\") {\n                    // the data is copied to allow GC of the original memory object\n                    return memoryView.slice(0, hashLength);\n                }\n                return getDigestHex(digestChars, memoryView, hashLength);\n            };\n            const save = () => {\n                if (!initialized) {\n                    throw new Error(\"save() can only be called after init() and before digest()\");\n                }\n                const stateOffset = wasmInstance.exports.Hash_GetState();\n                const stateLength = getStateSize();\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                const internalState = new Uint8Array(memoryBuffer, stateOffset, stateLength);\n                // prefix is 4 bytes from SHA1 hash of the WASM binary\n                // it is used to detect incompatible internal states between different versions of hash-wasm\n                const prefixedState = new Uint8Array(WASM_FUNC_HASH_LENGTH + stateLength);\n                writeHexToUInt8(prefixedState, binary.hash);\n                prefixedState.set(internalState, WASM_FUNC_HASH_LENGTH);\n                return prefixedState;\n            };\n            const load = (state) => {\n                if (!(state instanceof Uint8Array)) {\n                    throw new Error(\"load() expects an Uint8Array generated by save()\");\n                }\n                const stateOffset = wasmInstance.exports.Hash_GetState();\n                const stateLength = getStateSize();\n                const overallLength = WASM_FUNC_HASH_LENGTH + stateLength;\n                const memoryBuffer = wasmInstance.exports.memory.buffer;\n                if (state.length !== overallLength) {\n                    throw new Error(`Bad state length (expected ${overallLength} bytes, got ${state.length})`);\n                }\n                if (!hexStringEqualsUInt8(binary.hash, state.subarray(0, WASM_FUNC_HASH_LENGTH))) {\n                    throw new Error(\"This state was written by an incompatible hash implementation\");\n                }\n                const internalState = state.subarray(WASM_FUNC_HASH_LENGTH);\n                new Uint8Array(memoryBuffer, stateOffset, stateLength).set(internalState);\n                initialized = true;\n            };\n            const isDataShort = (data) => {\n                if (typeof data === \"string\") {\n                    // worst case is 4 bytes / char\n                    return data.length < MAX_HEAP / 4;\n                }\n                return data.byteLength < MAX_HEAP;\n            };\n            let canSimplify = isDataShort;\n            switch (binary.name) {\n                case \"argon2\":\n                case \"scrypt\":\n                    canSimplify = () => true;\n                    break;\n                case \"blake2b\":\n                case \"blake2s\":\n                    // if there is a key at blake2 then cannot simplify\n                    canSimplify = (data, initParam) => initParam <= 512 && isDataShort(data);\n                    break;\n                case \"blake3\":\n                    // if there is a key at blake3 then cannot simplify\n                    canSimplify = (data, initParam) => initParam === 0 && isDataShort(data);\n                    break;\n                case \"xxhash64\": // cannot simplify\n                case \"xxhash3\":\n                case \"xxhash128\":\n                case \"crc64\":\n                    canSimplify = () => false;\n                    break;\n            }\n            // shorthand for (init + update + digest) for better performance\n            const calculate = (data, initParam = null, digestParam = null) => {\n                if (!canSimplify(data, initParam)) {\n                    init(initParam);\n                    update(data);\n                    return digest(\"hex\", digestParam);\n                }\n                const buffer = getUInt8Buffer(data);\n                memoryView.set(buffer);\n                wasmInstance.exports.Hash_Calculate(buffer.length, initParam, digestParam);\n                return getDigestHex(digestChars, memoryView, hashLength);\n            };\n            yield setupInterface();\n            return {\n                getMemory,\n                writeMemory,\n                getExports,\n                setMemorySize,\n                init,\n                update,\n                digest,\n                save,\n                load,\n                calculate,\n                hashLength,\n            };\n        });\n    }\n\n    function lockedCreate(mutex, binary, hashLength) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const unlock = yield mutex.lock();\n            const wasm = yield WASMInterface(binary, hashLength);\n            unlock();\n            return wasm;\n        });\n    }\n\n    const mutex$l = new Mutex();\n    let wasmCache$l = null;\n    /**\n     * Calculates Adler-32 hash. The resulting 32-bit hash is stored in\n     * network byte order (big-endian).\n     *\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function adler32(data) {\n        if (wasmCache$l === null) {\n            return lockedCreate(mutex$l, wasmJson$l, 4).then((wasm) => {\n                wasmCache$l = wasm;\n                return wasmCache$l.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$l.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new Adler-32 hash instance\n     */\n    function createAdler32() {\n        return WASMInterface(wasmJson$l, 4).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 4,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    var name$k = \"argon2\";\n    var data$k = \"\";\n    var hash$k = \"e4cdc523\";\n    var wasmJson$k = {\n    \tname: name$k,\n    \tdata: data$k,\n    \thash: hash$k\n    };\n\n    var name$j = \"blake2b\";\n    var data$j = \"\";\n    var hash$j = \"c6f286e6\";\n    var wasmJson$j = {\n    \tname: name$j,\n    \tdata: data$j,\n    \thash: hash$j\n    };\n\n    const mutex$k = new Mutex();\n    let wasmCache$k = null;\n    function validateBits$4(bits) {\n        if (!Number.isInteger(bits) || bits < 8 || bits > 512 || bits % 8 !== 0) {\n            return new Error(\"Invalid variant! Valid values: 8, 16, ..., 512\");\n        }\n        return null;\n    }\n    function getInitParam$1(outputBits, keyBits) {\n        return outputBits | (keyBits << 16);\n    }\n    /**\n     * Calculates BLAKE2b hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 512. Defaults to 512.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n     * @returns Computed hash as a hexadecimal string\n     */\n    function blake2b(data, bits = 512, key = null) {\n        if (validateBits$4(bits)) {\n            return Promise.reject(validateBits$4(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 64) {\n                return Promise.reject(new Error(\"Max key length is 64 bytes\"));\n            }\n            initParam = getInitParam$1(bits, keyBuffer.length);\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$k === null || wasmCache$k.hashLength !== hashLength) {\n            return lockedCreate(mutex$k, wasmJson$j, hashLength).then((wasm) => {\n                wasmCache$k = wasm;\n                if (initParam > 512) {\n                    wasmCache$k.writeMemory(keyBuffer);\n                }\n                return wasmCache$k.calculate(data, initParam);\n            });\n        }\n        try {\n            if (initParam > 512) {\n                wasmCache$k.writeMemory(keyBuffer);\n            }\n            const hash = wasmCache$k.calculate(data, initParam);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new BLAKE2b hash instance\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 512. Defaults to 512.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n     */\n    function createBLAKE2b(bits = 512, key = null) {\n        if (validateBits$4(bits)) {\n            return Promise.reject(validateBits$4(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 64) {\n                return Promise.reject(new Error(\"Max key length is 64 bytes\"));\n            }\n            initParam = getInitParam$1(bits, keyBuffer.length);\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$j, outputSize).then((wasm) => {\n            if (initParam > 512) {\n                wasm.writeMemory(keyBuffer);\n            }\n            wasm.init(initParam);\n            const obj = {\n                init: initParam > 512\n                    ? () => {\n                        wasm.writeMemory(keyBuffer);\n                        wasm.init(initParam);\n                        return obj;\n                    }\n                    : () => {\n                        wasm.init(initParam);\n                        return obj;\n                    },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 128,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    function encodeResult(salt, options, res) {\n        const parameters = [\n            `m=${options.memorySize}`,\n            `t=${options.iterations}`,\n            `p=${options.parallelism}`,\n        ].join(\",\");\n        return `$argon2${options.hashType}$v=19$${parameters}$${encodeBase64(salt, false)}$${encodeBase64(res, false)}`;\n    }\n    const uint32View = new DataView(new ArrayBuffer(4));\n    function int32LE(x) {\n        uint32View.setInt32(0, x, true);\n        return new Uint8Array(uint32View.buffer);\n    }\n    function hashFunc(blake512, buf, len) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (len <= 64) {\n                const blake = yield createBLAKE2b(len * 8);\n                blake.update(int32LE(len));\n                blake.update(buf);\n                return blake.digest(\"binary\");\n            }\n            const r = Math.ceil(len / 32) - 2;\n            const ret = new Uint8Array(len);\n            blake512.init();\n            blake512.update(int32LE(len));\n            blake512.update(buf);\n            let vp = blake512.digest(\"binary\");\n            ret.set(vp.subarray(0, 32), 0);\n            for (let i = 1; i < r; i++) {\n                blake512.init();\n                blake512.update(vp);\n                vp = blake512.digest(\"binary\");\n                ret.set(vp.subarray(0, 32), i * 32);\n            }\n            const partialBytesNeeded = len - 32 * r;\n            let blakeSmall;\n            if (partialBytesNeeded === 64) {\n                blakeSmall = blake512;\n                blakeSmall.init();\n            }\n            else {\n                blakeSmall = yield createBLAKE2b(partialBytesNeeded * 8);\n            }\n            blakeSmall.update(vp);\n            vp = blakeSmall.digest(\"binary\");\n            ret.set(vp.subarray(0, partialBytesNeeded), r * 32);\n            return ret;\n        });\n    }\n    function getHashType(type) {\n        switch (type) {\n            case \"d\":\n                return 0;\n            case \"i\":\n                return 1;\n            default:\n                return 2;\n        }\n    }\n    function argon2Internal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const { parallelism, iterations, hashLength } = options;\n            const password = getUInt8Buffer(options.password);\n            const salt = getUInt8Buffer(options.salt);\n            const version = 0x13;\n            const hashType = getHashType(options.hashType);\n            const { memorySize } = options; // in KB\n            const secret = getUInt8Buffer((_a = options.secret) !== null && _a !== void 0 ? _a : \"\");\n            const [argon2Interface, blake512] = yield Promise.all([\n                WASMInterface(wasmJson$k, 1024),\n                createBLAKE2b(512),\n            ]);\n            // last block is for storing the init vector\n            argon2Interface.setMemorySize(memorySize * 1024 + 1024);\n            const initVector = new Uint8Array(24);\n            const initVectorView = new DataView(initVector.buffer);\n            initVectorView.setInt32(0, parallelism, true);\n            initVectorView.setInt32(4, hashLength, true);\n            initVectorView.setInt32(8, memorySize, true);\n            initVectorView.setInt32(12, iterations, true);\n            initVectorView.setInt32(16, version, true);\n            initVectorView.setInt32(20, hashType, true);\n            argon2Interface.writeMemory(initVector, memorySize * 1024);\n            blake512.init();\n            blake512.update(initVector);\n            blake512.update(int32LE(password.length));\n            blake512.update(password);\n            blake512.update(int32LE(salt.length));\n            blake512.update(salt);\n            blake512.update(int32LE(secret.length));\n            blake512.update(secret);\n            blake512.update(int32LE(0)); // associatedData length + associatedData\n            const segments = Math.floor(memorySize / (parallelism * 4)); // length of each lane\n            const lanes = segments * 4;\n            const param = new Uint8Array(72);\n            const H0 = blake512.digest(\"binary\");\n            param.set(H0);\n            for (let lane = 0; lane < parallelism; lane++) {\n                param.set(int32LE(0), 64);\n                param.set(int32LE(lane), 68);\n                let position = lane * lanes;\n                let chunk = yield hashFunc(blake512, param, 1024);\n                argon2Interface.writeMemory(chunk, position * 1024);\n                position += 1;\n                param.set(int32LE(1), 64);\n                chunk = yield hashFunc(blake512, param, 1024);\n                argon2Interface.writeMemory(chunk, position * 1024);\n            }\n            const C = new Uint8Array(1024);\n            writeHexToUInt8(C, argon2Interface.calculate(new Uint8Array([]), memorySize));\n            const res = yield hashFunc(blake512, C, hashLength);\n            if (options.outputType === \"hex\") {\n                const digestChars = new Uint8Array(hashLength * 2);\n                return getDigestHex(digestChars, res, hashLength);\n            }\n            if (options.outputType === \"encoded\") {\n                return encodeResult(salt, options, res);\n            }\n            // return binary format\n            return res;\n        });\n    }\n    const validateOptions$3 = (options) => {\n        var _a;\n        if (!options || typeof options !== \"object\") {\n            throw new Error(\"Invalid options parameter. It requires an object.\");\n        }\n        if (!options.password) {\n            throw new Error(\"Password must be specified\");\n        }\n        options.password = getUInt8Buffer(options.password);\n        if (options.password.length < 1) {\n            throw new Error(\"Password must be specified\");\n        }\n        if (!options.salt) {\n            throw new Error(\"Salt must be specified\");\n        }\n        options.salt = getUInt8Buffer(options.salt);\n        if (options.salt.length < 8) {\n            throw new Error(\"Salt should be at least 8 bytes long\");\n        }\n        options.secret = getUInt8Buffer((_a = options.secret) !== null && _a !== void 0 ? _a : \"\");\n        if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n            throw new Error(\"Iterations should be a positive number\");\n        }\n        if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n            throw new Error(\"Parallelism should be a positive number\");\n        }\n        if (!Number.isInteger(options.hashLength) || options.hashLength < 4) {\n            throw new Error(\"Hash length should be at least 4 bytes.\");\n        }\n        if (!Number.isInteger(options.memorySize)) {\n            throw new Error(\"Memory size should be specified.\");\n        }\n        if (options.memorySize < 8 * options.parallelism) {\n            throw new Error(\"Memory size should be at least 8 * parallelism.\");\n        }\n        if (options.outputType === undefined) {\n            options.outputType = \"hex\";\n        }\n        if (![\"hex\", \"binary\", \"encoded\"].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n        }\n    };\n    /**\n     * Calculates hash using the argon2i password-hashing function\n     * @returns Computed hash\n     */\n    function argon2i(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$3(options);\n            return argon2Internal(Object.assign(Object.assign({}, options), { hashType: \"i\" }));\n        });\n    }\n    /**\n     * Calculates hash using the argon2id password-hashing function\n     * @returns Computed hash\n     */\n    function argon2id(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$3(options);\n            return argon2Internal(Object.assign(Object.assign({}, options), { hashType: \"id\" }));\n        });\n    }\n    /**\n     * Calculates hash using the argon2d password-hashing function\n     * @returns Computed hash\n     */\n    function argon2d(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$3(options);\n            return argon2Internal(Object.assign(Object.assign({}, options), { hashType: \"d\" }));\n        });\n    }\n    const getHashParameters = (password, encoded, secret) => {\n        const regex = /^\\$argon2(id|i|d)\\$v=([0-9]+)\\$((?:[mtp]=[0-9]+,){2}[mtp]=[0-9]+)\\$([A-Za-z0-9+/]+)\\$([A-Za-z0-9+/]+)$/;\n        const match = encoded.match(regex);\n        if (!match) {\n            throw new Error(\"Invalid hash\");\n        }\n        const [, hashType, version, parameters, salt, hash] = match;\n        if (version !== \"19\") {\n            throw new Error(`Unsupported version: ${version}`);\n        }\n        const parsedParameters = {};\n        const paramMap = { m: \"memorySize\", p: \"parallelism\", t: \"iterations\" };\n        for (const x of parameters.split(\",\")) {\n            const [n, v] = x.split(\"=\");\n            parsedParameters[paramMap[n]] = Number(v);\n        }\n        return Object.assign(Object.assign({}, parsedParameters), { password,\n            secret, hashType: hashType, salt: decodeBase64(salt), hashLength: getDecodeBase64Length(hash), outputType: \"encoded\" });\n    };\n    const validateVerifyOptions$1 = (options) => {\n        if (!options || typeof options !== \"object\") {\n            throw new Error(\"Invalid options parameter. It requires an object.\");\n        }\n        if (options.hash === undefined || typeof options.hash !== \"string\") {\n            throw new Error(\"Hash should be specified\");\n        }\n    };\n    /**\n     * Verifies password using the argon2 password-hashing function\n     * @returns True if the encoded hash matches the password\n     */\n    function argon2Verify(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateVerifyOptions$1(options);\n            const params = getHashParameters(options.password, options.hash, options.secret);\n            validateOptions$3(params);\n            const hashStart = options.hash.lastIndexOf(\"$\") + 1;\n            const result = (yield argon2Internal(params));\n            return result.substring(hashStart) === options.hash.substring(hashStart);\n        });\n    }\n\n    var name$i = \"blake2s\";\n    var data$i = \"\";\n    var hash$i = \"5c0ff166\";\n    var wasmJson$i = {\n    \tname: name$i,\n    \tdata: data$i,\n    \thash: hash$i\n    };\n\n    const mutex$j = new Mutex();\n    let wasmCache$j = null;\n    function validateBits$3(bits) {\n        if (!Number.isInteger(bits) || bits < 8 || bits > 256 || bits % 8 !== 0) {\n            return new Error(\"Invalid variant! Valid values: 8, 16, ..., 256\");\n        }\n        return null;\n    }\n    function getInitParam(outputBits, keyBits) {\n        return outputBits | (keyBits << 16);\n    }\n    /**\n     * Calculates BLAKE2s hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 256. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n     * @returns Computed hash as a hexadecimal string\n     */\n    function blake2s(data, bits = 256, key = null) {\n        if (validateBits$3(bits)) {\n            return Promise.reject(validateBits$3(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 32) {\n                return Promise.reject(new Error(\"Max key length is 32 bytes\"));\n            }\n            initParam = getInitParam(bits, keyBuffer.length);\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$j === null || wasmCache$j.hashLength !== hashLength) {\n            return lockedCreate(mutex$j, wasmJson$i, hashLength).then((wasm) => {\n                wasmCache$j = wasm;\n                if (initParam > 512) {\n                    wasmCache$j.writeMemory(keyBuffer);\n                }\n                return wasmCache$j.calculate(data, initParam);\n            });\n        }\n        try {\n            if (initParam > 512) {\n                wasmCache$j.writeMemory(keyBuffer);\n            }\n            const hash = wasmCache$j.calculate(data, initParam);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new BLAKE2s hash instance\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8, between 8 and 256. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n     */\n    function createBLAKE2s(bits = 256, key = null) {\n        if (validateBits$3(bits)) {\n            return Promise.reject(validateBits$3(bits));\n        }\n        let keyBuffer = null;\n        let initParam = bits;\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length > 32) {\n                return Promise.reject(new Error(\"Max key length is 32 bytes\"));\n            }\n            initParam = getInitParam(bits, keyBuffer.length);\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$i, outputSize).then((wasm) => {\n            if (initParam > 512) {\n                wasm.writeMemory(keyBuffer);\n            }\n            wasm.init(initParam);\n            const obj = {\n                init: initParam > 512\n                    ? () => {\n                        wasm.writeMemory(keyBuffer);\n                        wasm.init(initParam);\n                        return obj;\n                    }\n                    : () => {\n                        wasm.init(initParam);\n                        return obj;\n                    },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$h = \"blake3\";\n    var data$h = \"\";\n    var hash$h = \"215d875f\";\n    var wasmJson$h = {\n    \tname: name$h,\n    \tdata: data$h,\n    \thash: hash$h\n    };\n\n    const mutex$i = new Mutex();\n    let wasmCache$i = null;\n    function validateBits$2(bits) {\n        if (!Number.isInteger(bits) || bits < 8 || bits % 8 !== 0) {\n            return new Error(\"Invalid variant! Valid values: 8, 16, ...\");\n        }\n        return null;\n    }\n    /**\n     * Calculates BLAKE3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n     * @returns Computed hash as a hexadecimal string\n     */\n    function blake3(data, bits = 256, key = null) {\n        if (validateBits$2(bits)) {\n            return Promise.reject(validateBits$2(bits));\n        }\n        let keyBuffer = null;\n        let initParam = 0; // key is empty by default\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length !== 32) {\n                return Promise.reject(new Error(\"Key length must be exactly 32 bytes\"));\n            }\n            initParam = 32;\n        }\n        const hashLength = bits / 8;\n        const digestParam = hashLength;\n        if (wasmCache$i === null || wasmCache$i.hashLength !== hashLength) {\n            return lockedCreate(mutex$i, wasmJson$h, hashLength).then((wasm) => {\n                wasmCache$i = wasm;\n                if (initParam === 32) {\n                    wasmCache$i.writeMemory(keyBuffer);\n                }\n                return wasmCache$i.calculate(data, initParam, digestParam);\n            });\n        }\n        try {\n            if (initParam === 32) {\n                wasmCache$i.writeMemory(keyBuffer);\n            }\n            const hash = wasmCache$i.calculate(data, initParam, digestParam);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new BLAKE3 hash instance\n     * @param bits Number of output bits, which has to be a number\n     *             divisible by 8. Defaults to 256.\n     * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n     */\n    function createBLAKE3(bits = 256, key = null) {\n        if (validateBits$2(bits)) {\n            return Promise.reject(validateBits$2(bits));\n        }\n        let keyBuffer = null;\n        let initParam = 0; // key is empty by default\n        if (key !== null) {\n            keyBuffer = getUInt8Buffer(key);\n            if (keyBuffer.length !== 32) {\n                return Promise.reject(new Error(\"Key length must be exactly 32 bytes\"));\n            }\n            initParam = 32;\n        }\n        const outputSize = bits / 8;\n        const digestParam = outputSize;\n        return WASMInterface(wasmJson$h, outputSize).then((wasm) => {\n            if (initParam === 32) {\n                wasm.writeMemory(keyBuffer);\n            }\n            wasm.init(initParam);\n            const obj = {\n                init: initParam === 32\n                    ? () => {\n                        wasm.writeMemory(keyBuffer);\n                        wasm.init(initParam);\n                        return obj;\n                    }\n                    : () => {\n                        wasm.init(initParam);\n                        return obj;\n                    },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType, digestParam),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$g = \"crc32\";\n    var data$g = \"AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwgHAAEBAQIAAwUEAQECAgYOAn8BQZDJBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAgtIYXNoX1VwZGF0ZQADCkhhc2hfRmluYWwABA1IYXNoX0dldFN0YXRlAAUOSGFzaF9DYWxjdWxhdGUABgpTVEFURV9TSVpFAwEKkggHBQBBgAkLwwMBA39BgIkBIQFBACECA0AgAUEAQQBBAEEAQQBBAEEAQQAgAkEBcWsgAHEgAkEBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnMiA0EBcWsgAHEgA0EBdnM2AgAgAUEEaiEBIAJBAWoiAkGAAkcNAAtBACEAA0AgAEGEkQFqIABBhIkBaigCACICQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEmQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYShAWogAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhKkBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEsQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYS5AWogAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhMEBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzNgIAIABBBGoiAEH8B0cNAAsLJwACQEEAKAKAyQEgAEYNACAAEAFBACAANgKAyQELQQBBADYChMkBC4gDAQN/QQAoAoTJAUF/cyEBQYAJIQICQCAAQQhJDQBBgAkhAgNAIAJBBGooAgAiA0EOdkH8B3FBgJEBaigCACADQRZ2QfwHcUGAiQFqKAIAcyADQQZ2QfwHcUGAmQFqKAIAcyADQf8BcUECdEGAoQFqKAIAcyACKAIAIAFzIgFBFnZB/AdxQYCpAWooAgBzIAFBDnZB/AdxQYCxAWooAgBzIAFBBnZB/AdxQYC5AWooAgBzIAFB/wFxQQJ0QYDBAWooAgBzIQEgAkEIaiECIABBeGoiAEEHSw0ACwsCQCAARQ0AAkACQCAAQQFxDQAgACEDDAELIAFB/wFxIAItAABzQQJ0QYCJAWooAgAgAUEIdnMhASACQQFqIQIgAEF/aiEDCyAAQQFGDQADQCABQf8BcSACLQAAc0ECdEGAiQFqKAIAIAFBCHZzIgFB/wFxIAJBAWotAABzQQJ0QYCJAWooAgAgAUEIdnMhASACQQJqIQIgA0F+aiIDDQALC0EAIAFBf3M2AoTJAQsyAQF/QQBBACgChMkBIgBBGHQgAEGA/gNxQQh0ciAAQQh2QYD+A3EgAEEYdnJyNgKACQsGAEGEyQELWQACQEEAKAKAyQEgAUYNACABEAFBACABNgKAyQELQQBBADYChMkBIAAQA0EAQQAoAoTJASIBQRh0IAFBgP4DcUEIdHIgAUEIdkGA/gNxIAFBGHZycjYCgAkLCwsBAEGACAsEBAAAAA==\";\n    var hash$g = \"d2eba587\";\n    var wasmJson$g = {\n    \tname: name$g,\n    \tdata: data$g,\n    \thash: hash$g\n    };\n\n    const mutex$h = new Mutex();\n    let wasmCache$h = null;\n    function validatePoly(poly) {\n        if (!Number.isInteger(poly) || poly < 0 || poly > 0xffffffff) {\n            return new Error(\"Polynomial must be a valid 32-bit long unsigned integer\");\n        }\n        return null;\n    }\n    /**\n     * Calculates CRC-32 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param polynomial Input polynomial (defaults to 0xedb88320, for CRC32C use 0x82f63b78)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function crc32(data, polynomial = 0xedb88320) {\n        if (validatePoly(polynomial)) {\n            return Promise.reject(validatePoly(polynomial));\n        }\n        if (wasmCache$h === null) {\n            return lockedCreate(mutex$h, wasmJson$g, 4).then((wasm) => {\n                wasmCache$h = wasm;\n                return wasmCache$h.calculate(data, polynomial);\n            });\n        }\n        try {\n            const hash = wasmCache$h.calculate(data, polynomial);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new CRC-32 hash instance\n     * @param polynomial Input polynomial (defaults to 0xedb88320, for CRC32C use 0x82f63b78)\n     */\n    function createCRC32(polynomial = 0xedb88320) {\n        if (validatePoly(polynomial)) {\n            return Promise.reject(validatePoly(polynomial));\n        }\n        return WASMInterface(wasmJson$g, 4).then((wasm) => {\n            wasm.init(polynomial);\n            const obj = {\n                init: () => {\n                    wasm.init(polynomial);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 4,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    var name$f = \"crc64\";\n    var data$f = \"AGFzbQEAAAABDANgAAF/YAAAYAF/AAMHBgABAgEAAQUEAQECAgYOAn8BQZCJBgt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAQtIYXNoX1VwZGF0ZQACCkhhc2hfRmluYWwAAw1IYXNoX0dldFN0YXRlAAQOSGFzaF9DYWxjdWxhdGUABQpTVEFURV9TSVpFAwEKgwgGBQBBgAkL9QMDAX4BfwJ+AkBBACkDgIkCQQApA4AJIgBRDQBBgIkBIQFCACECA0AgAUIAQgBCAEIAQgBCAEIAQgAgAkIBg30gAIMgAkIBiIUiA0IBg30gAIMgA0IBiIUiA0IBg30gAIMgA0IBiIUiA0IBg30gAIMgA0IBiIUiA0IBg30gAIMgA0IBiIUiA0IBg30gAIMgA0IBiIUiA0IBg30gAIMgA0IBiIUiA0IBg30gAIMgA0IBiIU3AwAgAUEIaiEBIAJCAXwiAkKAAlINAAtBACEBA0AgAUGImQFqIAFBiIkBaikDACICp0H/AXFBA3RBgIkBaikDACACQgiIhSICNwMAIAFBiKkBaiACp0H/AXFBA3RBgIkBaikDACACQgiIhSICNwMAIAFBiLkBaiACp0H/AXFBA3RBgIkBaikDACACQgiIhSICNwMAIAFBiMkBaiACp0H/AXFBA3RBgIkBaikDACACQgiIhSICNwMAIAFBiNkBaiACp0H/AXFBA3RBgIkBaikDACACQgiIhSICNwMAIAFBiOkBaiACp0H/AXFBA3RBgIkBaikDACACQgiIhSICNwMAIAFBiPkBaiACp0H/AXFBA3RBgIkBaikDACACQgiIhTcDACABQQhqIgFB+A9HDQALQQAgADcDgIkCC0EAQgA3A4iJAguUAwIBfgJ/QQApA4iJAkJ/hSEBQYAJIQICQCAAQQhJDQBBgAkhAgNAIAIpAwAgAYUiAUIwiKdB/wFxQQN0QYCZAWopAwAgAUI4iKdBA3RBgIkBaikDAIUgAUIoiKdB/wFxQQN0QYCpAWopAwCFIAFCIIinQf8BcUEDdEGAuQFqKQMAhSABpyIDQRV2QfgPcUGAyQFqKQMAhSADQQ12QfgPcUGA2QFqKQMAhSADQQV2QfgPcUGA6QFqKQMAhSADQf8BcUEDdEGA+QFqKQMAhSEBIAJBCGohAiAAQXhqIgBBB0sNAAsLAkAgAEUNAAJAAkAgAEEBcQ0AIAAhAwwBCyABQv8BgyACMQAAhadBA3RBgIkBaikDACABQgiIhSEBIAJBAWohAiAAQX9qIQMLIABBAUYNAANAIAFC/wGDIAIxAACFp0EDdEGAiQFqKQMAIAFCCIiFIgFC/wGDIAJBAWoxAACFp0EDdEGAiQFqKQMAIAFCCIiFIQEgAkECaiECIANBfmoiAw0ACwtBACABQn+FNwOIiQILZAEBfkEAQQApA4iJAiIAQjiGIABCgP4Dg0IohoQgAEKAgPwHg0IYhiAAQoCAgPgPg0IIhoSEIABCCIhCgICA+A+DIABCGIhCgID8B4OEIABCKIhCgP4DgyAAQjiIhISENwOACQsGAEGIiQILAgALCwsBAEGACAsECAAAAA==\";\n    var hash$f = \"c5ac6c16\";\n    var wasmJson$f = {\n    \tname: name$f,\n    \tdata: data$f,\n    \thash: hash$f\n    };\n\n    const mutex$g = new Mutex();\n    let wasmCache$g = null;\n    const polyBuffer = new Uint8Array(8);\n    function parsePoly(poly) {\n        const errText = \"Polynomial must be provided as a 16 char long hex string\";\n        if (typeof poly !== \"string\" || poly.length !== 16) {\n            return { hi: 0, lo: 0, err: new Error(errText) };\n        }\n        const hi = Number(`0x${poly.slice(0, 8)}`);\n        const lo = Number(`0x${poly.slice(8)}`);\n        if (Number.isNaN(hi) || Number.isNaN(lo)) {\n            return { hi, lo, err: new Error(errText) };\n        }\n        return { hi, lo, err: null };\n    }\n    function writePoly(arr, lo, hi) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, lo, true);\n        buffer.setUint32(4, hi, true);\n    }\n    /**\n     * Calculates CRC-64 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param polynomial Input polynomial (defaults to 'c96c5795d7870f42' - ECMA)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function crc64(data, polynomial = \"c96c5795d7870f42\") {\n        const { hi, lo, err } = parsePoly(polynomial);\n        if (err !== null) {\n            return Promise.reject(err);\n        }\n        if (wasmCache$g === null) {\n            return lockedCreate(mutex$g, wasmJson$f, 8).then((wasm) => {\n                wasmCache$g = wasm;\n                writePoly(polyBuffer.buffer, lo, hi);\n                wasmCache$g.writeMemory(polyBuffer);\n                return wasmCache$g.calculate(data);\n            });\n        }\n        try {\n            writePoly(polyBuffer.buffer, lo, hi);\n            wasmCache$g.writeMemory(polyBuffer);\n            const hash = wasmCache$g.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new CRC-64 hash instance\n     * @param polynomial Input polynomial (defaults to 'c96c5795d7870f42' - ECMA)\n     */\n    function createCRC64(polynomial = \"c96c5795d7870f42\") {\n        const { hi, lo, err } = parsePoly(polynomial);\n        if (err !== null) {\n            return Promise.reject(err);\n        }\n        return WASMInterface(wasmJson$f, 8).then((wasm) => {\n            const instanceBuffer = new Uint8Array(8);\n            writePoly(instanceBuffer.buffer, lo, hi);\n            wasm.writeMemory(instanceBuffer);\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(instanceBuffer);\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 8,\n                digestSize: 8,\n            };\n            return obj;\n        });\n    }\n\n    var name$e = \"md4\";\n    var data$e = \"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\";\n    var hash$e = \"bd8ce7c7\";\n    var wasmJson$e = {\n    \tname: name$e,\n    \tdata: data$e,\n    \thash: hash$e\n    };\n\n    const mutex$f = new Mutex();\n    let wasmCache$f = null;\n    /**\n     * Calculates MD4 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function md4(data) {\n        if (wasmCache$f === null) {\n            return lockedCreate(mutex$f, wasmJson$e, 16).then((wasm) => {\n                wasmCache$f = wasm;\n                return wasmCache$f.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$f.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new MD4 hash instance\n     */\n    function createMD4() {\n        return WASMInterface(wasmJson$e, 16).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 16,\n            };\n            return obj;\n        });\n    }\n\n    var name$d = \"md5\";\n    var data$d = \"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\";\n    var hash$d = \"e6508e4b\";\n    var wasmJson$d = {\n    \tname: name$d,\n    \tdata: data$d,\n    \thash: hash$d\n    };\n\n    const mutex$e = new Mutex();\n    let wasmCache$e = null;\n    /**\n     * Calculates MD5 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function md5(data) {\n        if (wasmCache$e === null) {\n            return lockedCreate(mutex$e, wasmJson$d, 16).then((wasm) => {\n                wasmCache$e = wasm;\n                return wasmCache$e.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$e.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new MD5 hash instance\n     */\n    function createMD5() {\n        return WASMInterface(wasmJson$d, 16).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 16,\n            };\n            return obj;\n        });\n    }\n\n    var name$c = \"sha1\";\n    var data$c = \"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\";\n    var hash$c = \"6b530c24\";\n    var wasmJson$c = {\n    \tname: name$c,\n    \tdata: data$c,\n    \thash: hash$c\n    };\n\n    const mutex$d = new Mutex();\n    let wasmCache$d = null;\n    /**\n     * Calculates SHA-1 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha1(data) {\n        if (wasmCache$d === null) {\n            return lockedCreate(mutex$d, wasmJson$c, 20).then((wasm) => {\n                wasmCache$d = wasm;\n                return wasmCache$d.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$d.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-1 hash instance\n     */\n    function createSHA1() {\n        return WASMInterface(wasmJson$c, 20).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 20,\n            };\n            return obj;\n        });\n    }\n\n    var name$b = \"sha3\";\n    var data$b = \"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\";\n    var hash$b = \"fb24e536\";\n    var wasmJson$b = {\n    \tname: name$b,\n    \tdata: data$b,\n    \thash: hash$b\n    };\n\n    const mutex$c = new Mutex();\n    let wasmCache$c = null;\n    function validateBits$1(bits) {\n        if (![224, 256, 384, 512].includes(bits)) {\n            return new Error(\"Invalid variant! Valid values: 224, 256, 384, 512\");\n        }\n        return null;\n    }\n    /**\n     * Calculates SHA-3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha3(data, bits = 512) {\n        if (validateBits$1(bits)) {\n            return Promise.reject(validateBits$1(bits));\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$c === null || wasmCache$c.hashLength !== hashLength) {\n            return lockedCreate(mutex$c, wasmJson$b, hashLength).then((wasm) => {\n                wasmCache$c = wasm;\n                return wasmCache$c.calculate(data, bits, 0x06);\n            });\n        }\n        try {\n            const hash = wasmCache$c.calculate(data, bits, 0x06);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-3 hash instance\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     */\n    function createSHA3(bits = 512) {\n        if (validateBits$1(bits)) {\n            return Promise.reject(validateBits$1(bits));\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n            wasm.init(bits);\n            const obj = {\n                init: () => {\n                    wasm.init(bits);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType, 0x06),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 200 - 2 * outputSize,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$b = new Mutex();\n    let wasmCache$b = null;\n    function validateBits(bits) {\n        if (![224, 256, 384, 512].includes(bits)) {\n            return new Error(\"Invalid variant! Valid values: 224, 256, 384, 512\");\n        }\n        return null;\n    }\n    /**\n     * Calculates Keccak hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     * @returns Computed hash as a hexadecimal string\n     */\n    function keccak(data, bits = 512) {\n        if (validateBits(bits)) {\n            return Promise.reject(validateBits(bits));\n        }\n        const hashLength = bits / 8;\n        if (wasmCache$b === null || wasmCache$b.hashLength !== hashLength) {\n            return lockedCreate(mutex$b, wasmJson$b, hashLength).then((wasm) => {\n                wasmCache$b = wasm;\n                return wasmCache$b.calculate(data, bits, 0x01);\n            });\n        }\n        try {\n            const hash = wasmCache$b.calculate(data, bits, 0x01);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new Keccak hash instance\n     * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n     */\n    function createKeccak(bits = 512) {\n        if (validateBits(bits)) {\n            return Promise.reject(validateBits(bits));\n        }\n        const outputSize = bits / 8;\n        return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n            wasm.init(bits);\n            const obj = {\n                init: () => {\n                    wasm.init(bits);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType, 0x01),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 200 - 2 * outputSize,\n                digestSize: outputSize,\n            };\n            return obj;\n        });\n    }\n\n    var name$a = \"sha256\";\n    var data$a = \"\";\n    var hash$a = \"8c18dd94\";\n    var wasmJson$a = {\n    \tname: name$a,\n    \tdata: data$a,\n    \thash: hash$a\n    };\n\n    const mutex$a = new Mutex();\n    let wasmCache$a = null;\n    /**\n     * Calculates SHA-2 (SHA-224) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha224(data) {\n        if (wasmCache$a === null) {\n            return lockedCreate(mutex$a, wasmJson$a, 28).then((wasm) => {\n                wasmCache$a = wasm;\n                return wasmCache$a.calculate(data, 224);\n            });\n        }\n        try {\n            const hash = wasmCache$a.calculate(data, 224);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-224) hash instance\n     */\n    function createSHA224() {\n        return WASMInterface(wasmJson$a, 28).then((wasm) => {\n            wasm.init(224);\n            const obj = {\n                init: () => {\n                    wasm.init(224);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 28,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$9 = new Mutex();\n    let wasmCache$9 = null;\n    /**\n     * Calculates SHA-2 (SHA-256) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha256(data) {\n        if (wasmCache$9 === null) {\n            return lockedCreate(mutex$9, wasmJson$a, 32).then((wasm) => {\n                wasmCache$9 = wasm;\n                return wasmCache$9.calculate(data, 256);\n            });\n        }\n        try {\n            const hash = wasmCache$9.calculate(data, 256);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-256) hash instance\n     */\n    function createSHA256() {\n        return WASMInterface(wasmJson$a, 32).then((wasm) => {\n            wasm.init(256);\n            const obj = {\n                init: () => {\n                    wasm.init(256);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 32,\n            };\n            return obj;\n        });\n    }\n\n    var name$9 = \"sha512\";\n    var data$9 = \"\";\n    var hash$9 = \"f2e40eb1\";\n    var wasmJson$9 = {\n    \tname: name$9,\n    \tdata: data$9,\n    \thash: hash$9\n    };\n\n    const mutex$8 = new Mutex();\n    let wasmCache$8 = null;\n    /**\n     * Calculates SHA-2 (SHA-384) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha384(data) {\n        if (wasmCache$8 === null) {\n            return lockedCreate(mutex$8, wasmJson$9, 48).then((wasm) => {\n                wasmCache$8 = wasm;\n                return wasmCache$8.calculate(data, 384);\n            });\n        }\n        try {\n            const hash = wasmCache$8.calculate(data, 384);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-384) hash instance\n     */\n    function createSHA384() {\n        return WASMInterface(wasmJson$9, 48).then((wasm) => {\n            wasm.init(384);\n            const obj = {\n                init: () => {\n                    wasm.init(384);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 128,\n                digestSize: 48,\n            };\n            return obj;\n        });\n    }\n\n    const mutex$7 = new Mutex();\n    let wasmCache$7 = null;\n    /**\n     * Calculates SHA-2 (SHA-512) hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sha512(data) {\n        if (wasmCache$7 === null) {\n            return lockedCreate(mutex$7, wasmJson$9, 64).then((wasm) => {\n                wasmCache$7 = wasm;\n                return wasmCache$7.calculate(data, 512);\n            });\n        }\n        try {\n            const hash = wasmCache$7.calculate(data, 512);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SHA-2 (SHA-512) hash instance\n     */\n    function createSHA512() {\n        return WASMInterface(wasmJson$9, 64).then((wasm) => {\n            wasm.init(512);\n            const obj = {\n                init: () => {\n                    wasm.init(512);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 128,\n                digestSize: 64,\n            };\n            return obj;\n        });\n    }\n\n    var name$8 = \"xxhash32\";\n    var data$8 = \"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\";\n    var hash$8 = \"4bb12485\";\n    var wasmJson$8 = {\n    \tname: name$8,\n    \tdata: data$8,\n    \thash: hash$8\n    };\n\n    const mutex$6 = new Mutex();\n    let wasmCache$6 = null;\n    function validateSeed$3(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xffffffff) {\n            return new Error(\"Seed must be a valid 32-bit long unsigned integer.\");\n        }\n        return null;\n    }\n    /**\n     * Calculates xxHash32 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash32(data, seed = 0) {\n        if (validateSeed$3(seed)) {\n            return Promise.reject(validateSeed$3(seed));\n        }\n        if (wasmCache$6 === null) {\n            return lockedCreate(mutex$6, wasmJson$8, 4).then((wasm) => {\n                wasmCache$6 = wasm;\n                return wasmCache$6.calculate(data, seed);\n            });\n        }\n        try {\n            const hash = wasmCache$6.calculate(data, seed);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash32 hash instance\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash32(seed = 0) {\n        if (validateSeed$3(seed)) {\n            return Promise.reject(validateSeed$3(seed));\n        }\n        return WASMInterface(wasmJson$8, 4).then((wasm) => {\n            wasm.init(seed);\n            const obj = {\n                init: () => {\n                    wasm.init(seed);\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 16,\n                digestSize: 4,\n            };\n            return obj;\n        });\n    }\n\n    var name$7 = \"xxhash64\";\n    var data$7 = \"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\";\n    var hash$7 = \"177fbfa3\";\n    var wasmJson$7 = {\n    \tname: name$7,\n    \tdata: data$7,\n    \thash: hash$7\n    };\n\n    const mutex$5 = new Mutex();\n    let wasmCache$5 = null;\n    const seedBuffer$2 = new Uint8Array(8);\n    function validateSeed$2(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xffffffff) {\n            return new Error(\"Seed must be given as two valid 32-bit long unsigned integers (lo + high).\");\n        }\n        return null;\n    }\n    function writeSeed$2(arr, low, high) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, low, true);\n        buffer.setUint32(4, high, true);\n    }\n    /**\n     * Calculates xxHash64 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash64(data, seedLow = 0, seedHigh = 0) {\n        if (validateSeed$2(seedLow)) {\n            return Promise.reject(validateSeed$2(seedLow));\n        }\n        if (validateSeed$2(seedHigh)) {\n            return Promise.reject(validateSeed$2(seedHigh));\n        }\n        if (wasmCache$5 === null) {\n            return lockedCreate(mutex$5, wasmJson$7, 8).then((wasm) => {\n                wasmCache$5 = wasm;\n                writeSeed$2(seedBuffer$2.buffer, seedLow, seedHigh);\n                wasmCache$5.writeMemory(seedBuffer$2);\n                return wasmCache$5.calculate(data);\n            });\n        }\n        try {\n            writeSeed$2(seedBuffer$2.buffer, seedLow, seedHigh);\n            wasmCache$5.writeMemory(seedBuffer$2);\n            const hash = wasmCache$5.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash64 hash instance\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash64(seedLow = 0, seedHigh = 0) {\n        if (validateSeed$2(seedLow)) {\n            return Promise.reject(validateSeed$2(seedLow));\n        }\n        if (validateSeed$2(seedHigh)) {\n            return Promise.reject(validateSeed$2(seedHigh));\n        }\n        return WASMInterface(wasmJson$7, 8).then((wasm) => {\n            const instanceBuffer = new Uint8Array(8);\n            writeSeed$2(instanceBuffer.buffer, seedLow, seedHigh);\n            wasm.writeMemory(instanceBuffer);\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(instanceBuffer);\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 32,\n                digestSize: 8,\n            };\n            return obj;\n        });\n    }\n\n    var name$6 = \"xxhash3\";\n    var data$6 = \"\";\n    var hash$6 = \"5a2fbdbb\";\n    var wasmJson$6 = {\n    \tname: name$6,\n    \tdata: data$6,\n    \thash: hash$6\n    };\n\n    const mutex$4 = new Mutex();\n    let wasmCache$4 = null;\n    const seedBuffer$1 = new Uint8Array(8);\n    function validateSeed$1(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xffffffff) {\n            return new Error(\"Seed must be given as two valid 32-bit long unsigned integers (lo + high).\");\n        }\n        return null;\n    }\n    function writeSeed$1(arr, low, high) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, low, true);\n        buffer.setUint32(4, high, true);\n    }\n    /**\n     * Calculates xxHash3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash3(data, seedLow = 0, seedHigh = 0) {\n        if (validateSeed$1(seedLow)) {\n            return Promise.reject(validateSeed$1(seedLow));\n        }\n        if (validateSeed$1(seedHigh)) {\n            return Promise.reject(validateSeed$1(seedHigh));\n        }\n        if (wasmCache$4 === null) {\n            return lockedCreate(mutex$4, wasmJson$6, 8).then((wasm) => {\n                wasmCache$4 = wasm;\n                writeSeed$1(seedBuffer$1.buffer, seedLow, seedHigh);\n                wasmCache$4.writeMemory(seedBuffer$1);\n                return wasmCache$4.calculate(data);\n            });\n        }\n        try {\n            writeSeed$1(seedBuffer$1.buffer, seedLow, seedHigh);\n            wasmCache$4.writeMemory(seedBuffer$1);\n            const hash = wasmCache$4.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash3 hash instance\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash3(seedLow = 0, seedHigh = 0) {\n        if (validateSeed$1(seedLow)) {\n            return Promise.reject(validateSeed$1(seedLow));\n        }\n        if (validateSeed$1(seedHigh)) {\n            return Promise.reject(validateSeed$1(seedHigh));\n        }\n        return WASMInterface(wasmJson$6, 8).then((wasm) => {\n            const instanceBuffer = new Uint8Array(8);\n            writeSeed$1(instanceBuffer.buffer, seedLow, seedHigh);\n            wasm.writeMemory(instanceBuffer);\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(instanceBuffer);\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 512,\n                digestSize: 8,\n            };\n            return obj;\n        });\n    }\n\n    var name$5 = \"xxhash128\";\n    var data$5 = \"\";\n    var hash$5 = \"b9ab74e2\";\n    var wasmJson$5 = {\n    \tname: name$5,\n    \tdata: data$5,\n    \thash: hash$5\n    };\n\n    const mutex$3 = new Mutex();\n    let wasmCache$3 = null;\n    const seedBuffer = new Uint8Array(8);\n    function validateSeed(seed) {\n        if (!Number.isInteger(seed) || seed < 0 || seed > 0xffffffff) {\n            return new Error(\"Seed must be given as two valid 32-bit long unsigned integers (lo + high).\");\n        }\n        return null;\n    }\n    function writeSeed(arr, low, high) {\n        // write in little-endian format\n        const buffer = new DataView(arr);\n        buffer.setUint32(0, low, true);\n        buffer.setUint32(4, high, true);\n    }\n    /**\n     * Calculates xxHash128 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function xxhash128(data, seedLow = 0, seedHigh = 0) {\n        if (validateSeed(seedLow)) {\n            return Promise.reject(validateSeed(seedLow));\n        }\n        if (validateSeed(seedHigh)) {\n            return Promise.reject(validateSeed(seedHigh));\n        }\n        if (wasmCache$3 === null) {\n            return lockedCreate(mutex$3, wasmJson$5, 16).then((wasm) => {\n                wasmCache$3 = wasm;\n                writeSeed(seedBuffer.buffer, seedLow, seedHigh);\n                wasmCache$3.writeMemory(seedBuffer);\n                return wasmCache$3.calculate(data);\n            });\n        }\n        try {\n            writeSeed(seedBuffer.buffer, seedLow, seedHigh);\n            wasmCache$3.writeMemory(seedBuffer);\n            const hash = wasmCache$3.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new xxHash128 hash instance\n     * @param seedLow Lower 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     * @param seedHigh Higher 32 bits of the number used to\n     *  initialize the internal state of the algorithm (defaults to 0)\n     */\n    function createXXHash128(seedLow = 0, seedHigh = 0) {\n        if (validateSeed(seedLow)) {\n            return Promise.reject(validateSeed(seedLow));\n        }\n        if (validateSeed(seedHigh)) {\n            return Promise.reject(validateSeed(seedHigh));\n        }\n        return WASMInterface(wasmJson$5, 16).then((wasm) => {\n            const instanceBuffer = new Uint8Array(8);\n            writeSeed(instanceBuffer.buffer, seedLow, seedHigh);\n            wasm.writeMemory(instanceBuffer);\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.writeMemory(instanceBuffer);\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 512,\n                digestSize: 16,\n            };\n            return obj;\n        });\n    }\n\n    var name$4 = \"ripemd160\";\n    var data$4 = \"\";\n    var hash$4 = \"6abbce74\";\n    var wasmJson$4 = {\n    \tname: name$4,\n    \tdata: data$4,\n    \thash: hash$4\n    };\n\n    const mutex$2 = new Mutex();\n    let wasmCache$2 = null;\n    /**\n     * Calculates RIPEMD-160 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function ripemd160(data) {\n        if (wasmCache$2 === null) {\n            return lockedCreate(mutex$2, wasmJson$4, 20).then((wasm) => {\n                wasmCache$2 = wasm;\n                return wasmCache$2.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$2.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new RIPEMD-160 hash instance\n     */\n    function createRIPEMD160() {\n        return WASMInterface(wasmJson$4, 20).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 20,\n            };\n            return obj;\n        });\n    }\n\n    function calculateKeyBuffer(hasher, key) {\n        const { blockSize } = hasher;\n        const buf = getUInt8Buffer(key);\n        if (buf.length > blockSize) {\n            hasher.update(buf);\n            const uintArr = hasher.digest(\"binary\");\n            hasher.init();\n            return uintArr;\n        }\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n    }\n    function calculateHmac(hasher, key) {\n        hasher.init();\n        const { blockSize } = hasher;\n        const keyBuf = calculateKeyBuffer(hasher, key);\n        const keyBuffer = new Uint8Array(blockSize);\n        keyBuffer.set(keyBuf);\n        const opad = new Uint8Array(blockSize);\n        for (let i = 0; i < blockSize; i++) {\n            const v = keyBuffer[i];\n            opad[i] = v ^ 0x5c;\n            keyBuffer[i] = v ^ 0x36;\n        }\n        hasher.update(keyBuffer);\n        const obj = {\n            init: () => {\n                hasher.init();\n                hasher.update(keyBuffer);\n                return obj;\n            },\n            update: (data) => {\n                hasher.update(data);\n                return obj;\n            },\n            digest: ((outputType) => {\n                const uintArr = hasher.digest(\"binary\");\n                hasher.init();\n                hasher.update(opad);\n                hasher.update(uintArr);\n                return hasher.digest(outputType);\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n            }),\n            save: () => {\n                throw new Error(\"save() not supported\");\n            },\n            load: () => {\n                throw new Error(\"load() not supported\");\n            },\n            blockSize: hasher.blockSize,\n            digestSize: hasher.digestSize,\n        };\n        return obj;\n    }\n    /**\n     * Calculates HMAC hash\n     * @param hash Hash algorithm to use. It has to be the return value of a function like createSHA1()\n     * @param key Key (string, Buffer or TypedArray)\n     */\n    function createHMAC(hash, key) {\n        if (!hash || !hash.then) {\n            throw new Error('Invalid hash function is provided! Usage: createHMAC(createMD5(), \"key\").');\n        }\n        return hash.then((hasher) => calculateHmac(hasher, key));\n    }\n\n    function calculatePBKDF2(digest, salt, iterations, hashLength, outputType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const DK = new Uint8Array(hashLength);\n            const block1 = new Uint8Array(salt.length + 4);\n            const block1View = new DataView(block1.buffer);\n            const saltBuffer = getUInt8Buffer(salt);\n            const saltUIntBuffer = new Uint8Array(saltBuffer.buffer, saltBuffer.byteOffset, saltBuffer.length);\n            block1.set(saltUIntBuffer);\n            let destPos = 0;\n            const hLen = digest.digestSize;\n            const l = Math.ceil(hashLength / hLen);\n            let T = null;\n            let U = null;\n            for (let i = 1; i <= l; i++) {\n                block1View.setUint32(salt.length, i);\n                digest.init();\n                digest.update(block1);\n                T = digest.digest(\"binary\");\n                U = T.slice();\n                for (let j = 1; j < iterations; j++) {\n                    digest.init();\n                    digest.update(U);\n                    U = digest.digest(\"binary\");\n                    for (let k = 0; k < hLen; k++) {\n                        T[k] ^= U[k];\n                    }\n                }\n                DK.set(T.subarray(0, hashLength - destPos), destPos);\n                destPos += hLen;\n            }\n            if (outputType === \"binary\") {\n                return DK;\n            }\n            const digestChars = new Uint8Array(hashLength * 2);\n            return getDigestHex(digestChars, DK, hashLength);\n        });\n    }\n    const validateOptions$2 = (options) => {\n        if (!options || typeof options !== \"object\") {\n            throw new Error(\"Invalid options parameter. It requires an object.\");\n        }\n        if (!options.hashFunction || !options.hashFunction.then) {\n            throw new Error('Invalid hash function is provided! Usage: pbkdf2(\"password\", \"salt\", 1000, 32, createSHA1()).');\n        }\n        if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n            throw new Error(\"Iterations should be a positive number\");\n        }\n        if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n            throw new Error(\"Hash length should be a positive number\");\n        }\n        if (options.outputType === undefined) {\n            options.outputType = \"hex\";\n        }\n        if (![\"hex\", \"binary\"].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n        }\n    };\n    /**\n     * Generates a new PBKDF2 hash for the supplied password\n     */\n    function pbkdf2(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$2(options);\n            const hmac = yield createHMAC(options.hashFunction, options.password);\n            return calculatePBKDF2(hmac, options.salt, options.iterations, options.hashLength, options.outputType);\n        });\n    }\n\n    var name$3 = \"scrypt\";\n    var data$3 = \"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cyICajYCOCAAIAAoAjwgAiAKakESdyAGc2o2AjwLvxIDFX8Bfg5/AkAgAkUNACAAQQd0IgNBQGoiBEEAKAKACCIFIAMgAmwiBmogAyABbGoiByADaiIIaiEJIAAgAkEHdCIKIAFBB3RqIgtsIQwgACALQYABamwhDSAAQQV0IgtBASALQQFLGyILQWBxIQ4gC0EBcSEPIAdBeGohECAHQXBqIREgB0FoaiESIAdBYGohEyAHQVhqIRQgB0FQaiEVIAdBSGohFiAHQUBqIRcgAa1Cf3whGCAEIAdqIRkgByAAQQh0IhpqIRsgACAKQYABamwhHCALQQRJIR1BACEeQQAhHwNAQQAoAoAIIiAgAyAfbGohIQJAIABFDQBBACEiAkAgHQ0AICAgHmohI0EAIQtBACEiA0AgByALaiIEICMgC2oiJCgCADYCACAEQQRqICRBBGooAgA2AgAgBEEIaiAkQQhqKAIANgIAIARBDGogJEEMaigCADYCACALQRBqIQsgDiAiQQRqIiJHDQALCyAPRQ0AIAcgIkECdCILaiAhIAtqKAIANgIACwJAIAFFDQBBACElIBwhIyAGISYDQCAFISQgACEiAkACQCAADQAgGyAXKQMANwMAIBsgFikDADcDCCAbIBUpAwA3AxAgGyAUKQMANwMYIBsgEykDADcDICAbIBIpAwA3AyggGyARKQMANwMwIBsgECkDADcDOAwBCwNAICQgJmoiCyAkIAxqIgQpAwA3AwAgC0EIaiAEQQhqKQMANwMAIAtBEGogBEEQaikDADcDACALQRhqIARBGGopAwA3AwAgC0EgaiAEQSBqKQMANwMAIAtBKGogBEEoaikDADcDACALQTBqIARBMGopAwA3AwAgC0E4aiAEQThqKQMANwMAIAtBwABqIARBwABqKQMANwMAIAtByABqIARByABqKQMANwMAIAtB0ABqIARB0ABqKQMANwMAIAtB2ABqIARB2ABqKQMANwMAIAtB4ABqIARB4ABqKQMANwMAIAtB6ABqIARB6ABqKQMANwMAIAtB8ABqIARB8ABqKQMANwMAIAtB+ABqIARB+ABqKQMANwMAICRBgAFqISQgIkF/aiIiDQALIAcgCCAbIAAQAiAFISQgACEiA0AgJCAjaiILICQgDWoiBCkDADcDACALQQhqIARBCGopAwA3AwAgC0EQaiAEQRBqKQMANwMAIAtBGGogBEEYaikDADcDACALQSBqIARBIGopAwA3AwAgC0EoaiAEQShqKQMANwMAIAtBMGogBEEwaikDADcDACALQThqIARBOGopAwA3AwAgC0HAAGogBEHAAGopAwA3AwAgC0HIAGogBEHIAGopAwA3AwAgC0HQAGogBEHQAGopAwA3AwAgC0HYAGogBEHYAGopAwA3AwAgC0HgAGogBEHgAGopAwA3AwAgC0HoAGogBEHoAGopAwA3AwAgC0HwAGogBEHwAGopAwA3AwAgC0H4AGogBEH4AGopAwA3AwAgJEGAAWohJCAiQX9qIiINAAsLIAggByAbIAAQAiAjIBpqISMgJiAaaiEmICVBAmoiJSABSQ0AC0EAISUDQAJAAkAgAA0AIBsgFykDADcDACAbIBYpAwA3AwggGyAVKQMANwMQIBsgFCkDADcDGCAbIBMpAwA3AyAgGyASKQMANwMoIBsgESkDADcDMCAbIBApAwA3AzgMAQsgACAKIBkpAgAgGIOnQQd0amwhJiAFISQgACEiA0AgJCAMaiILIAspAwAgJCAmaiIEKQMAhTcDACALQQhqIiMgIykDACAEQQhqKQMAhTcDACALQRBqIiMgIykDACAEQRBqKQMAhTcDACALQRhqIiMgIykDACAEQRhqKQMAhTcDACALQSBqIiMgIykDACAEQSBqKQMAhTcDACALQShqIiMgIykDACAEQShqKQMAhTcDACALQTBqIiMgIykDACAEQTBqKQMAhTcDACALQThqIiMgIykDACAEQThqKQMAhTcDACALQcAAaiIjICMpAwAgBEHAAGopAwCFNwMAIAtByABqIiMgIykDACAEQcgAaikDAIU3AwAgC0HQAGoiIyAjKQMAIARB0ABqKQMAhTcDACALQdgAaiIjICMpAwAgBEHYAGopAwCFNwMAIAtB4ABqIiMgIykDACAEQeAAaikDAIU3AwAgC0HoAGoiIyAjKQMAIARB6ABqKQMAhTcDACALQfAAaiIjICMpAwAgBEHwAGopAwCFNwMAIAtB+ABqIgsgCykDACAEQfgAaikDAIU3AwAgJEGAAWohJCAiQX9qIiINAAsgByAIIBsgABACIAAgCiAJKQIAIBiDp0EHdGpsISYgBSEkIAAhIgNAICQgDWoiCyALKQMAICQgJmoiBCkDAIU3AwAgC0EIaiIjICMpAwAgBEEIaikDAIU3AwAgC0EQaiIjICMpAwAgBEEQaikDAIU3AwAgC0EYaiIjICMpAwAgBEEYaikDAIU3AwAgC0EgaiIjICMpAwAgBEEgaikDAIU3AwAgC0EoaiIjICMpAwAgBEEoaikDAIU3AwAgC0EwaiIjICMpAwAgBEEwaikDAIU3AwAgC0E4aiIjICMpAwAgBEE4aikDAIU3AwAgC0HAAGoiIyAjKQMAIARBwABqKQMAhTcDACALQcgAaiIjICMpAwAgBEHIAGopAwCFNwMAIAtB0ABqIiMgIykDACAEQdAAaikDAIU3AwAgC0HYAGoiIyAjKQMAIARB2ABqKQMAhTcDACALQeAAaiIjICMpAwAgBEHgAGopAwCFNwMAIAtB6ABqIiMgIykDACAEQegAaikDAIU3AwAgC0HwAGoiIyAjKQMAIARB8ABqKQMAhTcDACALQfgAaiILIAspAwAgBEH4AGopAwCFNwMAICRBgAFqISQgIkF/aiIiDQALCyAIIAcgGyAAEAIgJUECaiIlIAFJDQALCwJAIABFDQBBACEiAkAgHQ0AICAgHmohI0EAIQtBACEiA0AgIyALaiIEIAcgC2oiJCgCADYCACAEQQRqICRBBGooAgA2AgAgBEEIaiAkQQhqKAIANgIAIARBDGogJEEMaigCADYCACALQRBqIQsgDiAiQQRqIiJHDQALCyAPRQ0AICEgIkECdCILaiAHIAtqKAIANgIACyAeIANqIR4gH0EBaiIfIAJHDQALCws=\";\n    var hash$3 = \"b32721f8\";\n    var wasmJson$3 = {\n    \tname: name$3,\n    \tdata: data$3,\n    \thash: hash$3\n    };\n\n    function scryptInternal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { costFactor, blockSize, parallelism, hashLength } = options;\n            const SHA256Hasher = createSHA256();\n            const blockData = yield pbkdf2({\n                password: options.password,\n                salt: options.salt,\n                iterations: 1,\n                hashLength: 128 * blockSize * parallelism,\n                hashFunction: SHA256Hasher,\n                outputType: \"binary\",\n            });\n            const scryptInterface = yield WASMInterface(wasmJson$3, 0);\n            // last block is for storing the temporary vectors\n            const VSize = 128 * blockSize * costFactor;\n            const XYSize = 256 * blockSize;\n            scryptInterface.setMemorySize(blockData.length + VSize + XYSize);\n            scryptInterface.writeMemory(blockData, 0);\n            // mix blocks\n            scryptInterface.getExports().scrypt(blockSize, costFactor, parallelism);\n            const expensiveSalt = scryptInterface\n                .getMemory()\n                .subarray(0, 128 * blockSize * parallelism);\n            const outputData = yield pbkdf2({\n                password: options.password,\n                salt: expensiveSalt,\n                iterations: 1,\n                hashLength,\n                hashFunction: SHA256Hasher,\n                outputType: \"binary\",\n            });\n            if (options.outputType === \"hex\") {\n                const digestChars = new Uint8Array(hashLength * 2);\n                return getDigestHex(digestChars, outputData, hashLength);\n            }\n            // return binary format\n            return outputData;\n        });\n    }\n    const isPowerOfTwo = (v) => v && !(v & (v - 1));\n    const validateOptions$1 = (options) => {\n        if (!options || typeof options !== \"object\") {\n            throw new Error(\"Invalid options parameter. It requires an object.\");\n        }\n        if (!Number.isInteger(options.blockSize) || options.blockSize < 1) {\n            throw new Error(\"Block size should be a positive number\");\n        }\n        if (!Number.isInteger(options.costFactor) ||\n            options.costFactor < 2 ||\n            !isPowerOfTwo(options.costFactor)) {\n            throw new Error(\"Cost factor should be a power of 2, greater than 1\");\n        }\n        if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n            throw new Error(\"Parallelism should be a positive number\");\n        }\n        if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n            throw new Error(\"Hash length should be a positive number.\");\n        }\n        if (options.outputType === undefined) {\n            options.outputType = \"hex\";\n        }\n        if (![\"hex\", \"binary\"].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n        }\n    };\n    /**\n     * Calculates hash using the scrypt password-based key derivation function\n     * @returns Computed hash as a hexadecimal string or as\n     *          Uint8Array depending on the outputType option\n     */\n    function scrypt(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions$1(options);\n            return scryptInternal(options);\n        });\n    }\n\n    var name$2 = \"bcrypt\";\n    var data$2 = \"\";\n    var hash$2 = \"8bd8822d\";\n    var wasmJson$2 = {\n    \tname: name$2,\n    \tdata: data$2,\n    \thash: hash$2\n    };\n\n    function bcryptInternal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { costFactor, password, salt } = options;\n            const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n            bcryptInterface.writeMemory(getUInt8Buffer(salt), 0);\n            const passwordBuffer = getUInt8Buffer(password);\n            bcryptInterface.writeMemory(passwordBuffer, 16);\n            const shouldEncode = options.outputType === \"encoded\" ? 1 : 0;\n            bcryptInterface\n                .getExports()\n                .bcrypt(passwordBuffer.length, costFactor, shouldEncode);\n            const memory = bcryptInterface.getMemory();\n            if (options.outputType === \"encoded\") {\n                return intArrayToString(memory, 60);\n            }\n            if (options.outputType === \"hex\") {\n                const digestChars = new Uint8Array(24 * 2);\n                return getDigestHex(digestChars, memory, 24);\n            }\n            // return binary format\n            // the data is copied to allow GC of the original memory buffer\n            return memory.slice(0, 24);\n        });\n    }\n    const validateOptions = (options) => {\n        if (!options || typeof options !== \"object\") {\n            throw new Error(\"Invalid options parameter. It requires an object.\");\n        }\n        if (!Number.isInteger(options.costFactor) ||\n            options.costFactor < 4 ||\n            options.costFactor > 31) {\n            throw new Error(\"Cost factor should be a number between 4 and 31\");\n        }\n        options.password = getUInt8Buffer(options.password);\n        if (options.password.length < 1) {\n            throw new Error(\"Password should be at least 1 byte long\");\n        }\n        if (options.password.length > 72) {\n            throw new Error(\"Password should be at most 72 bytes long\");\n        }\n        options.salt = getUInt8Buffer(options.salt);\n        if (options.salt.length !== 16) {\n            throw new Error(\"Salt should be 16 bytes long\");\n        }\n        if (options.outputType === undefined) {\n            options.outputType = \"encoded\";\n        }\n        if (![\"hex\", \"binary\", \"encoded\"].includes(options.outputType)) {\n            throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n        }\n    };\n    /**\n     * Calculates hash using the bcrypt password-hashing function\n     * @returns Computed hash\n     */\n    function bcrypt(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateOptions(options);\n            return bcryptInternal(options);\n        });\n    }\n    const validateHashCharacters = (hash) => {\n        if (!/^\\$2[axyb]\\$[0-3][0-9]\\$[./A-Za-z0-9]{53}$/.test(hash)) {\n            return false;\n        }\n        if (hash[4] === \"0\" && Number(hash[5]) < 4) {\n            return false;\n        }\n        if (hash[4] === \"3\" && Number(hash[5]) > 1) {\n            return false;\n        }\n        return true;\n    };\n    const validateVerifyOptions = (options) => {\n        if (!options || typeof options !== \"object\") {\n            throw new Error(\"Invalid options parameter. It requires an object.\");\n        }\n        if (options.hash === undefined || typeof options.hash !== \"string\") {\n            throw new Error(\"Hash should be specified\");\n        }\n        if (options.hash.length !== 60) {\n            throw new Error(\"Hash should be 60 bytes long\");\n        }\n        if (!validateHashCharacters(options.hash)) {\n            throw new Error(\"Invalid hash\");\n        }\n        options.password = getUInt8Buffer(options.password);\n        if (options.password.length < 1) {\n            throw new Error(\"Password should be at least 1 byte long\");\n        }\n        if (options.password.length > 72) {\n            throw new Error(\"Password should be at most 72 bytes long\");\n        }\n    };\n    /**\n     * Verifies password using bcrypt password-hashing function\n     * @returns True if the encoded hash matches the password\n     */\n    function bcryptVerify(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            validateVerifyOptions(options);\n            const { hash, password } = options;\n            const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n            bcryptInterface.writeMemory(getUInt8Buffer(hash), 0);\n            const passwordBuffer = getUInt8Buffer(password);\n            bcryptInterface.writeMemory(passwordBuffer, 60);\n            return !!bcryptInterface.getExports().bcrypt_verify(passwordBuffer.length);\n        });\n    }\n\n    var name$1 = \"whirlpool\";\n    var data$1 = \"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\";\n    var hash$1 = \"8d8f6035\";\n    var wasmJson$1 = {\n    \tname: name$1,\n    \tdata: data$1,\n    \thash: hash$1\n    };\n\n    const mutex$1 = new Mutex();\n    let wasmCache$1 = null;\n    /**\n     * Calculates Whirlpool hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function whirlpool(data) {\n        if (wasmCache$1 === null) {\n            return lockedCreate(mutex$1, wasmJson$1, 64).then((wasm) => {\n                wasmCache$1 = wasm;\n                return wasmCache$1.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache$1.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new Whirlpool hash instance\n     */\n    function createWhirlpool() {\n        return WASMInterface(wasmJson$1, 64).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 64,\n            };\n            return obj;\n        });\n    }\n\n    var name = \"sm3\";\n    var data = \"AGFzbQEAAAABDANgAAF/YAAAYAF/AAMIBwABAgIBAAIFBAEBAgIGDgJ/AUHwiQULfwBBgAgLB3AIBm1lbW9yeQIADkhhc2hfR2V0QnVmZmVyAAAJSGFzaF9Jbml0AAELSGFzaF9VcGRhdGUAAgpIYXNoX0ZpbmFsAAQNSGFzaF9HZXRTdGF0ZQAFDkhhc2hfQ2FsY3VsYXRlAAYKU1RBVEVfU0laRQMBCtodBwUAQYAJC1EAQQBCzdy3nO7Jw/2wfzcCoIkBQQBCvOG8y6qVzpgWNwKYiQFBAELXhZG5gcCBxVo3ApCJAUEAQu+sgJyX16yKyQA3AoiJAUEAQgA3AoCJAQvvAwEIfwJAIABFDQBBACEBQQBBACgCgIkBIgIgAGoiAzYCgIkBIAJBP3EhBAJAIAMgAk8NAEEAQQAoAoSJAUEBajYChIkBC0GACSECAkAgBEUNAAJAIABBwAAgBGsiBU8NACAEIQEMAQsgBEE/cyEGIARBqIkBaiECQYAJIQMCQAJAIAVBB3EiBw0AIAUhCAwBCyAHIQgDQCACIAMtAAA6AAAgAkEBaiECIANBAWohAyAIQX9qIggNAAtBwAAgByAEamshCAsCQCAGQQdJDQADQCACIAMpAAA3AAAgAkEIaiECIANBCGohAyAIQXhqIggNAAsLQaiJARADIAVBgAlqIQIgACAFayEACwJAIABBwABJDQADQCACEAMgAkHAAGohAiAAQUBqIgBBP0sNAAsLIABFDQAgAUGoiQFqIQMCQAJAIABBB3EiCA0AIAAhBAwBCyAAQThxIQQDQCADIAItAAA6AAAgA0EBaiEDIAJBAWohAiAIQX9qIggNAAsLIABBCEkNAANAIAMgAi0AADoAACADIAItAAE6AAEgAyACLQACOgACIAMgAi0AAzoAAyADIAItAAQ6AAQgAyACLQAFOgAFIAMgAi0ABjoABiADIAItAAc6AAcgA0EIaiEDIAJBCGohAiAEQXhqIgQNAAsLC+wLARl/IwBBkAJrIgEkACABIAAoAhgiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiAzYCGCABIAAoAhQiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiBDYCFCABIAAoAggiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiBTYCCCABIAAoAhAiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiBjYCECABIAAoAiAiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiBzYCICABIAAoAgQiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiCDYCBCABIAAoAgwiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiCTYCDCABIAAoAhwiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiCjYCHCABIAAoAgAiAkEYdCACQYD+A3FBCHRyIAJBCHZBgP4DcSACQRh2cnIiCzYCACAAKAIkIQIgASAAKAI0IgxBGHQgDEGA/gNxQQh0ciAMQQh2QYD+A3EgDEEYdnJyIg02AjQgASAAKAIoIgxBGHQgDEGA/gNxQQh0ciAMQQh2QYD+A3EgDEEYdnJyIg42AiggASALIA1BD3dzIApzIgxBF3cgDEEPd3MgCUEHd3MgDnMgDHMiCjYCQCABIAAoAjgiDEEYdCAMQYD+A3FBCHRyIAxBCHZBgP4DcSAMQRh2cnIiCzYCOCABIAAoAiwiDEEYdCAMQYD+A3FBCHRyIAxBCHZBgP4DcSAMQRh2cnIiDzYCLCABIAggC0EPd3MgB3MiDEEXdyAMQQ93cyAGQQd3cyAPcyAMczYCRCABIAAoAjwiDEEYdCAMQYD+A3FBCHRyIAxBCHZBgP4DcSAMQRh2cnIiDDYCPCABIAJBGHQgAkGA/gNxQQh0ciACQQh2QYD+A3EgAkEYdnJyIgI2AiQgASAAKAIwIgBBGHQgAEGA/gNxQQh0ciAAQQh2QYD+A3EgAEEYdnJyIgY2AjAgASAFIAxBD3dzIAJzIgBBF3cgAEEPd3MgBEEHd3MgBnMgAHM2AkggASAOIApBD3dzIAlzIgBBF3cgAEEPd3MgA0EHd3MgDXMgAHM2AkxBACEGQSAhByABIQxBACgCiIkBIhAhCUEAKAKkiQEiESEPQQAoAqCJASISIQ1BACgCnIkBIhMhCEEAKAKYiQEiFCEOQQAoApSJASIVIRZBACgCkIkBIhchA0EAKAKMiQEiGCELA0AgCCAOIgJzIA0iBHMgD2ogCSIAQQx3Ig0gAmpBmYqxzgcgB3ZBmYqxzgcgBnRyakEHdyIPaiAMKAIAIhlqIglBEXcgCUEJd3MgCXMhDiADIgUgC3MgAHMgFmogDyANc2ogDEEQaigCACAZc2ohCSAMQQRqIQwgB0F/aiEHIAhBE3chDSALQQl3IQMgBCEPIAIhCCAFIRYgACELIAZBAWoiBkEQRw0AC0EAIQZBECEHA0AgASAGaiIMQdAAaiAMQThqKAIAIAxBLGooAgAgDEEQaigCAHMgDEHEAGooAgAiFkEPd3MiCEEXd3MgCEEPd3MgDEEcaigCAEEHd3MgCHMiGTYCACANIg8gDiIMQX9zcSACIAxxciAEaiAJIghBDHciDSAMakGKu57UByAHd2pBB3ciBGogCmoiCUERdyAJQQl3cyAJcyEOIAggAyILIABycSALIABxciAFaiAEIA1zaiAZIApzaiEJIAZBBGohBiACQRN3IQ0gAEEJdyEDIBYhCiAPIQQgDCECIAshBSAIIQAgB0EBaiIHQcAARw0AC0EAIA8gEXM2AqSJAUEAIA0gEnM2AqCJAUEAIAwgE3M2ApyJAUEAIA4gFHM2ApiJAUEAIAsgFXM2ApSJAUEAIAMgF3M2ApCJAUEAIAggGHM2AoyJAUEAIAkgEHM2AoiJASABQZACaiQAC4ILAQp/IwBBEGsiACQAIABBACgCgIkBIgFBG3QgAUELdEGAgPwHcXIgAUEFdkGA/gNxIAFBA3RBGHZycjYCDCAAQQAoAoSJASICQQN0IgMgAUEddnIiBEEYdCAEQYD+A3FBCHRyIAJBBXZBgP4DcSADQRh2cnI2AggCQEE4QfgAIAFBP3EiBUE4SRsgBWsiA0UNAEEAIAMgAWoiATYCgIkBAkAgASADTw0AQQAgAkEBajYChIkBC0GQCCEBQQAhBgJAIAVFDQACQCADQcAAIAVrIgdPDQAgBSEGDAELIAVBP3MhCCAFQaiJAWohAUGQCCECAkACQCAHQQdxIgkNACAHIQQMAQsgCSEEA0AgASACLQAAOgAAIAFBAWohASACQQFqIQIgBEF/aiIEDQALQcAAIAkgBWprIQQLAkAgCEEHSQ0AA0AgASACKQAANwAAIAFBCGohASACQQhqIQIgBEF4aiIEDQALC0GoiQEQAyAHQZAIaiEBIAMgB2shAwsCQCADQcAASQ0AA0AgARADIAFBwABqIQEgA0FAaiIDQT9LDQALCyADRQ0AIAZBqIkBaiECAkACQCADQQdxIgQNACADIQUMAQsgA0E4cSEFA0AgAiABLQAAOgAAIAJBAWohAiABQQFqIQEgBEF/aiIEDQALCyADQQhJDQADQCACIAEtAAA6AAAgAiABLQABOgABIAIgAS0AAjoAAiACIAEtAAM6AAMgAiABLQAEOgAEIAIgAS0ABToABSACIAEtAAY6AAYgAiABLQAHOgAHIAJBCGohAiABQQhqIQEgBUF4aiIFDQALC0EAQQAoAoCJASICQQhqNgKAiQEgAkE/cSEBAkAgAkF4SQ0AQQBBACgChIkBQQFqNgKEiQELAkACQAJAAkAgAQ0AQQAhAQwBCyABQThJDQAgAUGoiQFqIAAtAAg6AAACQCABQT9GDQAgAUGpiQFqIAAtAAk6AAAgAUE+Rg0AIAFBqokBaiAALQAKOgAAIAFBPUYNACABQauJAWogAC0ACzoAACABQTxGDQAgAUGsiQFqIAAtAAw6AAAgAUE7Rg0AIAFBrYkBaiAALQANOgAAIAFBOkYNACABQa6JAWogAC0ADjoAACABQTlGDQAgAUGviQFqIAAtAA86AABBqIkBEAMMAwtBqIkBEAMgAkEHcSIERQ0CIAFBR2ohBSAAQQhqQcAAIAFraiECIAFBSGohBkGoiQEhASAEIQMDQCABIAItAAA6AAAgAUEBaiEBIAJBAWohAiADQX9qIgMNAAsgBUEHSQ0CIAYgBGshAwwBCyABQaiJAWohASAAQQhqIQJBCCEDCwNAIAEgAikAADcAACABQQhqIQEgAkEIaiECIANBeGoiAw0ACwtBAEEAKAKIiQEiAUEYdCABQYD+A3FBCHRyIAFBCHZBgP4DcSABQRh2cnI2AoAJQQBBACgCjIkBIgFBGHQgAUGA/gNxQQh0ciABQQh2QYD+A3EgAUEYdnJyNgKECUEAQQAoApCJASIBQRh0IAFBgP4DcUEIdHIgAUEIdkGA/gNxIAFBGHZycjYCiAlBAEEAKAKUiQEiAUEYdCABQYD+A3FBCHRyIAFBCHZBgP4DcSABQRh2cnI2AowJQQBBACgCmIkBIgFBGHQgAUGA/gNxQQh0ciABQQh2QYD+A3EgAUEYdnJyNgKQCUEAQQAoApyJASIBQRh0IAFBgP4DcUEIdHIgAUEIdkGA/gNxIAFBGHZycjYClAlBAEEAKAKgiQEiAUEYdCABQYD+A3FBCHRyIAFBCHZBgP4DcSABQRh2cnI2ApgJQQBBACgCpIkBIgFBGHQgAUGA/gNxQQh0ciABQQh2QYD+A3EgAUEYdnJyNgKcCSAAQRBqJAALBgBBgIkBC5UCAQR/QQBCzdy3nO7Jw/2wfzcCoIkBQQBCvOG8y6qVzpgWNwKYiQFBAELXhZG5gcCBxVo3ApCJAUEAQu+sgJyX16yKyQA3AoiJAUEAQgA3AoCJAQJAIABFDQBBACAANgKAiQFBgAkhAQJAIABBwABJDQBBgAkhAQNAIAEQAyABQcAAaiEBIABBQGoiAEE/Sw0ACyAARQ0BCyAAQX9qIQICQAJAIABBB3EiAw0AQaiJASEEDAELIABBeHEhAEGoiQEhBANAIAQgAS0AADoAACAEQQFqIQQgAUEBaiEBIANBf2oiAw0ACwsgAkEHSQ0AA0AgBCABKQAANwAAIARBCGohBCABQQhqIQEgAEF4aiIADQALCxAECwtRAgBBgAgLBGgAAAAAQZAIC0CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n    var hash = \"b6fb4b8e\";\n    var wasmJson = {\n    \tname: name,\n    \tdata: data,\n    \thash: hash\n    };\n\n    const mutex = new Mutex();\n    let wasmCache = null;\n    /**\n     * Calculates SM3 hash\n     * @param data Input data (string, Buffer or TypedArray)\n     * @returns Computed hash as a hexadecimal string\n     */\n    function sm3(data) {\n        if (wasmCache === null) {\n            return lockedCreate(mutex, wasmJson, 32).then((wasm) => {\n                wasmCache = wasm;\n                return wasmCache.calculate(data);\n            });\n        }\n        try {\n            const hash = wasmCache.calculate(data);\n            return Promise.resolve(hash);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    /**\n     * Creates a new SM3 hash instance\n     */\n    function createSM3() {\n        return WASMInterface(wasmJson, 32).then((wasm) => {\n            wasm.init();\n            const obj = {\n                init: () => {\n                    wasm.init();\n                    return obj;\n                },\n                update: (data) => {\n                    wasm.update(data);\n                    return obj;\n                },\n                // biome-ignore lint/suspicious/noExplicitAny: Conflict with IHasher type\n                digest: (outputType) => wasm.digest(outputType),\n                save: () => wasm.save(),\n                load: (data) => {\n                    wasm.load(data);\n                    return obj;\n                },\n                blockSize: 64,\n                digestSize: 32,\n            };\n            return obj;\n        });\n    }\n\n    exports.adler32 = adler32;\n    exports.argon2Verify = argon2Verify;\n    exports.argon2d = argon2d;\n    exports.argon2i = argon2i;\n    exports.argon2id = argon2id;\n    exports.bcrypt = bcrypt;\n    exports.bcryptVerify = bcryptVerify;\n    exports.blake2b = blake2b;\n    exports.blake2s = blake2s;\n    exports.blake3 = blake3;\n    exports.crc32 = crc32;\n    exports.crc64 = crc64;\n    exports.createAdler32 = createAdler32;\n    exports.createBLAKE2b = createBLAKE2b;\n    exports.createBLAKE2s = createBLAKE2s;\n    exports.createBLAKE3 = createBLAKE3;\n    exports.createCRC32 = createCRC32;\n    exports.createCRC64 = createCRC64;\n    exports.createHMAC = createHMAC;\n    exports.createKeccak = createKeccak;\n    exports.createMD4 = createMD4;\n    exports.createMD5 = createMD5;\n    exports.createRIPEMD160 = createRIPEMD160;\n    exports.createSHA1 = createSHA1;\n    exports.createSHA224 = createSHA224;\n    exports.createSHA256 = createSHA256;\n    exports.createSHA3 = createSHA3;\n    exports.createSHA384 = createSHA384;\n    exports.createSHA512 = createSHA512;\n    exports.createSM3 = createSM3;\n    exports.createWhirlpool = createWhirlpool;\n    exports.createXXHash128 = createXXHash128;\n    exports.createXXHash3 = createXXHash3;\n    exports.createXXHash32 = createXXHash32;\n    exports.createXXHash64 = createXXHash64;\n    exports.keccak = keccak;\n    exports.md4 = md4;\n    exports.md5 = md5;\n    exports.pbkdf2 = pbkdf2;\n    exports.ripemd160 = ripemd160;\n    exports.scrypt = scrypt;\n    exports.sha1 = sha1;\n    exports.sha224 = sha224;\n    exports.sha256 = sha256;\n    exports.sha3 = sha3;\n    exports.sha384 = sha384;\n    exports.sha512 = sha512;\n    exports.sm3 = sm3;\n    exports.whirlpool = whirlpool;\n    exports.xxhash128 = xxhash128;\n    exports.xxhash3 = xxhash3;\n    exports.xxhash32 = xxhash32;\n    exports.xxhash64 = xxhash64;\n\n}));\n", "export { Wallet } from './wallet.js';\nexport { Keypair } from './keypair.js';\nexport { PublicKey } from './publickey.js';\nexport { generateMnemonic } from './bip39.js';\nexport { Connection } from './connection.js';\nexport { SystemProgram } from './system-program.js';\nexport { SLHKeypair } from './slh-keypair.js';\nexport { Transaction } from './transaction.js';\nexport { Address } from './address.js';\nexport * from './utils.js';\nexport * from './constants.js';\n", "/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n/**\n * 4KB JS implementation of ed25519 EDDSA signatures compliant with RFC8032, FIPS 186-5 & ZIP215.\n * @module\n */\nconst P = 2n ** 255n - 19n; // ed25519 is twisted edwards curve\nconst N = 2n ** 252n + 27742317777372353535851937790883648493n; // curve's (group) order\nconst Gx = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an; // base point x\nconst Gy = 0x6666666666666666666666666666666666666666666666666666666666666658n; // base point y\nconst _d = 37095705934669439343138083508754565189542113879843219016388785533085940283555n;\n/**\n * ed25519 curve parameters. Equation is \u2212x\u00B2 + y\u00B2 = -a + dx\u00B2y\u00B2.\n * Gx and Gy are generator coordinates. p is field order, n is group order.\n * h is cofactor.\n */\nconst CURVE = {\n    a: -1n, // -1 mod p\n    d: _d, // -(121665/121666) mod p\n    p: P, n: N, h: 8, Gx: Gx, Gy: Gy // field prime, curve (group) order, cofactor\n};\nconst err = (m = '') => { throw new Error(m); }; // error helper, messes-up stack trace\nconst isS = (s) => typeof s === 'string'; // is string\nconst isu8 = (a) => (a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array'));\nconst au8 = (a, l) => // is Uint8Array (of specific length)\n !isu8(a) || (typeof l === 'number' && l > 0 && a.length !== l) ?\n    err('Uint8Array of valid length expected') : a;\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst toU8 = (a, len) => au8(isS(a) ? h2b(a) : u8n(au8(a)), len); // norm(hex/u8a) to u8a\nconst M = (a, b = P) => { let r = a % b; return r >= 0n ? r : b + r; }; // mod division\nconst isPoint = (p) => (p instanceof Point ? p : err('Point expected')); // is xyzt point\n/** Point in xyzt extended coordinates. */\nclass Point {\n    constructor(ex, ey, ez, et) {\n        this.ex = ex;\n        this.ey = ey;\n        this.ez = ez;\n        this.et = et;\n    }\n    static fromAffine(p) { return new Point(p.x, p.y, 1n, M(p.x * p.y)); }\n    /** RFC8032 5.1.3: hex / Uint8Array to Point. */\n    static fromHex(hex, zip215 = false) {\n        const { d } = CURVE;\n        hex = toU8(hex, 32);\n        const normed = hex.slice(); // copy the array to not mess it up\n        const lastByte = hex[31];\n        normed[31] = lastByte & ~0x80; // adjust first LE byte = last BE byte\n        const y = b2n_LE(normed); // decode as little-endian, convert to num\n        if (zip215 && !(0n <= y && y < 2n ** 256n))\n            err('bad y coord 1'); // zip215=true  [1..2^256-1]\n        if (!zip215 && !(0n <= y && y < P))\n            err('bad y coord 2'); // zip215=false [1..P-1]\n        const y2 = M(y * y); // y\u00B2\n        const u = M(y2 - 1n); // u=y\u00B2-1\n        const v = M(d * y2 + 1n); // v=dy\u00B2+1\n        let { isValid, value: x } = uvRatio(u, v); // (uv\u00B3)(uv\u2077)^(p-5)/8; square root\n        if (!isValid)\n            err('bad y coordinate 3'); // not square root: bad point\n        const isXOdd = (x & 1n) === 1n; // adjust sign of x coordinate\n        const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n        if (!zip215 && x === 0n && isLastByteOdd)\n            err('bad y coord 3'); // x=0 and x_0 = 1\n        if (isLastByteOdd !== isXOdd)\n            x = M(-x);\n        return new Point(x, y, 1n, M(x * y)); // Z=1, T=xy\n    }\n    get x() { return this.toAffine().x; } // .x, .y will call expensive toAffine.\n    get y() { return this.toAffine().y; } // Should be used with care.\n    equals(other) {\n        const { ex: X1, ey: Y1, ez: Z1 } = this;\n        const { ex: X2, ey: Y2, ez: Z2 } = isPoint(other); // isPoint() checks class equality\n        const X1Z2 = M(X1 * Z2), X2Z1 = M(X2 * Z1);\n        const Y1Z2 = M(Y1 * Z2), Y2Z1 = M(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() { return this.equals(I); }\n    negate() {\n        return new Point(M(-this.ex), this.ey, this.ez, M(-this.et));\n    }\n    /** Point doubling. Complete formula. */\n    double() {\n        const { ex: X1, ey: Y1, ez: Z1 } = this; // Cost: 4M + 4S + 1*a + 6add + 1*2\n        const { a } = CURVE; // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        const A = M(X1 * X1);\n        const B = M(Y1 * Y1);\n        const C = M(2n * M(Z1 * Z1));\n        const D = M(a * A);\n        const x1y1 = X1 + Y1;\n        const E = M(M(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = M(E * F);\n        const Y3 = M(G * H);\n        const T3 = M(E * H);\n        const Z3 = M(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    /** Point addition. Complete formula. */\n    add(other) {\n        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this; // Cost: 8M + 1*k + 8add + 1*2.\n        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = isPoint(other); // doesn't check if other on-curve\n        const { a, d } = CURVE; // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n        const A = M(X1 * X2);\n        const B = M(Y1 * Y2);\n        const C = M(T1 * d * T2);\n        const D = M(Z1 * Z2);\n        const E = M((X1 + Y1) * (X2 + Y2) - A - B);\n        const F = M(D - C);\n        const G = M(D + C);\n        const H = M(B - a * A);\n        const X3 = M(E * F);\n        const Y3 = M(G * H);\n        const T3 = M(E * H);\n        const Z3 = M(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    mul(n, safe = true) {\n        if (n === 0n)\n            return safe === true ? err('cannot multiply by 0') : I;\n        if (!(typeof n === 'bigint' && 0n < n && n < N))\n            err('invalid scalar, must be < L');\n        if (!safe && this.is0() || n === 1n)\n            return this; // safe=true bans 0. safe=false allows 0.\n        if (this.equals(G))\n            return wNAF(n).p; // use wNAF precomputes for base points\n        let p = I, f = G; // init result point & fake point\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) { // double-and-add ladder\n            if (n & 1n)\n                p = p.add(d); // if bit is present, add to point\n            else if (safe)\n                f = f.add(d); // if not, add to fake for timing safety\n        }\n        return p;\n    }\n    multiply(scalar) { return this.mul(scalar); } // Aliases for compatibilty\n    clearCofactor() { return this.mul(BigInt(CURVE.h), false); } // multiply by cofactor\n    isSmallOrder() { return this.clearCofactor().is0(); } // check if P is small order\n    isTorsionFree() {\n        let p = this.mul(N / 2n, false).double(); // ensures the point is not \"bad\".\n        if (N % 2n)\n            p = p.add(this); // P^(N+1)             // P*N == (P*(N/2))*2+P\n        return p.is0();\n    }\n    /** converts point to 2d xy affine point. (x, y, z, t) \u220B (x=x/z, y=y/z, t=xy). */\n    toAffine() {\n        const { ex: x, ey: y, ez: z } = this;\n        if (this.equals(I))\n            return { x: 0n, y: 1n }; // fast-path for zero point\n        const iz = invert(z, P); // z^-1: invert z\n        if (M(z * iz) !== 1n)\n            err('invalid inverse'); // (z * z^-1) must be 1, otherwise bad math\n        return { x: M(x * iz), y: M(y * iz) }; // x = x*z^-1; y = y*z^-1\n    }\n    toRawBytes() {\n        const { x, y } = this.toAffine(); // convert to affine 2d point\n        const b = n2b_32LE(y); // encode number to 32 bytes\n        b[31] |= x & 1n ? 0x80 : 0; // store sign in first LE byte\n        return b;\n    }\n    toHex() { return b2h(this.toRawBytes()); } // encode to hex string\n}\n/** Generator / Base point */\nPoint.BASE = new Point(Gx, Gy, 1n, M(Gx * Gy));\n/** Identity / Zero point */\nPoint.ZERO = new Point(0n, 1n, 1n, 0n);\nconst { BASE: G, ZERO: I } = Point; // Generator, identity points\nconst padh = (num, pad) => num.toString(16).padStart(pad, '0');\nconst b2h = (b) => Array.from(au8(b)).map(e => padh(e, 2)).join(''); // bytes to hex\nconst C = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 }; // ASCII characters\nconst _ch = (ch) => {\n    if (ch >= C._0 && ch <= C._9)\n        return ch - C._0; // '2' => 50-48\n    if (ch >= C.A && ch <= C.F)\n        return ch - (C.A - 10); // 'B' => 66-(65-10)\n    if (ch >= C.a && ch <= C.f)\n        return ch - (C.a - 10); // 'b' => 98-(97-10)\n    return;\n};\nconst h2b = (hex) => {\n    const e = 'hex invalid';\n    if (!isS(hex))\n        return err(e);\n    const hl = hex.length, al = hl / 2;\n    if (hl % 2)\n        return err(e);\n    const array = u8n(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) { // treat each char as ASCII\n        const n1 = _ch(hex.charCodeAt(hi)); // parse first char, multiply it by 16\n        const n2 = _ch(hex.charCodeAt(hi + 1)); // parse second char\n        if (n1 === undefined || n2 === undefined)\n            return err(e);\n        array[ai] = n1 * 16 + n2; // example: 'A9' => 10*16 + 9\n    }\n    return array;\n};\nconst n2b_32LE = (num) => h2b(padh(num, 32 * 2)).reverse(); // number to bytes LE\nconst b2n_LE = (b) => BigInt('0x' + b2h(u8n(au8(b)).reverse())); // bytes LE to num\nconst concatB = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + au8(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\nconst invert = (num, md) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md); // no neg exponent for now\n    let a = M(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) { // uses euclidean gcd algorithm\n        const q = b / a, r = b % a; // not constant-time\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? M(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst pow2 = (x, power) => {\n    let r = x;\n    while (power-- > 0n) {\n        r *= r;\n        r %= P;\n    }\n    return r;\n};\nconst pow_2_252_3 = (x) => {\n    const x2 = (x * x) % P; // x^2,       bits 1\n    const b2 = (x2 * x) % P; // x^3,       bits 11\n    const b4 = (pow2(b2, 2n) * b2) % P; // x^(2^4-1), bits 1111\n    const b5 = (pow2(b4, 1n) * x) % P; // x^(2^5-1), bits 11111\n    const b10 = (pow2(b5, 5n) * b5) % P; // x^(2^10)\n    const b20 = (pow2(b10, 10n) * b10) % P; // x^(2^20)\n    const b40 = (pow2(b20, 20n) * b20) % P; // x^(2^40)\n    const b80 = (pow2(b40, 40n) * b40) % P; // x^(2^80)\n    const b160 = (pow2(b80, 80n) * b80) % P; // x^(2^160)\n    const b240 = (pow2(b160, 80n) * b80) % P; // x^(2^240)\n    const b250 = (pow2(b240, 10n) * b10) % P; // x^(2^250)\n    const pow_p_5_8 = (pow2(b250, 2n) * x) % P; // < To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n};\nconst RM1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n; // \u221A-1\nconst uvRatio = (u, v) => {\n    const v3 = M(v * v * v); // v\u00B3\n    const v7 = M(v3 * v3 * v); // v\u2077\n    const pow = pow_2_252_3(u * v7).pow_p_5_8; // (uv\u2077)^(p-5)/8\n    let x = M(u * v3 * pow); // (uv\u00B3)(uv\u2077)^(p-5)/8\n    const vx2 = M(v * x * x); // vx\u00B2\n    const root1 = x; // First root candidate\n    const root2 = M(x * RM1); // Second root candidate; RM1 is \u221A-1\n    const useRoot1 = vx2 === u; // If vx\u00B2 = u (mod p), x is a square root\n    const useRoot2 = vx2 === M(-u); // If vx\u00B2 = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === M(-u * RM1); // There is no valid root, vx\u00B2 = -u\u221A-1\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if ((M(x) & 1n) === 1n)\n        x = M(-x); // edIsNegative\n    return { isValid: useRoot1 || useRoot2, value: x };\n};\nconst modL_LE = (hash) => M(b2n_LE(hash), N); // modulo L; but little-endian\nlet _shaS;\nconst sha512a = (...m) => etc.sha512Async(...m); // Async SHA512\nconst sha512s = (...m) => // Sync SHA512, not set by default\n typeof _shaS === 'function' ? _shaS(...m) : err('etc.sha512Sync not set');\nconst hash2extK = (hashed) => {\n    const head = hashed.slice(0, 32); // slice creates a copy, unlike subarray\n    head[0] &= 248; // Clamp bits: 0b1111_1000,\n    head[31] &= 127; // 0b0111_1111,\n    head[31] |= 64; // 0b0100_0000\n    const prefix = hashed.slice(32, 64); // private key \"prefix\"\n    const scalar = modL_LE(head); // modular division over curve order\n    const point = G.mul(scalar); // public key point\n    const pointBytes = point.toRawBytes(); // point serialized to Uint8Array\n    return { head, prefix, scalar, point, pointBytes };\n};\n// RFC8032 5.1.5; getPublicKey async, sync. Hash priv key and extract point.\nconst getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, 32)).then(hash2extK);\nconst getExtendedPublicKey = (priv) => hash2extK(sha512s(toU8(priv, 32)));\n/** Creates 32-byte ed25519 public key from 32-byte private key. Async. */\nconst getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then(p => p.pointBytes);\n/** Creates 32-byte ed25519 public key from 32-byte private key. To use, set `etc.sha512Sync` first. */\nconst getPublicKey = (priv) => getExtendedPublicKey(priv).pointBytes;\nfunction hashFinish(asynchronous, res) {\n    if (asynchronous)\n        return sha512a(res.hashable).then(res.finish);\n    return res.finish(sha512s(res.hashable));\n}\nconst _sign = (e, rBytes, msg) => {\n    const { pointBytes: P, scalar: s } = e;\n    const r = modL_LE(rBytes); // r was created outside, reduce it modulo L\n    const R = G.mul(r).toRawBytes(); // R = [r]B\n    const hashable = concatB(R, P, msg); // dom2(F, C) || R || A || PH(M)\n    const finish = (hashed) => {\n        const S = M(r + modL_LE(hashed) * s, N); // S = (r + k * s) mod L; 0 <= s < l\n        return au8(concatB(R, n2b_32LE(S)), 64); // 64-byte sig: 32b R.x + 32b LE(S)\n    };\n    return { hashable, finish };\n};\n/** Signs message (NOT message hash) using private key. Async. */\nconst signAsync = async (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key async\n    const e = await getExtendedPublicKeyAsync(privKey); // pub,prfx\n    const rBytes = await sha512a(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(true, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\n/** Signs message (NOT message hash) using private key. To use, set `etc.sha512Sync` first. */\nconst sign = (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key sync\n    const e = getExtendedPublicKey(privKey); // pub,prfx\n    const rBytes = sha512s(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(false, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst dvo = { zip215: true };\nconst _verify = (sig, msg, pub, opts = dvo) => {\n    sig = toU8(sig, 64); // Signature hex str/Bytes, must be 64 bytes\n    msg = toU8(msg); // Message hex str/Bytes\n    pub = toU8(pub, 32);\n    const { zip215 } = opts; // switch between zip215 and rfc8032 verif\n    let A, R, s, SB, hashable = new Uint8Array();\n    try {\n        A = Point.fromHex(pub, zip215); // public key A decoded\n        R = Point.fromHex(sig.slice(0, 32), zip215); // 0 <= R < 2^256: ZIP215 R can be >= P\n        s = b2n_LE(sig.slice(32, 64)); // Decode second half as an integer S\n        SB = G.mul(s, false); // in the range 0 <= s < L\n        hashable = concatB(R.toRawBytes(), A.toRawBytes(), msg); // dom2(F, C) || R || A || PH(M)\n    }\n    catch (error) { }\n    const finish = (hashed) => {\n        if (SB == null)\n            return false; // false if try-catch catched an error\n        if (!zip215 && A.isSmallOrder())\n            return false; // false for SBS: Strongly Binding Signature\n        const k = modL_LE(hashed); // decode in little-endian, modulo L\n        const RkA = R.add(A.mul(k, false)); // [8]R + [8][k]A'\n        return RkA.add(SB.negate()).clearCofactor().is0(); // [8][S]B = [8]R + [8][k]A'\n    };\n    return { hashable, finish };\n};\n// RFC8032 5.1.7: verification async, sync\n/** Verifies signature on message and public key. Async. */\nconst verifyAsync = async (s, m, p, opts = dvo) => hashFinish(true, _verify(s, m, p, opts));\n/** Verifies signature on message and public key. To use, set `etc.sha512Sync` first. */\nconst verify = (s, m, p, opts = dvo) => hashFinish(false, _verify(s, m, p, opts));\nconst cr = () => // We support: 1) browsers 2) node.js 19+\n typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n/** Math, hex, byte helpers. Not in `utils` because utils share API with noble-curves. */\nconst etc = {\n    bytesToHex: b2h,\n    hexToBytes: h2b,\n    concatBytes: concatB,\n    mod: M,\n    invert: invert,\n    randomBytes: (len = 32) => {\n        const c = cr(); // Can be shimmed in node.js <= 18 to prevent error:\n        // import { webcrypto } from 'node:crypto';\n        // if (!globalThis.crypto) globalThis.crypto = webcrypto;\n        if (!c || !c.getRandomValues)\n            err('crypto.getRandomValues must be defined');\n        return c.getRandomValues(u8n(len));\n    },\n    sha512Async: async (...messages) => {\n        const c = cr();\n        const s = c && c.subtle;\n        if (!s)\n            err('etc.sha512Async or crypto.subtle must be defined');\n        const m = concatB(...messages);\n        return u8n(await s.digest('SHA-512', m.buffer));\n    },\n    sha512Sync: undefined, // Actual logic below\n};\nObject.defineProperties(etc, { sha512Sync: {\n        configurable: false, get() { return _shaS; }, set(f) { if (!_shaS)\n            _shaS = f; },\n    } });\n/** ed25519-specific key utilities. */\nconst utils = {\n    getExtendedPublicKeyAsync: getExtendedPublicKeyAsync,\n    getExtendedPublicKey: getExtendedPublicKey,\n    randomPrivateKey: () => etc.randomBytes(32),\n    precompute: (w = 8, p = G) => { p.multiply(3n); w; return p; }, // no-op\n};\nconst W = 8; // Precomputes-related code. W = window size\nconst precompute = () => {\n    const points = []; // 10x sign(), 2x verify(). To achieve this,\n    const windows = 256 / W + 1; // app needs to spend 40ms+ to calculate\n    let p = G, b = p; // a lot of points related to base point G.\n    for (let w = 0; w < windows; w++) { // Points are stored in array and used\n        b = p; // any time Gx multiplication is done.\n        points.push(b); // They consume 16-32 MiB of RAM.\n        for (let i = 1; i < 2 ** (W - 1); i++) {\n            b = b.add(p);\n            points.push(b);\n        }\n        p = b.double(); // Precomputes don't speed-up getSharedKey,\n    } // which multiplies user point by scalar,\n    return points; // when precomputes are using base point\n};\nlet Gpows = undefined; // precomputes for base point G\nconst wNAF = (n) => {\n    // Compared to other point mult methods,\n    const comp = Gpows || (Gpows = precompute()); // stores 2x less points using subtraction\n    const neg = (cnd, p) => { let n = p.negate(); return cnd ? n : p; }; // negate\n    let p = I, f = G; // f must be G, or could become I in the end\n    const windows = 1 + 256 / W; // W=8 17 windows\n    const wsize = 2 ** (W - 1); // W=8 128 window size\n    const mask = BigInt(2 ** W - 1); // W=8 will create mask 0b11111111\n    const maxNum = 2 ** W; // W=8 256\n    const shiftBy = BigInt(W); // W=8 8\n    for (let w = 0; w < windows; w++) {\n        const off = w * wsize;\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > wsize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off1 = off, off2 = off + Math.abs(wbits) - 1; // offsets, evaluate both\n        const cnd1 = w % 2 !== 0, cnd2 = wbits < 0; // conditions, evaluate both\n        if (wbits === 0) {\n            f = f.add(neg(cnd1, comp[off1])); // bits are 0: add garbage to fake point\n        }\n        else { //          ^ can't add off2, off2 = I\n            p = p.add(neg(cnd2, comp[off2])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n}; // !! you can disable precomputes by commenting-out call of the wNAF() inside Point#mul()\nexport { getPublicKey, getPublicKeyAsync, sign, verify, // Remove the export to easily use in REPL\nsignAsync, verifyAsync, CURVE, etc, utils, Point as ExtendedPoint }; // envs like browser console\n", "/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto: any =\n  nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? (nc.webcrypto as any)\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n      ? nc\n      : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n\n  readonly blockLen: number;\n  readonly outputLen: number;\n  readonly padOffset: number;\n  readonly isLE: boolean;\n\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    clean(this.buffer.subarray(pos));\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n", "/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD<SHA1> {\n  private A = SHA1_IV[0] | 0;\n  private B = SHA1_IV[1] | 0;\n  private C = SHA1_IV[2] | 0;\n  private D = SHA1_IV[3] | 0;\n  private E = SHA1_IV[4] | 0;\n\n  constructor() {\n    super(64, 20, 8, false);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { A, B, C, D, E } = this;\n    return [A, B, C, D, E];\n  }\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 80; i++)\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n    // Compression function main loop, 80 rounds\n    let { A, B, C, D, E } = this;\n    for (let i = 0; i < 80; i++) {\n      let F, K;\n      if (i < 20) {\n        F = Chi(B, C, D);\n        K = 0x5a827999;\n      } else if (i < 40) {\n        F = B ^ C ^ D;\n        K = 0x6ed9eba1;\n      } else if (i < 60) {\n        F = Maj(B, C, D);\n        K = 0x8f1bbcdc;\n      } else {\n        F = B ^ C ^ D;\n        K = 0xca62c1d6;\n      }\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n      E = D;\n      D = C;\n      C = rotl(B, 30);\n      B = A;\n      A = T;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    this.set(A, B, C, D, E);\n  }\n  protected roundClean(): void {\n    clean(SHA1_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\n\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\n);\n\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD<MD5> {\n  private A = MD5_IV[0] | 0;\n  private B = MD5_IV[1] | 0;\n  private C = MD5_IV[2] | 0;\n  private D = MD5_IV[3] | 0;\n\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      let F, g, s;\n      if (i < 16) {\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean(): void {\n    clean(MD5_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\n\n// RIPEMD-160\n\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n  const L = [Id160];\n  const R = [Pi160];\n  const res = [L, R];\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\n  return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\n\nconst shifts160 = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  if (group === 1) return (x & y) | (~x & z);\n  if (group === 2) return (x | ~y) ^ z;\n  if (group === 3) return (x & z) | (y & ~z);\n  return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    clean(BUF_160);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n", "/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n * @deprecated\n */\nimport { RIPEMD160 as RIPEMD160n, ripemd160 as ripemd160n } from './legacy.ts';\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const RIPEMD160: typeof RIPEMD160n = RIPEMD160n;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const ripemd160: typeof ripemd160n = ripemd160n;\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA224 as SHA224n,\n  sha224 as sha224n,\n  SHA256 as SHA256n,\n  sha256 as sha256n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256: typeof SHA256n = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256: typeof sha256n = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224: typeof SHA224n = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224: typeof sha224n = sha224n;\n", "/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA384 as SHA384n,\n  sha384 as sha384n,\n  sha512_224 as sha512_224n,\n  SHA512_224 as SHA512_224n,\n  sha512_256 as sha512_256n,\n  SHA512_256 as SHA512_256n,\n  SHA512 as SHA512n,\n  sha512 as sha512n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512: typeof SHA512n = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512: typeof sha512n = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384: typeof SHA384n = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384: typeof sha384n = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224: typeof SHA512_224n = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224: typeof sha512_224n = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256: typeof SHA512_256n = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256: typeof sha512_256n = sha512_256n;\n", "/*\nAttribution & Copyright Comments:\nOriginal work Copyright (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com)\nThis code is based on the original work by Patricio Palladino and Paul Miller.\nModifications Copyright (c) 2025, Allwin Ketnawang (getlea.org)\n\nThe MIT License (MIT)\n\nCopyright (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com)\nCopyright (c) 2025, Allwin Ketnawang (getlea.org)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201CSoftware\u201D), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201CAS IS\u201D, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nimport * as ed25519 from \"@noble/ed25519\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport {\n    bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes\n} from \"@noble/hashes/utils\";\n\ned25519.etc.sha512Sync = (...messages) => sha512(concatBytes(...messages));\n\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET = 0x80000000; // 2^31\nconst ZERO = new Uint8Array([0]); // Used for public key prefix\n\n/**\n * Helper function to ensure input is Uint8Array and validate length.\n * @param {Uint8Array | string} input - The input value (Uint8Array or hex string).\n * @param {...number} expectedLengths - Optional expected lengths for validation.\n * @returns {Uint8Array} The validated input as a Uint8Array.\n */\nfunction ensureBytes(input, ...expectedLengths) {\n    let bytes;\n    if (typeof input === 'string') {\n        try { bytes = hexToBytes(input); } catch (e) { throw new TypeError(`Invalid hex string: ${e instanceof Error ? e.message : e}`); }\n    } else if (input instanceof Uint8Array) {\n        bytes = input;\n    } else { throw new TypeError(`Input must be a Uint8Array or a hex string, got ${typeof input}`); }\n    if (expectedLengths.length > 0 && !expectedLengths.includes(bytes.length)) { throw new Error(`Invalid input length: ${bytes.length}. Expected one of: ${expectedLengths.join(', ')}`); }\n    return bytes;\n}\n\n/** BIP32 / SLIP-10 compatible hash160 (SHA256 -> RIPEMD160). */\nconst hash160 = (data) => ripemd160(sha256(data));\n/** Read Uint32BE from Uint8Array. */\nconst bytesToNumberBE = (bytes) => createView(bytes).getUint32(0, false);\n/** Write number to Uint32BE Uint8Array. */\nconst numberToBytesBE = (num) => {\n    if (!Number.isSafeInteger(num) || num < 0 || num >= 2 ** 32) { throw new Error(`Invalid number: ${num}. Must be >= 0 and < 2^32`); }\n    const buffer = new Uint8Array(4);\n    createView(buffer).setUint32(0, num, false); // Big Endian\n    return buffer;\n};\n\n/**\n * Represents an Ed25519 Hierarchical Deterministic Key based on SLIP-0010.\n * Focuses on key derivation; sign/verify operations should be done externally.\n */\nexport class HDKey {\n    /** @type {number} Derivation depth */\n    depth;\n    /** @type {number} Child index this key was derived with */\n    index;\n    /** @type {number} Fingerprint of the parent key */\n    parentFingerprint;\n    /** @type {Uint8Array} The 32-byte private key */\n    privateKey;\n    /** @type {Uint8Array} The 32-byte chain code */\n    chainCode;\n\n    /**\n     * Private constructor. Use HDKey.fromMasterSeed() to create instances.\n     * @param {object} options Internal options.\n     * @private\n     */\n    constructor(options) {\n        if (!(options.privateKey instanceof Uint8Array) || options.privateKey.length !== 32) { throw new TypeError(\"privateKey must be a 32-byte Uint8Array\"); }\n        if (!(options.chainCode instanceof Uint8Array) || options.chainCode.length !== 32) { throw new TypeError(\"chainCode must be a 32-byte Uint8Array\"); }\n        this.depth = options.depth ?? 0;\n        this.index = options.index ?? 0;\n        this.parentFingerprint = options.parentFingerprint ?? 0;\n        if (this.depth === 0) { if (this.parentFingerprint !== 0 || this.index !== 0) { throw new Error(\"Root key (depth 0) must have parentFingerprint and index set to 0\"); } }\n        this.privateKey = options.privateKey;\n        this.chainCode = options.chainCode;\n    }\n\n    /**\n     * Creates an HDKey from a master seed.\n     * @param {Uint8Array | string} seed - The master seed (bytes or hex string). Recommended: 32 bytes. Min: 16 bytes, Max: 64 bytes.\n     * @returns {HDKey} A new HDKey instance representing the master node (m).\n     */\n    static fromMasterSeed(seed) {\n        const seedBytes = ensureBytes(seed);\n        const seedLengthBits = seedBytes.length * 8;\n        if (seedLengthBits < 128 || seedLengthBits > 512) { throw new Error(`Invalid seed length: ${seedBytes.length} bytes (${seedLengthBits} bits). Must be between 128 and 512 bits.`); }\n        const I = hmac(sha512, MASTER_SECRET, seedBytes);\n        const privateKey = I.slice(0, 32);\n        const chainCode = I.slice(32, 64);\n        return new this({ privateKey: privateKey, chainCode: chainCode }); // 'this' refers to HDKey class\n    }\n\n    /** The raw 32-byte Ed25519 public key. */\n    get publicKeyRaw() {\n        // Requires ed25519.etc.sha512Sync to be set globally\n        return ed25519.getPublicKey(this.privateKey);\n    }\n\n    /** The public key prefixed with 0x00 (for SLIP-10 fingerprinting). */\n    get publicKey() {\n        return concatBytes(ZERO, this.publicKeyRaw);\n    }\n\n    /** The hash160 (SHA256 -> RIPEMD160) of the *prefixed* public key. */\n    get pubHash() {\n        return hash160(this.publicKey);\n    }\n\n    /** The fingerprint of the key (first 4 bytes of pubHash). */\n    get fingerprint() {\n        return bytesToNumberBE(this.pubHash.slice(0, 4));\n    }\n\n    /** Hex representation of the fingerprint. */\n    get fingerprintHex() {\n        return bytesToHex(numberToBytesBE(this.fingerprint));\n    }\n\n    /** Hex representation of the parent fingerprint. */\n    get parentFingerprintHex() {\n        return bytesToHex(numberToBytesBE(this.parentFingerprint));\n    }\n\n    /**\n     * Derives a child key based on a BIP32 path string (e.g., \"m/44'/501'/0'\").\n     * NOTE: Ed25519 SLIP-0010 only supports hardened derivation (using ').\n     * @param {string} path - The derivation path string. Must start with 'm'.\n     * @returns {HDKey} The derived HDKey instance.\n     */\n    derive(path) {\n        if (!/^[mM](?: H)?(\\/[0-9]+'?)*$/.test(path)) {\n            throw new Error('Invalid derivation path format. Expected \"m/...\" with hardened indices (e.g., \"m/44\\'/0\\'\").');\n        }\n        if (path === 'm' || path === 'M') { return this; }\n        const segments = path.replace(/^[mM]\\/?/, '').split('/');\n        let currentKey = this;\n        for (const segment of segments) {\n            const match = /^([0-9]+)('?)$/.exec(segment);\n            if (!match) { throw new Error(`Invalid path segment: ${segment}`); }\n            let index = parseInt(match[1], 10);\n            const isHardened = match[2] === \"'\";\n            if (!Number.isSafeInteger(index) || index >= HARDENED_OFFSET) { throw new Error(`Invalid index number: ${index}. Must be < 2^31.`); }\n            if (!isHardened) { throw new Error(`Non-hardened derivation (index ${index}) is not supported for Ed25519 SLIP-0010. Use hardened index (e.g., ${index}').`); }\n            index += HARDENED_OFFSET;\n            currentKey = currentKey.deriveChild(index);\n        }\n        return currentKey;\n    }\n\n    /**\n     * Derives a child key using a specific index.\n     * NOTE: Only hardened indices (index >= HARDENED_OFFSET) are supported for Ed25519 SLIP-0010.\n     * @param {number} index - The child index number. Must be >= HARDENED_OFFSET.\n     * @returns {HDKey} The derived HDKey instance.\n     */\n    deriveChild(index) {\n        if (!Number.isSafeInteger(index) || index < HARDENED_OFFSET || index >= 2 ** 32) { throw new Error(`Invalid index ${index}. Hardened index must be >= ${HARDENED_OFFSET} and < 2^32.`); }\n        const indexBytes = numberToBytesBE(index);\n        const data = concatBytes(ZERO, this.privateKey, indexBytes); // Data = 0x00 || kpar || ser32(i)\n        const I = hmac(sha512, this.chainCode, data); // I = HMAC-SHA512(Key = cpar, Data = data)\n        const childPrivateKey = I.slice(0, 32); // I_L\n        const childChainCode = I.slice(32, 64); // I_R\n        return new this.constructor({ // Use current class constructor\n            privateKey: childPrivateKey,\n            chainCode: childChainCode,\n            depth: this.depth + 1,\n            index: index,\n            parentFingerprint: this.fingerprint, // Current key's fingerprint\n        });\n    }\n\n    // Sign and Verify methods are intentionally removed.\n    // Use HDKey instance properties (.privateKey, .publicKeyRaw)\n    // with base @noble/ed25519 functions (sign, verify) externally.\n}", "/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from './hmac.ts';\n// prettier-ignore\nimport {\n  ahash, anumber,\n  asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes,\n  type CHash,\n  type KDFInput\n} from './utils.ts';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: KDFInput, _salt: KDFInput, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = kdfInputToBytes(_password);\n  const salt = kdfInputToBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  clean(u);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + \u22EF + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ \u22EF ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc\u22121)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + \u22EF + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ \u22EF ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc\u22121)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { pbkdf2 } from '@noble/hashes/pbkdf2';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { randomBytes } from '@noble/hashes/utils';\n\nconst englishWordlist = [\"abandon\", \"ability\", \"able\", \"about\", \"above\", \"absent\", \"absorb\", \"abstract\", \"absurd\", \"abuse\", \"access\", \"accident\", \"account\", \"accuse\", \"achieve\", \"acid\", \"acoustic\", \"acquire\", \"across\", \"act\", \"action\", \"actor\", \"actress\", \"actual\", \"adapt\", \"add\", \"addict\", \"address\", \"adjust\", \"admit\", \"adult\", \"advance\", \"advice\", \"aerobic\", \"affair\", \"afford\", \"afraid\", \"again\", \"age\", \"agent\", \"agree\", \"ahead\", \"aim\", \"air\", \"airport\", \"aisle\", \"alarm\", \"album\", \"alcohol\", \"alert\", \"alien\", \"all\", \"alley\", \"allow\", \"almost\", \"alone\", \"alpha\", \"already\", \"also\", \"alter\", \"always\", \"amateur\", \"amazing\", \"among\", \"amount\", \"amused\", \"analyst\", \"anchor\", \"ancient\", \"anger\", \"angle\", \"angry\", \"animal\", \"ankle\", \"announce\", \"annual\", \"another\", \"answer\", \"antenna\", \"antique\", \"anxiety\", \"any\", \"apart\", \"apology\", \"appear\", \"apple\", \"approve\", \"april\", \"arch\", \"arctic\", \"area\", \"arena\", \"argue\", \"arm\", \"armed\", \"armor\", \"army\", \"around\", \"arrange\", \"arrest\", \"arrive\", \"arrow\", \"art\", \"artefact\", \"artist\", \"artwork\", \"ask\", \"aspect\", \"assault\", \"asset\", \"assist\", \"assume\", \"asthma\", \"athlete\", \"atom\", \"attack\", \"attend\", \"attitude\", \"attract\", \"auction\", \"audit\", \"august\", \"aunt\", \"author\", \"auto\", \"autumn\", \"average\", \"avocado\", \"avoid\", \"awake\", \"aware\", \"away\", \"awesome\", \"awful\", \"awkward\", \"axis\", \"baby\", \"bachelor\", \"bacon\", \"badge\", \"bag\", \"balance\", \"balcony\", \"ball\", \"bamboo\", \"banana\", \"banner\", \"bar\", \"barely\", \"bargain\", \"barrel\", \"base\", \"basic\", \"basket\", \"battle\", \"beach\", \"bean\", \"beauty\", \"because\", \"become\", \"beef\", \"before\", \"begin\", \"behave\", \"behind\", \"believe\", \"below\", \"belt\", \"bench\", \"benefit\", \"best\", \"betray\", \"better\", \"between\", \"beyond\", \"bicycle\", \"bid\", \"bike\", \"bind\", \"biology\", \"bird\", \"birth\", \"bitter\", \"black\", \"blade\", \"blame\", \"blanket\", \"blast\", \"bleak\", \"bless\", \"blind\", \"blood\", \"blossom\", \"blouse\", \"blue\", \"blur\", \"blush\", \"board\", \"boat\", \"body\", \"boil\", \"bomb\", \"bone\", \"bonus\", \"book\", \"boost\", \"border\", \"boring\", \"borrow\", \"boss\", \"bottom\", \"bounce\", \"box\", \"boy\", \"bracket\", \"brain\", \"brand\", \"brass\", \"brave\", \"bread\", \"breeze\", \"brick\", \"bridge\", \"brief\", \"bright\", \"bring\", \"brisk\", \"broccoli\", \"broken\", \"bronze\", \"broom\", \"brother\", \"brown\", \"brush\", \"bubble\", \"buddy\", \"budget\", \"buffalo\", \"build\", \"bulb\", \"bulk\", \"bullet\", \"bundle\", \"bunker\", \"burden\", \"burger\", \"burst\", \"bus\", \"business\", \"busy\", \"butter\", \"buyer\", \"buzz\", \"cabbage\", \"cabin\", \"cable\", \"cactus\", \"cage\", \"cake\", \"call\", \"calm\", \"camera\", \"camp\", \"can\", \"canal\", \"cancel\", \"candy\", \"cannon\", \"canoe\", \"canvas\", \"canyon\", \"capable\", \"capital\", \"captain\", \"car\", \"carbon\", \"card\", \"cargo\", \"carpet\", \"carry\", \"cart\", \"case\", \"cash\", \"casino\", \"castle\", \"casual\", \"cat\", \"catalog\", \"catch\", \"category\", \"cattle\", \"caught\", \"cause\", \"caution\", \"cave\", \"ceiling\", \"celery\", \"cement\", \"census\", \"century\", \"cereal\", \"certain\", \"chair\", \"chalk\", \"champion\", \"change\", \"chaos\", \"chapter\", \"charge\", \"chase\", \"chat\", \"cheap\", \"check\", \"cheese\", \"chef\", \"cherry\", \"chest\", \"chicken\", \"chief\", \"child\", \"chimney\", \"choice\", \"choose\", \"chronic\", \"chuckle\", \"chunk\", \"churn\", \"cigar\", \"cinnamon\", \"circle\", \"citizen\", \"city\", \"civil\", \"claim\", \"clap\", \"clarify\", \"claw\", \"clay\", \"clean\", \"clerk\", \"clever\", \"click\", \"client\", \"cliff\", \"climb\", \"clinic\", \"clip\", \"clock\", \"clog\", \"close\", \"cloth\", \"cloud\", \"clown\", \"club\", \"clump\", \"cluster\", \"clutch\", \"coach\", \"coast\", \"coconut\", \"code\", \"coffee\", \"coil\", \"coin\", \"collect\", \"color\", \"column\", \"combine\", \"come\", \"comfort\", \"comic\", \"common\", \"company\", \"concert\", \"conduct\", \"confirm\", \"congress\", \"connect\", \"consider\", \"control\", \"convince\", \"cook\", \"cool\", \"copper\", \"copy\", \"coral\", \"core\", \"corn\", \"correct\", \"cost\", \"cotton\", \"couch\", \"country\", \"couple\", \"course\", \"cousin\", \"cover\", \"coyote\", \"crack\", \"cradle\", \"craft\", \"cram\", \"crane\", \"crash\", \"crater\", \"crawl\", \"crazy\", \"cream\", \"credit\", \"creek\", \"crew\", \"cricket\", \"crime\", \"crisp\", \"critic\", \"crop\", \"cross\", \"crouch\", \"crowd\", \"crucial\", \"cruel\", \"cruise\", \"crumble\", \"crunch\", \"crush\", \"cry\", \"crystal\", \"cube\", \"culture\", \"cup\", \"cupboard\", \"curious\", \"current\", \"curtain\", \"curve\", \"cushion\", \"custom\", \"cute\", \"cycle\", \"dad\", \"damage\", \"damp\", \"dance\", \"danger\", \"daring\", \"dash\", \"daughter\", \"dawn\", \"day\", \"deal\", \"debate\", \"debris\", \"decade\", \"december\", \"decide\", \"decline\", \"decorate\", \"decrease\", \"deer\", \"defense\", \"define\", \"defy\", \"degree\", \"delay\", \"deliver\", \"demand\", \"demise\", \"denial\", \"dentist\", \"deny\", \"depart\", \"depend\", \"deposit\", \"depth\", \"deputy\", \"derive\", \"describe\", \"desert\", \"design\", \"desk\", \"despair\", \"destroy\", \"detail\", \"detect\", \"develop\", \"device\", \"devote\", \"diagram\", \"dial\", \"diamond\", \"diary\", \"dice\", \"diesel\", \"diet\", \"differ\", \"digital\", \"dignity\", \"dilemma\", \"dinner\", \"dinosaur\", \"direct\", \"dirt\", \"disagree\", \"discover\", \"disease\", \"dish\", \"dismiss\", \"disorder\", \"display\", \"distance\", \"divert\", \"divide\", \"divorce\", \"dizzy\", \"doctor\", \"document\", \"dog\", \"doll\", \"dolphin\", \"domain\", \"donate\", \"donkey\", \"donor\", \"door\", \"dose\", \"double\", \"dove\", \"draft\", \"dragon\", \"drama\", \"drastic\", \"draw\", \"dream\", \"dress\", \"drift\", \"drill\", \"drink\", \"drip\", \"drive\", \"drop\", \"drum\", \"dry\", \"duck\", \"dumb\", \"dune\", \"during\", \"dust\", \"dutch\", \"duty\", \"dwarf\", \"dynamic\", \"eager\", \"eagle\", \"early\", \"earn\", \"earth\", \"easily\", \"east\", \"easy\", \"echo\", \"ecology\", \"economy\", \"edge\", \"edit\", \"educate\", \"effort\", \"egg\", \"eight\", \"either\", \"elbow\", \"elder\", \"electric\", \"elegant\", \"element\", \"elephant\", \"elevator\", \"elite\", \"else\", \"embark\", \"embody\", \"embrace\", \"emerge\", \"emotion\", \"employ\", \"empower\", \"empty\", \"enable\", \"enact\", \"end\", \"endless\", \"endorse\", \"enemy\", \"energy\", \"enforce\", \"engage\", \"engine\", \"enhance\", \"enjoy\", \"enlist\", \"enough\", \"enrich\", \"enroll\", \"ensure\", \"enter\", \"entire\", \"entry\", \"envelope\", \"episode\", \"equal\", \"equip\", \"era\", \"erase\", \"erode\", \"erosion\", \"error\", \"erupt\", \"escape\", \"essay\", \"essence\", \"estate\", \"eternal\", \"ethics\", \"evidence\", \"evil\", \"evoke\", \"evolve\", \"exact\", \"example\", \"excess\", \"exchange\", \"excite\", \"exclude\", \"excuse\", \"execute\", \"exercise\", \"exhaust\", \"exhibit\", \"exile\", \"exist\", \"exit\", \"exotic\", \"expand\", \"expect\", \"expire\", \"explain\", \"expose\", \"express\", \"extend\", \"extra\", \"eye\", \"eyebrow\", \"fabric\", \"face\", \"faculty\", \"fade\", \"faint\", \"faith\", \"fall\", \"false\", \"fame\", \"family\", \"famous\", \"fan\", \"fancy\", \"fantasy\", \"farm\", \"fashion\", \"fat\", \"fatal\", \"father\", \"fatigue\", \"fault\", \"favorite\", \"feature\", \"february\", \"federal\", \"fee\", \"feed\", \"feel\", \"female\", \"fence\", \"festival\", \"fetch\", \"fever\", \"few\", \"fiber\", \"fiction\", \"field\", \"figure\", \"file\", \"film\", \"filter\", \"final\", \"find\", \"fine\", \"finger\", \"finish\", \"fire\", \"firm\", \"first\", \"fiscal\", \"fish\", \"fit\", \"fitness\", \"fix\", \"flag\", \"flame\", \"flash\", \"flat\", \"flavor\", \"flee\", \"flight\", \"flip\", \"float\", \"flock\", \"floor\", \"flower\", \"fluid\", \"flush\", \"fly\", \"foam\", \"focus\", \"fog\", \"foil\", \"fold\", \"follow\", \"food\", \"foot\", \"force\", \"forest\", \"forget\", \"fork\", \"fortune\", \"forum\", \"forward\", \"fossil\", \"foster\", \"found\", \"fox\", \"fragile\", \"frame\", \"frequent\", \"fresh\", \"friend\", \"fringe\", \"frog\", \"front\", \"frost\", \"frown\", \"frozen\", \"fruit\", \"fuel\", \"fun\", \"funny\", \"furnace\", \"fury\", \"future\", \"gadget\", \"gain\", \"galaxy\", \"gallery\", \"game\", \"gap\", \"garage\", \"garbage\", \"garden\", \"garlic\", \"garment\", \"gas\", \"gasp\", \"gate\", \"gather\", \"gauge\", \"gaze\", \"general\", \"genius\", \"genre\", \"gentle\", \"genuine\", \"gesture\", \"ghost\", \"giant\", \"gift\", \"giggle\", \"ginger\", \"giraffe\", \"girl\", \"give\", \"glad\", \"glance\", \"glare\", \"glass\", \"glide\", \"glimpse\", \"globe\", \"gloom\", \"glory\", \"glove\", \"glow\", \"glue\", \"goat\", \"goddess\", \"gold\", \"good\", \"goose\", \"gorilla\", \"gospel\", \"gossip\", \"govern\", \"gown\", \"grab\", \"grace\", \"grain\", \"grant\", \"grape\", \"grass\", \"gravity\", \"great\", \"green\", \"grid\", \"grief\", \"grit\", \"grocery\", \"group\", \"grow\", \"grunt\", \"guard\", \"guess\", \"guide\", \"guilt\", \"guitar\", \"gun\", \"gym\", \"habit\", \"hair\", \"half\", \"hammer\", \"hamster\", \"hand\", \"happy\", \"harbor\", \"hard\", \"harsh\", \"harvest\", \"hat\", \"have\", \"hawk\", \"hazard\", \"head\", \"health\", \"heart\", \"heavy\", \"hedgehog\", \"height\", \"hello\", \"helmet\", \"help\", \"hen\", \"hero\", \"hidden\", \"high\", \"hill\", \"hint\", \"hip\", \"hire\", \"history\", \"hobby\", \"hockey\", \"hold\", \"hole\", \"holiday\", \"hollow\", \"home\", \"honey\", \"hood\", \"hope\", \"horn\", \"horror\", \"horse\", \"hospital\", \"host\", \"hotel\", \"hour\", \"hover\", \"hub\", \"huge\", \"human\", \"humble\", \"humor\", \"hundred\", \"hungry\", \"hunt\", \"hurdle\", \"hurry\", \"hurt\", \"husband\", \"hybrid\", \"ice\", \"icon\", \"idea\", \"identify\", \"idle\", \"ignore\", \"ill\", \"illegal\", \"illness\", \"image\", \"imitate\", \"immense\", \"immune\", \"impact\", \"impose\", \"improve\", \"impulse\", \"inch\", \"include\", \"income\", \"increase\", \"index\", \"indicate\", \"indoor\", \"industry\", \"infant\", \"inflict\", \"inform\", \"inhale\", \"inherit\", \"initial\", \"inject\", \"injury\", \"inmate\", \"inner\", \"innocent\", \"input\", \"inquiry\", \"insane\", \"insect\", \"inside\", \"inspire\", \"install\", \"intact\", \"interest\", \"into\", \"invest\", \"invite\", \"involve\", \"iron\", \"island\", \"isolate\", \"issue\", \"item\", \"ivory\", \"jacket\", \"jaguar\", \"jar\", \"jazz\", \"jealous\", \"jeans\", \"jelly\", \"jewel\", \"job\", \"join\", \"joke\", \"journey\", \"joy\", \"judge\", \"juice\", \"jump\", \"jungle\", \"junior\", \"junk\", \"just\", \"kangaroo\", \"keen\", \"keep\", \"ketchup\", \"key\", \"kick\", \"kid\", \"kidney\", \"kind\", \"kingdom\", \"kiss\", \"kit\", \"kitchen\", \"kite\", \"kitten\", \"kiwi\", \"knee\", \"knife\", \"knock\", \"know\", \"lab\", \"label\", \"labor\", \"ladder\", \"lady\", \"lake\", \"lamp\", \"language\", \"laptop\", \"large\", \"later\", \"latin\", \"laugh\", \"laundry\", \"lava\", \"law\", \"lawn\", \"lawsuit\", \"layer\", \"lazy\", \"leader\", \"leaf\", \"learn\", \"leave\", \"lecture\", \"left\", \"leg\", \"legal\", \"legend\", \"leisure\", \"lemon\", \"lend\", \"length\", \"lens\", \"leopard\", \"lesson\", \"letter\", \"level\", \"liar\", \"liberty\", \"library\", \"license\", \"life\", \"lift\", \"light\", \"like\", \"limb\", \"limit\", \"link\", \"lion\", \"liquid\", \"list\", \"little\", \"live\", \"lizard\", \"load\", \"loan\", \"lobster\", \"local\", \"lock\", \"logic\", \"lonely\", \"long\", \"loop\", \"lottery\", \"loud\", \"lounge\", \"love\", \"loyal\", \"lucky\", \"luggage\", \"lumber\", \"lunar\", \"lunch\", \"luxury\", \"lyrics\", \"machine\", \"mad\", \"magic\", \"magnet\", \"maid\", \"mail\", \"main\", \"major\", \"make\", \"mammal\", \"man\", \"manage\", \"mandate\", \"mango\", \"mansion\", \"manual\", \"maple\", \"marble\", \"march\", \"margin\", \"marine\", \"market\", \"marriage\", \"mask\", \"mass\", \"master\", \"match\", \"material\", \"math\", \"matrix\", \"matter\", \"maximum\", \"maze\", \"meadow\", \"mean\", \"measure\", \"meat\", \"mechanic\", \"medal\", \"media\", \"melody\", \"melt\", \"member\", \"memory\", \"mention\", \"menu\", \"mercy\", \"merge\", \"merit\", \"merry\", \"mesh\", \"message\", \"metal\", \"method\", \"middle\", \"midnight\", \"milk\", \"million\", \"mimic\", \"mind\", \"minimum\", \"minor\", \"minute\", \"miracle\", \"mirror\", \"misery\", \"miss\", \"mistake\", \"mix\", \"mixed\", \"mixture\", \"mobile\", \"model\", \"modify\", \"mom\", \"moment\", \"monitor\", \"monkey\", \"monster\", \"month\", \"moon\", \"moral\", \"more\", \"morning\", \"mosquito\", \"mother\", \"motion\", \"motor\", \"mountain\", \"mouse\", \"move\", \"movie\", \"much\", \"muffin\", \"mule\", \"multiply\", \"muscle\", \"museum\", \"mushroom\", \"music\", \"must\", \"mutual\", \"myself\", \"mystery\", \"myth\", \"naive\", \"name\", \"napkin\", \"narrow\", \"nasty\", \"nation\", \"nature\", \"near\", \"neck\", \"need\", \"negative\", \"neglect\", \"neither\", \"nephew\", \"nerve\", \"nest\", \"net\", \"network\", \"neutral\", \"never\", \"news\", \"next\", \"nice\", \"night\", \"noble\", \"noise\", \"nominee\", \"noodle\", \"normal\", \"north\", \"nose\", \"notable\", \"note\", \"nothing\", \"notice\", \"novel\", \"now\", \"nuclear\", \"number\", \"nurse\", \"nut\", \"oak\", \"obey\", \"object\", \"oblige\", \"obscure\", \"observe\", \"obtain\", \"obvious\", \"occur\", \"ocean\", \"october\", \"odor\", \"off\", \"offer\", \"office\", \"often\", \"oil\", \"okay\", \"old\", \"olive\", \"olympic\", \"omit\", \"once\", \"one\", \"onion\", \"online\", \"only\", \"open\", \"opera\", \"opinion\", \"oppose\", \"option\", \"orange\", \"orbit\", \"orchard\", \"order\", \"ordinary\", \"organ\", \"orient\", \"original\", \"orphan\", \"ostrich\", \"other\", \"outdoor\", \"outer\", \"output\", \"outside\", \"oval\", \"oven\", \"over\", \"own\", \"owner\", \"oxygen\", \"oyster\", \"ozone\", \"pact\", \"paddle\", \"page\", \"pair\", \"palace\", \"palm\", \"panda\", \"panel\", \"panic\", \"panther\", \"paper\", \"parade\", \"parent\", \"park\", \"parrot\", \"party\", \"pass\", \"patch\", \"path\", \"patient\", \"patrol\", \"pattern\", \"pause\", \"pave\", \"payment\", \"peace\", \"peanut\", \"pear\", \"peasant\", \"pelican\", \"pen\", \"penalty\", \"pencil\", \"people\", \"pepper\", \"perfect\", \"permit\", \"person\", \"pet\", \"phone\", \"photo\", \"phrase\", \"physical\", \"piano\", \"picnic\", \"picture\", \"piece\", \"pig\", \"pigeon\", \"pill\", \"pilot\", \"pink\", \"pioneer\", \"pipe\", \"pistol\", \"pitch\", \"pizza\", \"place\", \"planet\", \"plastic\", \"plate\", \"play\", \"please\", \"pledge\", \"pluck\", \"plug\", \"plunge\", \"poem\", \"poet\", \"point\", \"polar\", \"pole\", \"police\", \"pond\", \"pony\", \"pool\", \"popular\", \"portion\", \"position\", \"possible\", \"post\", \"potato\", \"pottery\", \"poverty\", \"powder\", \"power\", \"practice\", \"praise\", \"predict\", \"prefer\", \"prepare\", \"present\", \"pretty\", \"prevent\", \"price\", \"pride\", \"primary\", \"print\", \"priority\", \"prison\", \"private\", \"prize\", \"problem\", \"process\", \"produce\", \"profit\", \"program\", \"project\", \"promote\", \"proof\", \"property\", \"prosper\", \"protect\", \"proud\", \"provide\", \"public\", \"pudding\", \"pull\", \"pulp\", \"pulse\", \"pumpkin\", \"punch\", \"pupil\", \"puppy\", \"purchase\", \"purity\", \"purpose\", \"purse\", \"push\", \"put\", \"puzzle\", \"pyramid\", \"quality\", \"quantum\", \"quarter\", \"question\", \"quick\", \"quit\", \"quiz\", \"quote\", \"rabbit\", \"raccoon\", \"race\", \"rack\", \"radar\", \"radio\", \"rail\", \"rain\", \"raise\", \"rally\", \"ramp\", \"ranch\", \"random\", \"range\", \"rapid\", \"rare\", \"rate\", \"rather\", \"raven\", \"raw\", \"razor\", \"ready\", \"real\", \"reason\", \"rebel\", \"rebuild\", \"recall\", \"receive\", \"recipe\", \"record\", \"recycle\", \"reduce\", \"reflect\", \"reform\", \"refuse\", \"region\", \"regret\", \"regular\", \"reject\", \"relax\", \"release\", \"relief\", \"rely\", \"remain\", \"remember\", \"remind\", \"remove\", \"render\", \"renew\", \"rent\", \"reopen\", \"repair\", \"repeat\", \"replace\", \"report\", \"require\", \"rescue\", \"resemble\", \"resist\", \"resource\", \"response\", \"result\", \"retire\", \"retreat\", \"return\", \"reunion\", \"reveal\", \"review\", \"reward\", \"rhythm\", \"rib\", \"ribbon\", \"rice\", \"rich\", \"ride\", \"ridge\", \"rifle\", \"right\", \"rigid\", \"ring\", \"riot\", \"ripple\", \"risk\", \"ritual\", \"rival\", \"river\", \"road\", \"roast\", \"robot\", \"robust\", \"rocket\", \"romance\", \"roof\", \"rookie\", \"room\", \"rose\", \"rotate\", \"rough\", \"round\", \"route\", \"royal\", \"rubber\", \"rude\", \"rug\", \"rule\", \"run\", \"runway\", \"rural\", \"sad\", \"saddle\", \"sadness\", \"safe\", \"sail\", \"salad\", \"salmon\", \"salon\", \"salt\", \"salute\", \"same\", \"sample\", \"sand\", \"satisfy\", \"satoshi\", \"sauce\", \"sausage\", \"save\", \"say\", \"scale\", \"scan\", \"scare\", \"scatter\", \"scene\", \"scheme\", \"school\", \"science\", \"scissors\", \"scorpion\", \"scout\", \"scrap\", \"screen\", \"script\", \"scrub\", \"sea\", \"search\", \"season\", \"seat\", \"second\", \"secret\", \"section\", \"security\", \"seed\", \"seek\", \"segment\", \"select\", \"sell\", \"seminar\", \"senior\", \"sense\", \"sentence\", \"series\", \"service\", \"session\", \"settle\", \"setup\", \"seven\", \"shadow\", \"shaft\", \"shallow\", \"share\", \"shed\", \"shell\", \"sheriff\", \"shield\", \"shift\", \"shine\", \"ship\", \"shiver\", \"shock\", \"shoe\", \"shoot\", \"shop\", \"short\", \"shoulder\", \"shove\", \"shrimp\", \"shrug\", \"shuffle\", \"shy\", \"sibling\", \"sick\", \"side\", \"siege\", \"sight\", \"sign\", \"silent\", \"silk\", \"silly\", \"silver\", \"similar\", \"simple\", \"since\", \"sing\", \"siren\", \"sister\", \"situate\", \"six\", \"size\", \"skate\", \"sketch\", \"ski\", \"skill\", \"skin\", \"skirt\", \"skull\", \"slab\", \"slam\", \"sleep\", \"slender\", \"slice\", \"slide\", \"slight\", \"slim\", \"slogan\", \"slot\", \"slow\", \"slush\", \"small\", \"smart\", \"smile\", \"smoke\", \"smooth\", \"snack\", \"snake\", \"snap\", \"sniff\", \"snow\", \"soap\", \"soccer\", \"social\", \"sock\", \"soda\", \"soft\", \"solar\", \"soldier\", \"solid\", \"solution\", \"solve\", \"someone\", \"song\", \"soon\", \"sorry\", \"sort\", \"soul\", \"sound\", \"soup\", \"source\", \"south\", \"space\", \"spare\", \"spatial\", \"spawn\", \"speak\", \"special\", \"speed\", \"spell\", \"spend\", \"sphere\", \"spice\", \"spider\", \"spike\", \"spin\", \"spirit\", \"split\", \"spoil\", \"sponsor\", \"spoon\", \"sport\", \"spot\", \"spray\", \"spread\", \"spring\", \"spy\", \"square\", \"squeeze\", \"squirrel\", \"stable\", \"stadium\", \"staff\", \"stage\", \"stairs\", \"stamp\", \"stand\", \"start\", \"state\", \"stay\", \"steak\", \"steel\", \"stem\", \"step\", \"stereo\", \"stick\", \"still\", \"sting\", \"stock\", \"stomach\", \"stone\", \"stool\", \"story\", \"stove\", \"strategy\", \"street\", \"strike\", \"strong\", \"struggle\", \"student\", \"stuff\", \"stumble\", \"style\", \"subject\", \"submit\", \"subway\", \"success\", \"such\", \"sudden\", \"suffer\", \"sugar\", \"suggest\", \"suit\", \"summer\", \"sun\", \"sunny\", \"sunset\", \"super\", \"supply\", \"supreme\", \"sure\", \"surface\", \"surge\", \"surprise\", \"surround\", \"survey\", \"suspect\", \"sustain\", \"swallow\", \"swamp\", \"swap\", \"swarm\", \"swear\", \"sweet\", \"swift\", \"swim\", \"swing\", \"switch\", \"sword\", \"symbol\", \"symptom\", \"syrup\", \"system\", \"table\", \"tackle\", \"tag\", \"tail\", \"talent\", \"talk\", \"tank\", \"tape\", \"target\", \"task\", \"taste\", \"tattoo\", \"taxi\", \"teach\", \"team\", \"tell\", \"ten\", \"tenant\", \"tennis\", \"tent\", \"term\", \"test\", \"text\", \"thank\", \"that\", \"theme\", \"then\", \"theory\", \"there\", \"they\", \"thing\", \"this\", \"thought\", \"three\", \"thrive\", \"throw\", \"thumb\", \"thunder\", \"ticket\", \"tide\", \"tiger\", \"tilt\", \"timber\", \"time\", \"tiny\", \"tip\", \"tired\", \"tissue\", \"title\", \"toast\", \"tobacco\", \"today\", \"toddler\", \"toe\", \"together\", \"toilet\", \"token\", \"tomato\", \"tomorrow\", \"tone\", \"tongue\", \"tonight\", \"tool\", \"tooth\", \"top\", \"topic\", \"topple\", \"torch\", \"tornado\", \"tortoise\", \"toss\", \"total\", \"tourist\", \"toward\", \"tower\", \"town\", \"toy\", \"track\", \"trade\", \"traffic\", \"tragic\", \"train\", \"transfer\", \"trap\", \"trash\", \"travel\", \"tray\", \"treat\", \"tree\", \"trend\", \"trial\", \"tribe\", \"trick\", \"trigger\", \"trim\", \"trip\", \"trophy\", \"trouble\", \"truck\", \"true\", \"truly\", \"trumpet\", \"trust\", \"truth\", \"try\", \"tube\", \"tuition\", \"tumble\", \"tuna\", \"tunnel\", \"turkey\", \"turn\", \"turtle\", \"twelve\", \"twenty\", \"twice\", \"twin\", \"twist\", \"two\", \"type\", \"typical\", \"ugly\", \"umbrella\", \"unable\", \"unaware\", \"uncle\", \"uncover\", \"under\", \"undo\", \"unfair\", \"unfold\", \"unhappy\", \"uniform\", \"unique\", \"unit\", \"universe\", \"unknown\", \"unlock\", \"until\", \"unusual\", \"unveil\", \"update\", \"upgrade\", \"uphold\", \"upon\", \"upper\", \"upset\", \"urban\", \"urge\", \"usage\", \"use\", \"used\", \"useful\", \"useless\", \"usual\", \"utility\", \"vacant\", \"vacuum\", \"vague\", \"valid\", \"valley\", \"valve\", \"van\", \"vanish\", \"vapor\", \"various\", \"vast\", \"vault\", \"vehicle\", \"velvet\", \"vendor\", \"venture\", \"venue\", \"verb\", \"verify\", \"version\", \"very\", \"vessel\", \"veteran\", \"viable\", \"vibrant\", \"vicious\", \"victory\", \"video\", \"view\", \"village\", \"vintage\", \"violin\", \"virtual\", \"virus\", \"visa\", \"visit\", \"visual\", \"vital\", \"vivid\", \"vocal\", \"voice\", \"void\", \"volcano\", \"volume\", \"vote\", \"voyage\", \"wage\", \"wagon\", \"wait\", \"walk\", \"wall\", \"walnut\", \"want\", \"warfare\", \"warm\", \"warrior\", \"wash\", \"wasp\", \"waste\", \"water\", \"wave\", \"way\", \"wealth\", \"weapon\", \"wear\", \"weasel\", \"weather\", \"web\", \"wedding\", \"weekend\", \"weird\", \"welcome\", \"west\", \"wet\", \"whale\", \"what\", \"wheat\", \"wheel\", \"when\", \"where\", \"whip\", \"whisper\", \"wide\", \"width\", \"wife\", \"wild\", \"will\", \"win\", \"window\", \"wine\", \"wing\", \"wink\", \"winner\", \"winter\", \"wire\", \"wisdom\", \"wise\", \"wish\", \"witness\", \"wolf\", \"woman\", \"wonder\", \"wood\", \"wool\", \"word\", \"work\", \"world\", \"worry\", \"worth\", \"wrap\", \"wreck\", \"wrestle\", \"wrist\", \"write\", \"wrong\", \"yard\", \"year\", \"yellow\", \"you\", \"young\", \"youth\", \"zebra\", \"zero\", \"zone\", \"zoo\"];\n// Normalization (NFKD) is crucial for consistent lookups.\nconst wordlistMap = new Map(\n    englishWordlist.map((word, index) => {\n        const normalizedWord = word.normalize('NFKD');\n        return [normalizedWord, index];\n    })\n);\n\n// --- Constants ---\nconst BITS_PER_WORD = 11;\nconst PBKDF2_ROUNDS = 2048;\nconst PBKDF2_KEY_LENGTH = 64; // 512 bits\nconst SALT_PREFIX = \"mnemonic\";\n\n// Map word count to entropy bits and vice-versa for validation\nconst WORD_COUNT_TO_ENTROPY_BITS = { 12: 128, 15: 160, 18: 192, 21: 224, 24: 256 };\nconst ENTROPY_BITS_TO_WORD_COUNT = { 128: 12, 160: 15, 192: 18, 224: 21, 256: 24 };\n\n// Converts a Uint8Array to a binary string.\nfunction bytesToBinaryString(bytes) {\n    return Array.from(bytes, byte => byte.toString(2).padStart(8, '0')).join('');\n}\n\n// Converts a binary string back to a Uint8Array.\n// Input binary string length must be a multiple of 8.\nfunction binaryStringToBytes(bits) {\n    const bitsLength = bits.length;\n    if (bitsLength % 8 !== 0) {\n        throw new Error('Invalid binary string length: Must be a multiple of 8.');\n    }\n    const byteLength = bitsLength / 8;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < byteLength; i++) {\n        const byteSlice = bits.slice(i * 8, (i + 1) * 8);\n        bytes[i] = parseInt(byteSlice, 2);\n    }\n    return bytes;\n}\n\nfunction generateEntropy(strength) {\n    if (!ENTROPY_BITS_TO_WORD_COUNT[strength]) {\n        throw new Error(`Invalid entropy strength: ${strength} bits. Must correspond to 12, 15, 18, 21, or 24 words.`);\n    }\n    const bytesToGenerate = strength / 8;\n    try {\n        return randomBytes(bytesToGenerate);\n    } catch (error) {\n        throw new Error(`Failed to generate entropy. Secure random source unavailable or error occurred: ${error.message}`);\n    }\n}\n\n// Converts entropy (random bytes) to a BIP39 mnemonic phrase.\nfunction entropyToMnemonic(entropy) {\n    const entropyBitsLength = entropy.length * 8;\n    if (!ENTROPY_BITS_TO_WORD_COUNT[entropyBitsLength]) {\n        throw new Error(`Invalid entropy length: ${entropy.length} bytes (${entropyBitsLength} bits). Must correspond to 12, 15, 18, 21, or 24 words.`);\n    }\n\n    const entropyBinaryString = bytesToBinaryString(entropy);\n    const hash = sha256(entropy);\n    const hashBinaryString = bytesToBinaryString(hash);\n\n    // Checksum length is entropy length in bits / 32\n    const checksumBitsLength = entropyBitsLength / 32;\n    const checksumBits = hashBinaryString.slice(0, checksumBitsLength);\n\n    const totalBinaryString = entropyBinaryString + checksumBits;\n    const totalBitsLength = totalBinaryString.length;\n\n    // Each word represents 11 bits\n    if (totalBitsLength % BITS_PER_WORD !== 0) {\n        throw new Error(`Internal error: Total bits length (${totalBitsLength}) not divisible by ${BITS_PER_WORD}.`);\n    }\n\n    const wordCount = totalBitsLength / BITS_PER_WORD;\n    const words = [];\n    for (let i = 0; i < wordCount; i++) {\n        const chunk = totalBinaryString.slice(i * BITS_PER_WORD, (i + 1) * BITS_PER_WORD);\n        const index = parseInt(chunk, 2);\n        words.push(englishWordlist[index]);\n    }\n\n    return words.join(' ');\n}\n\n// Converts a BIP39 mnemonic phrase back to entropy. Validates checksum.\n// THIS FUNCTION IS USED FOR VALIDATION internally by mnemonicToSeed.\nfunction mnemonicToEntropy(mnemonic) {\n    // Perform basic check on input type\n    if (typeof mnemonic !== 'string' || mnemonic.length === 0) {\n        throw new Error('Invalid mnemonic: Input must be a non-empty string.');\n    }\n\n    const words = mnemonic.normalize('NFKD').trim().split(/\\s+/);\n    const wordCount = words.length;\n\n    const entropyBitsLength = WORD_COUNT_TO_ENTROPY_BITS[wordCount];\n    if (entropyBitsLength === undefined) {\n        throw new Error(`Invalid mnemonic word count: ${wordCount}. Must be 12, 15, 18, 21, or 24.`);\n    }\n\n    const indices = words.map((word, i) => {\n        // Normalize the input word for lookup against the normalized map keys\n        const normalizedWordForLookup = word.normalize('NFKD');\n        const indexFromMap = wordlistMap.get(normalizedWordForLookup);\n        if (indexFromMap === undefined) {\n            throw new Error(`Invalid mnemonic: Word at index ${i} not found in wordlist.`);\n        }\n        return indexFromMap;\n    });\n\n    const totalBinaryString = indices.map(index => index.toString(2).padStart(BITS_PER_WORD, '0')).join('');\n    const totalBitsLength = wordCount * BITS_PER_WORD;\n\n    // Checksum length is total bits / 33 (or entropy bits / 32)\n    const checksumBitsLength = totalBitsLength / 33;\n\n    const entropyBinaryString = totalBinaryString.slice(0, entropyBitsLength);\n    const checksumBitsFromMnemonic = totalBinaryString.slice(entropyBitsLength);\n\n    const derivedEntropyBytes = binaryStringToBytes(entropyBinaryString);\n\n    if (derivedEntropyBytes.length * 8 !== entropyBitsLength) {\n        throw new Error('Internal error: Derived entropy byte length mismatch during conversion.');\n    }\n\n    const hash = sha256(derivedEntropyBytes);\n    const hashBinaryString = bytesToBinaryString(hash);\n    const expectedChecksumBits = hashBinaryString.slice(0, checksumBitsLength);\n\n    if (checksumBitsFromMnemonic !== expectedChecksumBits) {\n        throw new Error('Invalid mnemonic: Checksum mismatch.');\n    }\n\n    return derivedEntropyBytes;\n}\n\n\n// --- Exported Functions ---\n\n// Generates a new BIP39 mnemonic phrase (English wordlist).\nexport function generateMnemonic(strength = 128) {\n    // generateEntropy handles strength validation\n    const entropy = generateEntropy(strength);\n    return entropyToMnemonic(entropy);\n}\n\n// Derives the BIP39 seed from a mnemonic phrase and optional passphrase.\n// Uses PBKDF2-HMAC-SHA512 with 2048 rounds.\n// VALIDATES the mnemonic before deriving the seed. Throws error if invalid.\nexport function mnemonicToSeed(mnemonic, passphrase = \"\") {\n    // This will throw an error if the mnemonic is invalid, preventing seed derivation.\n    mnemonicToEntropy(mnemonic);\n\n    // Normalize according to BIP39 recommendation (NFKD)\n    const normalizedMnemonic = mnemonic.normalize('NFKD'); // Mnemonic is already validated, but normalize again for PBKDF2 as per spec\n    const normalizedPassphrase = passphrase.normalize('NFKD');\n\n    const passwordBytes = new TextEncoder().encode(normalizedMnemonic); // Mnemonic is the \"password\"\n    const saltPrefixBytes = new TextEncoder().encode(SALT_PREFIX);\n    const passphraseBytes = new TextEncoder().encode(normalizedPassphrase);\n\n    // Construct the salt: salt = \"mnemonic\" + passphrase\n    const saltBytes = new Uint8Array(saltPrefixBytes.length + passphraseBytes.length);\n    saltBytes.set(saltPrefixBytes, 0);\n    saltBytes.set(passphraseBytes, saltPrefixBytes.length);\n\n    // PBKDF2-HMAC-SHA512\n    const seed = pbkdf2(sha512, passwordBytes, saltBytes, {\n        c: PBKDF2_ROUNDS,          // Iteration count\n        dkLen: PBKDF2_KEY_LENGTH   // Derived key length in bytes (64 bytes / 512 bits)\n    });\n\n    return seed;\n}", "'use strict';\n\n// --- Constants ---\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/** @type {number[]} */\nconst GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nconst BECH32M_CONST = 0x2bc830a3; // Using Bech32m checksum constant\n\n// --- Configuration for Your Blockchain (ADJUST THESE!) ---\n/** Represents the data type or version being encoded. */\nconst DATA_VERSION_BYTE = null; // Set to null if no version byte needed\n/** Minimum allowed length in bytes for the data being encoded (e.g., public key). */\nconst MIN_DATA_LENGTH_BYTES = 16; // <<< ADJUSTED FOR 32-byte PUBLIC KEY\n/** Maximum allowed length in bytes for the data being encoded (e.g., public key). */\nconst MAX_DATA_LENGTH_BYTES = 64; // <<< ADJUSTED FOR 64-byte PUBLIC KEY\n\n// BIP-173 constants (generally stay the same)\nconst MAX_BECH32_LENGTH = 200; // MODIFIED from 90 to support 64-byte data\nconst MIN_HRP_LENGTH = 1;\nconst MAX_HRP_LENGTH = 83;\nconst CHECKSUM_LENGTH = 6;\n// Minimum Bech32 string length depends on HRP, version byte presence, and min data length\nconst MIN_BECH32_LENGTH = MIN_HRP_LENGTH + 1 /*sep*/ + (DATA_VERSION_BYTE !== null ? 1 : 0) + Math.ceil(MIN_DATA_LENGTH_BYTES * 8 / 5) + CHECKSUM_LENGTH;\n\n\n// --- Precomputed Character Lookup Map ---\n/** @type {Record<string, number>} */\nconst CHAR_MAP = {};\nfor (let i = 0; i < CHARSET.length; i++) {\n    const char = CHARSET[i];\n    // Add type assertion or check to satisfy TS2538\n    if (char === undefined) continue; // Should theoretically not happen\n    CHAR_MAP[char] = i;\n}\n\n// --- Internal Helper Functions ---\n\n/**\n * @private Calculates the polynomial modulus.\n * @param {Array<number>} values - Array of 5-bit values.\n * @returns {number} The polymod checksum state.\n */\nfunction polymod(values) {\n    let checksumState = 1;\n    for (let index = 0; index < values.length; ++index) {\n        const value = values[index];\n        if (value === undefined) continue; // Added check\n        const top = checksumState >> 25;\n        checksumState = (checksumState & 0x1ffffff) << 5 ^ value;\n        for (let i = 0; i < 5; ++i) {\n            // Check added implicitly by typing GENERATOR as number[]\n            // Explicit check added to satisfy TS2532\n            const genValue = GENERATOR[i];\n            if (((top >> i) & 1) && genValue !== undefined) { // <<< EXPLICIT CHECK HERE\n                checksumState ^= genValue;\n            }\n        }\n    }\n    return checksumState;\n}\n\n/**\n * @private Expands the HRP for checksum calculation.\n * @param {string} hrp - The human-readable part.\n * @returns {Array<number>} Expanded HRP values.\n */\nfunction hrpExpand(hrp) {\n    const expanded = new Array(hrp.length * 2 + 1);\n    let i = 0;\n    for (let index = 0; index < hrp.length; ++index) expanded[i++] = hrp.charCodeAt(index) >> 5;\n    expanded[i++] = 0;\n    for (let index = 0; index < hrp.length; ++index) expanded[i++] = hrp.charCodeAt(index) & 31;\n    return expanded;\n}\n\n/**\n * @private Verifies the BECH32M checksum.\n * @param {string} hrp - The human-readable part.\n * @param {Array<number>} dataWithChecksum - 5-bit data including checksum.\n * @returns {boolean} True if checksum is valid.\n */\nfunction verifyChecksum(hrp, dataWithChecksum) {\n    const expandedHrp = hrpExpand(hrp);\n    const combined = new Array(expandedHrp.length + dataWithChecksum.length);\n    let k = 0;\n    for (let i = 0; i < expandedHrp.length; i++) combined[k++] = expandedHrp[i];\n    for (let i = 0; i < dataWithChecksum.length; i++) combined[k++] = dataWithChecksum[i];\n    return polymod(combined) === BECH32M_CONST;\n}\n\n/**\n * @private Creates the BECH32M checksum.\n * @param {string} hrp - The human-readable part.\n * @param {Array<number>} data5bitWithVersion - 5-bit data (potentially including version byte).\n * @returns {Array<number>} The 6-element checksum array.\n */\nfunction createChecksum(hrp, data5bitWithVersion) {\n    const expandedHrp = hrpExpand(hrp);\n    const values = new Array(expandedHrp.length + data5bitWithVersion.length + CHECKSUM_LENGTH);\n    let k = 0;\n    for (let i = 0; i < expandedHrp.length; i++) values[k++] = expandedHrp[i];\n    for (let i = 0; i < data5bitWithVersion.length; i++) values[k++] = data5bitWithVersion[i];\n    for (let i = 0; i < CHECKSUM_LENGTH; i++) values[k++] = 0; // Checksum placeholder\n\n    const mod = polymod(values) ^ BECH32M_CONST;\n    const checksum = new Array(CHECKSUM_LENGTH);\n    for (let i = 0; i < CHECKSUM_LENGTH; ++i) {\n        checksum[i] = (mod >> 5 * (CHECKSUM_LENGTH - 1 - i)) & 31;\n    }\n    return checksum;\n}\n\n/**\n * @private Converts bits from one base to another.\n * @param {Array<number> | Uint8Array} inputData - Data to convert.\n * @param {number} frombits - Input bit size (e.g., 8).\n * @param {number} tobits - Output bit size (e.g., 5).\n * @param {boolean} pad - Whether to pad output.\n * @returns {Array<number>} Converted data.\n * @throws {Error} If input values or padding are invalid.\n */\nfunction convertbits(inputData, frombits, tobits, pad) {\n    let acc = 0;\n    let bits = 0;\n    const ret = [];\n    const maxv = (1 << tobits) - 1;\n    const max_acc = (1 << (frombits + tobits - 1)) - 1;\n\n    for (let index = 0; index < inputData.length; ++index) {\n        const value = inputData[index];\n        if (value === undefined || value < 0 || (value >> frombits) !== 0) {\n            throw new Error(`Invalid value in convertbits: ${value}`);\n        }\n        acc = ((acc << frombits) | value) & max_acc;\n        bits += frombits;\n        while (bits >= tobits) {\n            bits -= tobits;\n            ret.push((acc >> bits) & maxv);\n        }\n    }\n\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (tobits - bits)) & maxv);\n        }\n    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n        throw new Error(\"Invalid padding/conversion in convertbits\");\n    }\n    return ret;\n}\n\n/**\n * @private Internal: Encodes HRP and 5-bit data (optionally prepends version).\n * @param {string} hrp - The human-readable part.\n * @param {Array<number>} data5bit - 5-bit data array.\n * @returns {string} Encoded Bech32m string.\n */\nfunction _encodeBech32mData(hrp, data5bit) {\n    // Prepend version byte if configured\n    const data5bitWithVersion = (DATA_VERSION_BYTE !== null)\n        ? [DATA_VERSION_BYTE, ...data5bit]\n        : [...data5bit];\n\n    const checksum = createChecksum(hrp, data5bitWithVersion);\n\n    const combined = new Array(data5bitWithVersion.length + checksum.length);\n    let k = 0;\n    for (let i = 0; i < data5bitWithVersion.length; i++) combined[k++] = data5bitWithVersion[i];\n    for (let i = 0; i < checksum.length; i++) combined[k++] = checksum[i];\n\n    let ret = hrp + '1';\n    for (let index = 0; index < combined.length; ++index) {\n        const charIndex = combined[index];\n        if (charIndex === undefined) throw new Error(\"Undefined index in combined data\"); // Added check\n        ret += CHARSET.charAt(charIndex);\n    }\n    return ret;\n}\n\n/**\n * @private Internal: Decodes and validates BECH32M string (syntax, checksum, version).\n * @param {string} bechString - The Bech32m string.\n * @returns {{ hrp: string; data5bitWithVersionAndChecksum: Array<number>; version: number | null }} Decoded parts.\n * @throws {Error} If string is invalid.\n */\nfunction _decodeBech32mDataAndValidate(bechString) {\n    if (typeof bechString !== 'string') throw new Error(\"Input must be a string.\");\n\n    let has_lower = false, has_upper = false;\n    for (let index = 0; index < bechString.length; ++index) {\n        const charCode = bechString.charCodeAt(index);\n        if (charCode < 33 || charCode > 126) throw new Error(`Invalid character: ${bechString[index]}`);\n        if (charCode >= 97 && charCode <= 122) has_lower = true;\n        else if (charCode >= 65 && charCode <= 90) has_upper = true;\n    }\n    if (has_lower && has_upper) throw new Error(\"Mixed case detected.\");\n\n    const lowerBechString = bechString.toLowerCase();\n    const sepPos = lowerBechString.lastIndexOf('1');\n\n    // Use calculated MIN_BECH32_LENGTH\n    if (sepPos < MIN_HRP_LENGTH || sepPos + 1 + CHECKSUM_LENGTH > lowerBechString.length ||\n        lowerBechString.length > MAX_BECH32_LENGTH || lowerBechString.length < MIN_BECH32_LENGTH) {\n        throw new Error(`Invalid structure or length (min: ${MIN_BECH32_LENGTH}, max: ${MAX_BECH32_LENGTH}, got: ${lowerBechString.length})`);\n    }\n\n    const hrp = lowerBechString.substring(0, sepPos);\n    const data5bitWithVersionAndChecksum = [];\n    for (let index = sepPos + 1; index < lowerBechString.length; ++index) {\n        const char = lowerBechString.charAt(index);\n        const charValue = CHAR_MAP[char]; // Uses typed CHAR_MAP\n        if (charValue === undefined) throw new Error(`Invalid data character: ${char}`);\n        data5bitWithVersionAndChecksum.push(charValue);\n    }\n\n    if (!verifyChecksum(hrp, data5bitWithVersionAndChecksum)) {\n        throw new Error(\"Checksum verification failed.\");\n    }\n\n    // Check minimum length for encoded data part\n    const expectedMinDataPartLen = (DATA_VERSION_BYTE !== null ? 1 : 0) + Math.ceil(MIN_DATA_LENGTH_BYTES * 8 / 5) + CHECKSUM_LENGTH;\n    if (data5bitWithVersionAndChecksum.length < expectedMinDataPartLen) {\n        throw new Error(`Decoded data part too short (${data5bitWithVersionAndChecksum.length} < ${expectedMinDataPartLen}).`);\n    }\n\n    /** @type {number | null} */\n    let version = null;\n    if (DATA_VERSION_BYTE !== null) {\n        // Explicitly handle potential undefined from array access before assigning to 'version'\n        const firstVal = data5bitWithVersionAndChecksum[0];\n        version = (firstVal === undefined) ? null : firstVal; // <<< FIX HERE: Assign null if undefined\n\n        if (version === null || version !== DATA_VERSION_BYTE) { // <<< FIX HERE: Check against null\n            throw new Error(`Unsupported version: expected ${DATA_VERSION_BYTE}, got ${version}`);\n        }\n    }\n\n    return { hrp: hrp, data5bitWithVersionAndChecksum: data5bitWithVersionAndChecksum, version: version };\n}\n\n// --- Exported Functions ---\n\n/**\n * Decodes a BECH32M string into its HRP and data bytes.\n * Throws an error if the address is invalid, has the wrong HRP, or fails validation.\n *\n * @param {string} expectedHrp - The expected human-readable part.\n * @param {string} bech32mString - The BECH32M address string.\n * @returns {Uint8Array} The decoded 8-bit data bytes.\n * @throws {Error} If decoding fails or validation checks do not pass.\n * @export\n */\nexport function decode(expectedHrp, bech32mString) {\n    const decodedParts = _decodeBech32mDataAndValidate(bech32mString);\n\n    if (decodedParts.hrp !== expectedHrp) {\n        throw new Error(`Mismatched HRP: expected '${expectedHrp}', got '${decodedParts.hrp}'`);\n    }\n\n    // Determine where the actual data starts (after version byte, if any) and ends (before checksum)\n    const dataStartIndex = (DATA_VERSION_BYTE !== null) ? 1 : 0;\n    const dataEndIndex = decodedParts.data5bitWithVersionAndChecksum.length - CHECKSUM_LENGTH;\n\n    const data5bit = decodedParts.data5bitWithVersionAndChecksum.slice(dataStartIndex, dataEndIndex);\n    const dataBytes = convertbits(data5bit, 5, 8, false); // Throws on error\n\n    // Validate decoded data length against configured limits\n    if (dataBytes.length < MIN_DATA_LENGTH_BYTES || dataBytes.length > MAX_DATA_LENGTH_BYTES) {\n        throw new Error(`Invalid decoded data length: ${dataBytes.length} bytes (must be between ${MIN_DATA_LENGTH_BYTES} and ${MAX_DATA_LENGTH_BYTES})`);\n    }\n\n    return new Uint8Array(dataBytes);\n}\n\n/**\n * Encodes HRP and data bytes into a BECH32M string.\n * Throws an error if inputs are invalid.\n *\n * @param {string} hrp - The human-readable part (lowercase, 1-83 chars).\n * @param {Uint8Array | Array<number>} dataBytes - The data to encode (array of 8-bit values). Length must be within configured min/max.\n * @returns {string} The encoded BECH32M string.\n * @throws {Error} If inputs are invalid (HRP, dataBytes) or encoding fails.\n * @export\n */\nexport function encode(hrp, dataBytes) {\n    // HRP validation\n    if (typeof hrp !== 'string' || hrp.length < MIN_HRP_LENGTH || hrp.length > MAX_HRP_LENGTH) {\n        throw new Error(`Invalid HRP length: ${hrp?.length}`);\n    }\n    for (let i = 0; i < hrp.length; ++i) {\n        const charCode = hrp.charCodeAt(i);\n        if (charCode < 33 || charCode > 126) throw new Error(`Invalid HRP character code: ${charCode}`);\n        if (charCode >= 65 && charCode <= 90) throw new Error(`Invalid HRP character case: ${hrp[i]}`);\n    }\n\n    // Data validation (type, length, content)\n    if (!dataBytes || typeof dataBytes.length !== 'number') throw new Error(\"Invalid dataBytes type.\");\n    if (dataBytes.length < MIN_DATA_LENGTH_BYTES || dataBytes.length > MAX_DATA_LENGTH_BYTES) {\n        throw new Error(`Invalid dataBytes length: ${dataBytes.length} (must be between ${MIN_DATA_LENGTH_BYTES} and ${MAX_DATA_LENGTH_BYTES})`);\n    }\n    // Check elements are valid bytes\n    const dataBytesArray = (dataBytes instanceof Uint8Array) ? dataBytes : Uint8Array.from(dataBytes);\n    for (let i = 0; i < dataBytesArray.length; ++i) {\n        const byte = dataBytesArray[i];\n        if (byte === undefined || typeof byte !== 'number' || !Number.isInteger(byte) || byte < 0 || byte > 255) {\n            throw new Error(`Invalid data byte at index ${i}: ${byte}`);\n        }\n    }\n\n\n    const data5bit = convertbits(dataBytesArray, 8, 5, true); // Throws on error\n    const encodedString = _encodeBech32mData(hrp, data5bit);\n\n    // Final length check safeguard\n    if (encodedString.length > MAX_BECH32_LENGTH) {\n        throw new Error(`Internal error: Generated string exceeds max length (${encodedString.length})`);\n    }\n\n    return encodedString;\n}\n", "/**\n * Defines constants used throughout the Lea blockchain library.\n */\n/**\n * SLIP-0044 coin type for the Lea blockchain.\n * Used in BIP-44 derivation paths: m/44'/COIN_TYPE'/...\n * Example: 2323 (must match registered or chosen value).\n */\nexport const LEA_COIN_TYPE = 2323;\n\n/**\n * BIP-44 purpose code for classical HD wallets (e.g., Ed25519).\n */\nexport const BIP44_PURPOSE = 44;\n\n/**\n * Custom purpose code for SLH-DSA (post-quantum).\n * Value 211 is arbitrary and avoids conflicts; it's also the bitwise inverse of 44.\n */\nexport const SLHDSA_PQC_PURPOSE = 211;\n\n/**\n * Base derivation paths (SLIP-0010 compatible).\n * Example: m/44'/COIN_TYPE' or m/211'/COIN_TYPE'\n */\nexport const SLHDSA_DERIVATION_BASE = `m/${SLHDSA_PQC_PURPOSE}'/${LEA_COIN_TYPE}'`;\nexport const ED25519_DERIVATION_BASE = `m/${BIP44_PURPOSE}'/${LEA_COIN_TYPE}'`;\n\n/**\n * Default Bech32m Human-Readable Part (HRP) for Lea addresses.\n * Example: 'lea'\n */\nexport const ADDRESS_HRP = 'lea';\nexport const ADDRESS_BYTE_LENGTH = 32;\nexport const CTE_CRYPTO_TYPE_ED25519 = 0;\nexport const CTE_CRYPTO_TYPE_SLHDSA = 1;\nexport const MAX_TRANSACTION_SIZE = 49152; // 48 KiB\n\n// Add other constants as needed:\n// export const DEFAULT_RPC_ENDPOINT = 'http://localhost:8899';\n// export const NETWORK_ID = 'lea-mainnet';\n// export const WS_ENDPOINT = 'ws://localhost:8900';\n\nexport const LEA_SYSTEM_PROGRAM = new Uint8Array([\n    255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255\n]);\n", "import { verify } from '@noble/ed25519'; // Import the verify function\nimport { encode as bech32mEncode, decode as bech32mDecode } from './bech32m.js';\nimport { ADDRESS_HRP, CTE_CRYPTO_TYPE_ED25519 } from './constants.js';\n\nexport class PublicKey {\n    #bytes;\n    keyType = CTE_CRYPTO_TYPE_ED25519;\n\n    constructor(value) {\n        if (typeof value === 'string') {\n            try {\n                const decoded = bech32mDecode(ADDRESS_HRP, value);\n                this.#bytes = Uint8Array.from(decoded.dataBytes);\n            } catch (e) {\n                let errorMessage = \"Invalid Bech32m address format\";\n                if (e instanceof Error) {\n                    errorMessage += `: ${value}. ${e.message}`;\n                } else {\n                    errorMessage += `: ${value}. An unknown error occurred during decoding.`;\n                }\n                throw new Error(errorMessage);\n            }\n        } else if (value instanceof Uint8Array) {\n            if (value.length !== 32) {\n                throw new Error(`Public key bytes must be 32 bytes long, received ${value.length}`);\n            }\n            this.#bytes = Uint8Array.from(value);\n        } else {\n            throw new Error(\"Invalid input type for PublicKey constructor. Must be Uint8Array or Bech32m string.\");\n        }\n    }\n\n    async verify(message, signature) {\n        try {\n            const isValid = await verify(signature, message, this.#bytes);\n            return isValid;\n        } catch (error) {\n            console.error(\"Signature verification failed:\", error);\n            return false;\n        }\n    }\n\n    toBytes() {\n        return Uint8Array.from(this.#bytes);\n    }\n/*\n    toString() {\n        try {\n            return bech32mEncode(ADDRESS_HRP, this.#bytes);\n        } catch (error) {\n            console.error(\"PublicKey Bech32m encoding failed:\", error);\n            throw new Error(\"Failed to encode public key as Bech32m.\");\n        }\n    }\n*/\n    equals(other) {\n        if (!other || typeof other.toBytes !== 'function') {\n            return false;\n        }\n        const otherBytes = other.toBytes();\n        if (this.#bytes.length !== otherBytes.length) {\n            return false;\n        }\n        for (let i = 0; i < this.#bytes.length; i++) {\n            if (this.#bytes[i] !== otherBytes[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n//export const PublicKey = (publicKey) => {\n//    return new PublicKeyImpl(publicKey);\n//};", "import { etc, sign, getPublicKey, utils } from '@noble/ed25519';\nimport { sha512 } from '@noble/hashes/sha2.js'\nimport { concatBytes } from \"@noble/hashes/utils\";\nimport { PublicKey } from './publickey.js';\nimport { randomBytes } from '@noble/hashes/utils';\n\netc.sha512Sync = (...messages) => sha512(concatBytes(...messages));\n\nexport class KeypairImpl {\n    #publicKeyInstance;\n    #secretKeyBytes;\n\n    constructor(publicKeyInstance, secretKeyBytes) {\n        this.#publicKeyInstance = publicKeyInstance;\n        this.#secretKeyBytes = secretKeyBytes;\n    }\n\n    get publicKey() {\n        return this.#publicKeyInstance;\n    }\n\n    get secretKey() {\n        return Uint8Array.from(this.#secretKeyBytes.slice(0, 32));\n    }\n\n    async sign(message) {\n        const signature = await sign(message, this.secretKey);\n        return signature;\n    }\n}\n\nconst Keypair = {\n    /*\n    generate: () => {\n        const randomSeed = randomBytes(32);\n        const publicKeyBytes = getPublicKey(randomSeed);\n        const publicKeyInstance = new PublicKey(publicKeyBytes);\n        return new KeypairImpl(publicKeyInstance, randomSeed);\n    },\n    */\n    fromSecretKey: (secretKey) => {\n        if (!secretKey || secretKey.length !== 32) {\n            throw new Error(\"Secret key must be 32 bytes.\");\n        }\n        const publicKeyBytes = getPublicKey(secretKey);\n        const publicKeyInstance = new PublicKey(publicKeyBytes);\n        return new KeypairImpl(publicKeyInstance, secretKey);\n    }\n};\n\nexport { Keypair };", "/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.ts';\n// prettier-ignore\nimport {\n  abytes, aexists, anumber, aoutput,\n  clean, createHasher, createXOFer, Hash,\n  swap32IfBE,\n  toBytes, u32,\n  type CHash, type CHashXO, type HashXOF, type Input\n} from './utils.ts';\n\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst IOTAS = split(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s: Uint32Array, rounds: number = 24): void {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta \u03B8\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (\u03C1) and Pi (\u03C0)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (\u03C7)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (\u03B9)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  clean(B);\n}\n\n/** Keccak sponge function. */\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n\n  public blockLen: number;\n  public suffix: number;\n  public outputLen: number;\n  protected enableXOF = false;\n  protected rounds: number;\n\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    blockLen: number,\n    suffix: number,\n    outputLen: number,\n    enableXOF = false,\n    rounds: number = 24\n  ) {\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    // Can be passed from user as dkLen\n    anumber(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    // 0 < blockLen < 200\n    if (!(0 < blockLen && blockLen < 200))\n      throw new Error('only keccak-f1600 function is supported');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  clone(): Keccak {\n    return this._cloneInto();\n  }\n  protected keccak(): void {\n    swap32IfBE(this.state32);\n    keccakP(this.state32, this.rounds);\n    swap32IfBE(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { blockLen, state } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish(): void {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array): Uint8Array {\n    aoutput(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest(): Uint8Array {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.state);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  createHasher(() => new Keccak(blockLen, suffix, outputLen));\n\n/** SHA3-224 hash function. */\nexport const sha3_224: CHash = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256: CHash = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */\nexport const sha3_384: CHash = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */\nexport const sha3_512: CHash = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();\n\n/** keccak-224 hash function. */\nexport const keccak_224: CHash = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256: CHash = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();\n/** keccak-384 hash function. */\nexport const keccak_384: CHash = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();\n/** keccak-512 hash function. */\nexport const keccak_512: CHash = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  createXOFer<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128: CHashXO = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256: CHashXO = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();\n", "/**\n * Utilities for hex, bytearray and number handling.\n * @module\n */\n/*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) */\nimport { sha224, sha256, sha384, sha512, sha512_224, sha512_256 } from '@noble/hashes/sha2';\nimport { sha3_224, sha3_256, sha3_384, sha3_512, shake128, shake256 } from '@noble/hashes/sha3';\nimport {\n  type TypedArray,\n  abytes,\n  concatBytes,\n  hexToBytes,\n  randomBytes as randb,\n  utf8ToBytes,\n} from '@noble/hashes/utils';\n\nexport const ensureBytes: typeof abytes = abytes;\nexport const randomBytes: typeof randb = randb;\nexport { concatBytes, utf8ToBytes };\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n/** Generic interface for signatures. Has keygen, sign and verify. */\nexport type Signer = {\n  signRandBytes: number;\n  keygen: (seed: Uint8Array) => {\n    secretKey: Uint8Array;\n    publicKey: Uint8Array;\n  };\n  sign: (secretKey: Uint8Array, msg: Uint8Array, random?: Uint8Array) => Uint8Array;\n  verify: (publicKey: Uint8Array, msg: Uint8Array, sig: Uint8Array) => boolean;\n};\n\nexport interface Coder<F, T> {\n  encode(from: F): T;\n  decode(to: T): F;\n}\n\nexport interface BytesCoder<T> extends Coder<T, Uint8Array> {\n  encode: (data: T) => Uint8Array;\n  decode: (bytes: Uint8Array) => T;\n}\n\nexport type BytesCoderLen<T> = BytesCoder<T> & { bytesLen: number };\n\n// nano-packed, because struct encoding is hard.\ntype UnCoder<T> = T extends BytesCoder<infer U> ? U : never;\ntype SplitOut<T extends (number | BytesCoderLen<any>)[]> = {\n  [K in keyof T]: T[K] extends number ? Uint8Array : UnCoder<T[K]>;\n};\nexport function splitCoder<T extends (number | BytesCoderLen<any>)[]>(\n  ...lengths: T\n): BytesCoder<SplitOut<T>> & { bytesLen: number } {\n  const getLength = (c: number | BytesCoderLen<any>) => (typeof c === 'number' ? c : c.bytesLen);\n  const bytesLen: number = lengths.reduce((sum: number, a) => sum + getLength(a), 0);\n  return {\n    bytesLen,\n    encode: (bufs: T) => {\n      const res = new Uint8Array(bytesLen);\n      for (let i = 0, pos = 0; i < lengths.length; i++) {\n        const c = lengths[i];\n        const l = getLength(c);\n        const b: Uint8Array = typeof c === 'number' ? (bufs[i] as any) : c.encode(bufs[i]);\n        ensureBytes(b, l);\n        res.set(b, pos);\n        if (typeof c !== 'number') b.fill(0); // clean\n        pos += l;\n      }\n      return res;\n    },\n    decode: (buf: Uint8Array) => {\n      ensureBytes(buf, bytesLen);\n      const res = [];\n      for (const c of lengths) {\n        const l = getLength(c);\n        const b = buf.subarray(0, l);\n        res.push(typeof c === 'number' ? b : c.decode(b));\n        buf = buf.subarray(l);\n      }\n      return res as SplitOut<T>;\n    },\n  } as any;\n}\n// nano-packed.array (fixed size)\nexport function vecCoder<T>(c: BytesCoderLen<T>, vecLen: number): BytesCoderLen<T[]> {\n  const bytesLen = vecLen * c.bytesLen;\n  return {\n    bytesLen,\n    encode: (u: T[]): Uint8Array => {\n      if (u.length !== vecLen)\n        throw new Error(`vecCoder.encode: wrong length=${u.length}. Expected: ${vecLen}`);\n      const res = new Uint8Array(bytesLen);\n      for (let i = 0, pos = 0; i < u.length; i++) {\n        const b = c.encode(u[i]);\n        res.set(b, pos);\n        b.fill(0); // clean\n        pos += b.length;\n      }\n      return res;\n    },\n    decode: (a: Uint8Array): T[] => {\n      ensureBytes(a, bytesLen);\n      const r: T[] = [];\n      for (let i = 0; i < a.length; i += c.bytesLen)\n        r.push(c.decode(a.subarray(i, i + c.bytesLen)));\n      return r;\n    },\n  };\n}\n\n// cleanBytes(new Uint8Array(), [new Uint16Array(), new Uint32Array()])\nexport function cleanBytes(...list: (TypedArray | TypedArray[])[]): void {\n  for (const t of list) {\n    if (Array.isArray(t)) for (const b of t) b.fill(0);\n    else t.fill(0);\n  }\n}\n\nexport function getMask(bits: number): number {\n  return (1 << bits) - 1; // 4 -> 0b1111\n}\n\nexport const EMPTY: Uint8Array = new Uint8Array(0);\n\nexport function getMessage(msg: Uint8Array, ctx: Uint8Array = EMPTY): Uint8Array {\n  ensureBytes(msg);\n  ensureBytes(ctx);\n  if (ctx.length > 255) throw new Error('context should be less than 255 bytes');\n  return concatBytes(new Uint8Array([0, ctx.length]), ctx, msg);\n}\n\n// OIDS from https://csrc.nist.gov/projects/computer-security-objects-register/algorithm-registration\n// TODO: maybe add 'OID' property to hashes themselves to improve tree-shaking?\nconst HASHES: Record<string, { oid: Uint8Array; hash: (msg: Uint8Array) => Uint8Array }> = {\n  'SHA2-256': { oid: hexToBytes('0609608648016503040201'), hash: sha256 },\n  'SHA2-384': { oid: hexToBytes('0609608648016503040202'), hash: sha384 },\n  'SHA2-512': { oid: hexToBytes('0609608648016503040203'), hash: sha512 },\n  'SHA2-224': { oid: hexToBytes('0609608648016503040204'), hash: sha224 },\n  'SHA2-512/224': { oid: hexToBytes('0609608648016503040205'), hash: sha512_224 },\n  'SHA2-512/256': { oid: hexToBytes('0609608648016503040206'), hash: sha512_256 },\n  'SHA3-224': { oid: hexToBytes('0609608648016503040207'), hash: sha3_224 },\n  'SHA3-256': { oid: hexToBytes('0609608648016503040208'), hash: sha3_256 },\n  'SHA3-384': { oid: hexToBytes('0609608648016503040209'), hash: sha3_384 },\n  'SHA3-512': { oid: hexToBytes('060960864801650304020A'), hash: sha3_512 },\n  'SHAKE-128': {\n    oid: hexToBytes('060960864801650304020B'),\n    hash: (msg) => shake128(msg, { dkLen: 32 }),\n  },\n  'SHAKE-256': {\n    oid: hexToBytes('060960864801650304020C'),\n    hash: (msg) => shake256(msg, { dkLen: 64 }),\n  },\n};\n\nexport function getMessagePrehash(\n  hashName: string,\n  msg: Uint8Array,\n  ctx: Uint8Array = EMPTY\n): Uint8Array {\n  ensureBytes(msg);\n  ensureBytes(ctx);\n  if (ctx.length > 255) throw new Error('context should be less than 255 bytes');\n  if (!HASHES[hashName]) throw new Error('unknown hash: ' + hashName);\n  const { oid, hash } = HASHES[hashName];\n  const hashed = hash(msg);\n  return concatBytes(new Uint8Array([1, ctx.length]), ctx, oid, hashed);\n}\n", "/**\n * SLH-DSA: StateLess Hash-based Digital Signature Standard from\n * [FIPS-205](https://csrc.nist.gov/pubs/fips/205/ipd). A.k.a. Sphincs+ v3.1.\n *\n * There are many different kinds of SLH, but basically `sha2` / `shake` indicate internal hash,\n * `128` / `192` / `256` indicate security level, and `s` /`f` indicate trade-off (Small / Fast).\n *\n * Hashes function similarly to signatures. You hash a private key to get a public key,\n * which can be used to verify the private key. However, this only works once since\n * disclosing the pre-image invalidates the key.\n *\n * To address the \"one-time\" limitation, we can use a Merkle tree root hash:\n * h(h(h(0) || h(1)) || h(h(2) || h(3))))\n *\n * This allows us to have the same public key output from the hash, but disclosing one\n * path in the tree doesn't invalidate the others. By choosing a path related to the\n * message, we can \"sign\" it.\n *\n * Limitation: Only a fixed number of signatures can be made. For instance, a Merkle tree\n * with depth 8 allows 256 distinct messages. Using different trees for each node can\n * prevent forgeries, but the key will still degrade over time.\n *\n * WOTS: One-time signatures (can be forged if same key used twice).\n * FORS: Forest of Random Subsets\n *\n * Check out [official site](https://sphincs.org) & [repo](https://github.com/sphincs/sphincsplus).\n * @module\n */\n/*! noble-post-quantum - MIT License (c) 2024 Paul Miller (paulmillr.com) */\nimport { setBigUint64 } from '@noble/hashes/_md';\nimport { HMAC } from '@noble/hashes/hmac';\nimport { sha256, sha512 } from '@noble/hashes/sha2';\nimport { shake256 } from '@noble/hashes/sha3';\nimport { bytesToHex, concatBytes, createView, hexToBytes } from '@noble/hashes/utils';\nimport {\n  EMPTY,\n  type Signer,\n  cleanBytes,\n  ensureBytes,\n  equalBytes,\n  getMask,\n  getMessage,\n  getMessagePrehash,\n  randomBytes,\n  splitCoder,\n  vecCoder,\n} from './utils.ts';\n\n/**\n * * N: Security parameter (in bytes). W: Winternitz parameter\n * * H: Hypertree height. D: Hypertree layers\n * * K: FORS trees numbers. A: FORS trees height\n */\nexport type SphincsOpts = {\n  N: number;\n  W: number;\n  H: number;\n  D: number;\n  K: number;\n  A: number;\n};\n\nexport type SphincsHashOpts = {\n  isCompressed?: boolean;\n  getContext: GetContext;\n};\n\n/** Winternitz signature params. */\nexport const PARAMS: Record<string, SphincsOpts> = {\n  '128f': { W: 16, N: 16, H: 66, D: 22, K: 33, A: 6 },\n  '128s': { W: 16, N: 16, H: 63, D: 7, K: 14, A: 12 },\n  '192f': { W: 16, N: 24, H: 66, D: 22, K: 33, A: 8 },\n  '192s': { W: 16, N: 24, H: 63, D: 7, K: 17, A: 14 },\n  '256f': { W: 16, N: 32, H: 68, D: 17, K: 35, A: 9 },\n  '256s': { W: 16, N: 32, H: 64, D: 8, K: 22, A: 14 },\n} as const;\n\nconst AddressType = {\n  WOTS: 0,\n  WOTSPK: 1,\n  HASHTREE: 2,\n  FORSTREE: 3,\n  FORSPK: 4,\n  WOTSPRF: 5,\n  FORSPRF: 6,\n} as const;\n\n/** Address, byte array of size ADDR_BYTES */\nexport type ADRS = Uint8Array;\n\nexport type Context = {\n  PRFaddr: (addr: ADRS) => Uint8Array;\n  PRFmsg: (skPRF: Uint8Array, random: Uint8Array, msg: Uint8Array) => Uint8Array;\n  Hmsg: (R: Uint8Array, pk: Uint8Array, m: Uint8Array, outLen: number) => Uint8Array;\n  thash1: (input: Uint8Array, addr: ADRS) => Uint8Array;\n  thashN: (blocks: number, input: Uint8Array, addr: ADRS) => Uint8Array;\n  clean: () => void;\n};\nexport type GetContext = (\n  opts: SphincsOpts\n) => (pub_seed: Uint8Array, sk_seed?: Uint8Array) => Context;\n\nfunction hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\n\nfunction numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n\n// Same as bitsCoder.decode, but maybe spec will change and unify with base2bBE.\nconst base2b = (outLen: number, b: number) => {\n  const mask = getMask(b);\n  return (bytes: Uint8Array) => {\n    const baseB = new Uint32Array(outLen);\n    for (let out = 0, pos = 0, bits = 0, total = 0; out < outLen; out++) {\n      while (bits < b) {\n        total = (total << 8) | bytes[pos++];\n        bits += 8;\n      }\n      bits -= b;\n      baseB[out] = (total >>> bits) & mask;\n    }\n    return baseB;\n  };\n};\n\nfunction getMaskBig(bits: number) {\n  return (1n << BigInt(bits)) - 1n; // 4 -> 0b1111\n}\n\nexport type SphincsSigner = Signer & { seedLen: number } & {\n  internal: Signer;\n  prehash: (hashName: string) => Signer;\n};\n\nfunction gen(opts: SphincsOpts, hashOpts: SphincsHashOpts): SphincsSigner {\n  const { N, W, H, D, K, A } = opts;\n  const getContext = hashOpts.getContext(opts);\n  if (W !== 16) throw new Error('Unsupported Winternitz parameter');\n  const WOTS_LOGW = 4;\n  const WOTS_LEN1 = Math.floor((8 * N) / WOTS_LOGW);\n  const WOTS_LEN2 = N <= 8 ? 2 : N <= 136 ? 3 : 4;\n  const TREE_HEIGHT = Math.floor(H / D);\n  const WOTS_LEN = WOTS_LEN1 + WOTS_LEN2;\n\n  let ADDR_BYTES = 22;\n  let OFFSET_LAYER = 0;\n  let OFFSET_TREE = 1;\n  let OFFSET_TYPE = 9;\n  let OFFSET_KP_ADDR2 = 12;\n  let OFFSET_KP_ADDR1 = 13;\n  let OFFSET_CHAIN_ADDR = 17;\n  let OFFSET_TREE_INDEX = 18;\n  let OFFSET_HASH_ADDR = 21;\n  if (!hashOpts.isCompressed) {\n    ADDR_BYTES = 32;\n    OFFSET_LAYER += 3;\n    OFFSET_TREE += 7;\n    OFFSET_TYPE += 10;\n    OFFSET_KP_ADDR2 += 10;\n    OFFSET_KP_ADDR1 += 10;\n    OFFSET_CHAIN_ADDR += 10;\n    OFFSET_TREE_INDEX += 10;\n    OFFSET_HASH_ADDR += 10;\n  }\n\n  const setAddr = (\n    opts: {\n      type?: (typeof AddressType)[keyof typeof AddressType];\n      height?: number;\n      tree?: bigint;\n      index?: number;\n      layer?: number;\n      chain?: number;\n      hash?: number;\n      keypair?: number;\n      subtreeAddr?: ADRS;\n      keypairAddr?: ADRS;\n    },\n    addr: ADRS = new Uint8Array(ADDR_BYTES)\n  ) => {\n    const { type, height, tree, layer, index, chain, hash, keypair } = opts;\n    const { subtreeAddr, keypairAddr } = opts;\n    const v = createView(addr);\n\n    if (height !== undefined) addr[OFFSET_CHAIN_ADDR] = height;\n    if (layer !== undefined) addr[OFFSET_LAYER] = layer;\n    if (type !== undefined) addr[OFFSET_TYPE] = type;\n    if (chain !== undefined) addr[OFFSET_CHAIN_ADDR] = chain;\n    if (hash !== undefined) addr[OFFSET_HASH_ADDR] = hash;\n    if (index !== undefined) v.setUint32(OFFSET_TREE_INDEX, index, false);\n    if (subtreeAddr) addr.set(subtreeAddr.subarray(0, OFFSET_TREE + 8));\n    if (tree !== undefined) setBigUint64(v, OFFSET_TREE, tree, false);\n    if (keypair !== undefined) {\n      addr[OFFSET_KP_ADDR1] = keypair;\n      if (TREE_HEIGHT > 8) addr[OFFSET_KP_ADDR2] = keypair >>> 8;\n    }\n    if (keypairAddr) {\n      addr.set(keypairAddr.subarray(0, OFFSET_TREE + 8));\n      addr[OFFSET_KP_ADDR1] = keypairAddr[OFFSET_KP_ADDR1];\n      if (TREE_HEIGHT > 8) addr[OFFSET_KP_ADDR2] = keypairAddr[OFFSET_KP_ADDR2];\n    }\n    return addr;\n  };\n\n  const chainCoder = base2b(WOTS_LEN2, WOTS_LOGW);\n  const chainLengths = (msg: Uint8Array) => {\n    const W1 = base2b(WOTS_LEN1, WOTS_LOGW)(msg);\n    let csum = 0;\n    for (let i = 0; i < W1.length; i++) csum += W - 1 - W1[i]; // \u25B7 Compute checksum\n    csum <<= (8 - ((WOTS_LEN2 * WOTS_LOGW) % 8)) % 8; // csum \u2190 csum \u226A ((8 \u2212 ((len2 \u00B7 lg(w)) mod 8)) mod 8\n    // Checksum to base(LOG_W)\n    const W2 = chainCoder(numberToBytesBE(csum, Math.ceil((WOTS_LEN2 * WOTS_LOGW) / 8)));\n    // W1 || W2 (concatBytes cannot concat TypedArrays)\n    const lengths = new Uint32Array(WOTS_LEN);\n    lengths.set(W1);\n    lengths.set(W2, W1.length);\n    return lengths;\n  };\n  const messageToIndices = base2b(K, A);\n\n  const TREE_BITS = TREE_HEIGHT * (D - 1);\n  const LEAF_BITS = TREE_HEIGHT;\n  const hashMsgCoder = splitCoder(\n    Math.ceil((A * K) / 8),\n    Math.ceil(TREE_BITS / 8),\n    Math.ceil(TREE_HEIGHT / 8)\n  );\n  const hashMessage = (R: Uint8Array, pkSeed: Uint8Array, msg: Uint8Array, context: Context) => {\n    const digest = context.Hmsg(R, pkSeed, msg, hashMsgCoder.bytesLen); // digest \u2190 Hmsg(R, PK.seed, PK.root, M)\n    const [md, tmpIdxTree, tmpIdxLeaf] = hashMsgCoder.decode(digest);\n    const tree = bytesToNumberBE(tmpIdxTree) & getMaskBig(TREE_BITS);\n    const leafIdx = Number(bytesToNumberBE(tmpIdxLeaf)) & getMask(LEAF_BITS);\n    return { tree, leafIdx, md };\n  };\n\n  const treehash = <T>(\n    height: number,\n    fn: (leafIdx: number, addrOffset: number, context: Context, info: T) => Uint8Array\n  ) =>\n    function treehash_i(\n      context: Context,\n      leafIdx: number,\n      idxOffset: number,\n      treeAddr: ADRS,\n      info: T\n    ) {\n      const maxIdx = (1 << height) - 1;\n      const stack = new Uint8Array(height * N);\n      const authPath = new Uint8Array(height * N);\n      for (let idx = 0; ; idx++) {\n        const current = new Uint8Array(2 * N);\n        const cur0 = current.subarray(0, N);\n        const cur1 = current.subarray(N);\n        const addrOffset = idx + idxOffset;\n        cur1.set(fn(leafIdx, addrOffset, context, info));\n        let h = 0;\n        for (let i = idx, o = idxOffset, l = leafIdx; ; h++, i >>>= 1, l >>>= 1, o >>>= 1) {\n          if (h === height) return { root: cur1, authPath }; // Returns from here\n          if ((i ^ l) === 1) authPath.subarray(h * N).set(cur1); // authPath.push(cur1)\n          if ((i & 1) === 0 && idx < maxIdx) break;\n          setAddr({ height: h + 1, index: (i >> 1) + (o >> 1) }, treeAddr);\n          cur0.set(stack.subarray(h * N).subarray(0, N));\n          cur1.set(context.thashN(2, current, treeAddr));\n        }\n        stack.subarray(h * N).set(cur1); // stack.push(cur1)\n      }\n      // @ts-ignore\n      throw new Error('Unreachable code path reached, report this error');\n    };\n\n  type LeafInfo = {\n    wotsSig: Uint8Array;\n    wotsSteps: Uint32Array;\n    leafAddr: ADRS;\n    pkAddr: ADRS;\n  };\n  const wotsTreehash = treehash(TREE_HEIGHT, (leafIdx, addrOffset, context, info: LeafInfo) => {\n    const wotsPk = new Uint8Array(WOTS_LEN * N);\n    const wotsKmask = addrOffset === leafIdx ? 0 : ~0 >>> 0;\n    setAddr({ keypair: addrOffset }, info.leafAddr);\n    setAddr({ keypair: addrOffset }, info.pkAddr);\n    for (let i = 0; i < WOTS_LEN; i++) {\n      const wotsK = info.wotsSteps[i] | wotsKmask;\n      const pk = wotsPk.subarray(i * N, (i + 1) * N);\n      setAddr({ chain: i, hash: 0, type: AddressType.WOTSPRF }, info.leafAddr);\n      pk.set(context.PRFaddr(info.leafAddr));\n      setAddr({ type: AddressType.WOTS }, info.leafAddr);\n      for (let k = 0; ; k++) {\n        if (k === wotsK) info.wotsSig.subarray(i * N).set(pk); //wotsSig.push()\n        if (k === W - 1) break;\n        setAddr({ hash: k }, info.leafAddr);\n        pk.set(context.thash1(pk, info.leafAddr));\n      }\n    }\n    return context.thashN(WOTS_LEN, wotsPk, info.pkAddr);\n  });\n\n  const forsTreehash = treehash(A, (_, addrOffset, context, forsLeafAddr: ForsLeafInfo) => {\n    setAddr({ type: AddressType.FORSPRF, index: addrOffset }, forsLeafAddr);\n    const prf = context.PRFaddr(forsLeafAddr);\n    setAddr({ type: AddressType.FORSTREE }, forsLeafAddr);\n    return context.thash1(prf, forsLeafAddr);\n  });\n\n  const merkleSign = (\n    context: Context,\n    wotsAddr: ADRS,\n    treeAddr: ADRS,\n    leafIdx: number,\n    prevRoot = new Uint8Array(N)\n  ) => {\n    setAddr({ type: AddressType.HASHTREE }, treeAddr);\n    // State variables\n    const info = {\n      wotsSig: new Uint8Array(wotsCoder.bytesLen),\n      wotsSteps: chainLengths(prevRoot),\n      leafAddr: setAddr({ subtreeAddr: wotsAddr }),\n      pkAddr: setAddr({ type: AddressType.WOTSPK, subtreeAddr: wotsAddr }),\n    };\n    const { root, authPath } = wotsTreehash(context, leafIdx, 0, treeAddr, info);\n    return {\n      root,\n      sigWots: info.wotsSig.subarray(0, WOTS_LEN * N),\n      sigAuth: authPath,\n    };\n  };\n\n  type ForsLeafInfo = ADRS;\n\n  const computeRoot = (\n    leaf: Uint8Array,\n    leafIdx: number,\n    idxOffset: number,\n    authPath: Uint8Array,\n    treeHeight: number,\n    context: Context,\n    addr: ADRS\n  ) => {\n    const buffer = new Uint8Array(2 * N);\n    const b0 = buffer.subarray(0, N);\n    const b1 = buffer.subarray(N, 2 * N);\n    // First iter\n    if ((leafIdx & 1) !== 0) {\n      b1.set(leaf.subarray(0, N));\n      b0.set(authPath.subarray(0, N));\n    } else {\n      b0.set(leaf.subarray(0, N));\n      b1.set(authPath.subarray(0, N));\n    }\n    leafIdx >>>= 1;\n    idxOffset >>>= 1;\n    // Rest\n    for (let i = 0; i < treeHeight - 1; i++, leafIdx >>= 1, idxOffset >>= 1) {\n      setAddr({ height: i + 1, index: leafIdx + idxOffset }, addr);\n      const a = authPath.subarray((i + 1) * N, (i + 2) * N);\n      if ((leafIdx & 1) !== 0) {\n        b1.set(context.thashN(2, buffer, addr));\n        b0.set(a);\n      } else {\n        buffer.set(context.thashN(2, buffer, addr));\n        b1.set(a);\n      }\n    }\n    // Root\n    setAddr({ height: treeHeight, index: leafIdx + idxOffset }, addr);\n    return context.thashN(2, buffer, addr);\n  };\n\n  const seedCoder = splitCoder(N, N, N);\n  const publicCoder = splitCoder(N, N);\n  const secretCoder = splitCoder(N, N, publicCoder.bytesLen);\n  const forsCoder = vecCoder(splitCoder(N, N * A), K);\n  const wotsCoder = vecCoder(splitCoder(WOTS_LEN * N, TREE_HEIGHT * N), D);\n  const sigCoder = splitCoder(N, forsCoder, wotsCoder); // random || fors || wots\n  const internal: Signer = {\n    signRandBytes: N,\n    keygen(seed?: Uint8Array) {\n      seed = seed === undefined ? randomBytes(seedCoder.bytesLen) : seed.slice();\n      // Set SK.seed, SK.prf, and PK.seed to random n-byte\n      const [secretSeed, secretPRF, publicSeed] = seedCoder.decode(seed);\n      const context = getContext(publicSeed, secretSeed);\n      // ADRS.setLayerAddress(d \u2212 1)\n      const topTreeAddr = setAddr({ layer: D - 1 });\n      const wotsAddr = setAddr({ layer: D - 1 });\n      //PK.root \u2190_xmss node(SK.seed, 0, h\u2032, PK.seed, ADRS)\n      const { root } = merkleSign(context, wotsAddr, topTreeAddr, ~0 >>> 0);\n      const publicKey = publicCoder.encode([publicSeed, root]);\n      const secretKey = secretCoder.encode([secretSeed, secretPRF, publicKey]);\n      context.clean();\n      cleanBytes(secretSeed, secretPRF, root, wotsAddr, topTreeAddr);\n      return { publicKey, secretKey };\n    },\n    sign: (sk: Uint8Array, msg: Uint8Array, random?: Uint8Array) => {\n      const [skSeed, skPRF, pk] = secretCoder.decode(sk); // todo: fix\n      const [pkSeed, _] = publicCoder.decode(pk);\n      // Set opt_rand to either PK.seed or to a random n-byte string\n      if (!random) random = pkSeed.slice();\n      ensureBytes(random, N);\n      const context = getContext(pkSeed, skSeed);\n      // Generate randomizer\n      const R = context.PRFmsg(skPRF, random, msg); // R \u2190 PRFmsg(SK.prf, opt_rand, M)\n      let { tree, leafIdx, md } = hashMessage(R, pk, msg, context);\n      // Create FORS signatures\n      const wotsAddr = setAddr({\n        type: AddressType.WOTS,\n        tree,\n        keypair: leafIdx,\n      });\n      const roots = [];\n      const forsLeaf = setAddr({ keypairAddr: wotsAddr });\n      const forsTreeAddr = setAddr({ keypairAddr: wotsAddr });\n      const indices = messageToIndices(md);\n      const fors: [Uint8Array, Uint8Array][] = [];\n      for (let i = 0; i < indices.length; i++) {\n        const idxOffset = i << A;\n        setAddr(\n          {\n            type: AddressType.FORSPRF,\n            height: 0,\n            index: indices[i] + idxOffset,\n          },\n          forsTreeAddr\n        );\n        const prf = context.PRFaddr(forsTreeAddr);\n        setAddr({ type: AddressType.FORSTREE }, forsTreeAddr);\n        const { root, authPath } = forsTreehash(\n          context,\n          indices[i],\n          idxOffset,\n          forsTreeAddr,\n          forsLeaf\n        );\n        roots.push(root);\n        fors.push([prf, authPath]);\n      }\n      const forsPkAddr = setAddr({\n        type: AddressType.FORSPK,\n        keypairAddr: wotsAddr,\n      });\n      const root = context.thashN(K, concatBytes(...roots), forsPkAddr);\n      // WOTS signatures\n      const treeAddr = setAddr({ type: AddressType.HASHTREE });\n      const wots: [Uint8Array, Uint8Array][] = [];\n      for (let i = 0; i < D; i++, tree >>= BigInt(TREE_HEIGHT)) {\n        setAddr({ tree, layer: i }, treeAddr);\n        setAddr({ subtreeAddr: treeAddr, keypair: leafIdx }, wotsAddr);\n        const {\n          sigWots,\n          sigAuth,\n          root: r,\n        } = merkleSign(context, wotsAddr, treeAddr, leafIdx, root);\n        root.set(r);\n        r.fill(0);\n        wots.push([sigWots, sigAuth]);\n        leafIdx = Number(tree & getMaskBig(TREE_HEIGHT));\n      }\n      context.clean();\n      const SIG = sigCoder.encode([R, fors, wots]);\n      cleanBytes(R, random, treeAddr, wotsAddr, forsLeaf, forsTreeAddr, indices, roots);\n      return SIG;\n    },\n    verify: (publicKey: Uint8Array, msg: Uint8Array, sig: Uint8Array) => {\n      const [pkSeed, pubRoot] = publicCoder.decode(publicKey);\n      const [random, forsVec, wotsVec] = sigCoder.decode(sig);\n      const pk = publicKey;\n      if (sig.length !== sigCoder.bytesLen) return false;\n      const context = getContext(pkSeed);\n      let { tree, leafIdx, md } = hashMessage(random, pk, msg, context);\n      const wotsAddr = setAddr({\n        type: AddressType.WOTS,\n        tree,\n        keypair: leafIdx,\n      });\n      // FORS signature\n      const roots = [];\n      const forsTreeAddr = setAddr({\n        type: AddressType.FORSTREE,\n        keypairAddr: wotsAddr,\n      });\n      const indices = messageToIndices(md);\n      for (let i = 0; i < forsVec.length; i++) {\n        const [prf, authPath] = forsVec[i];\n        const idxOffset = i << A;\n        setAddr({ height: 0, index: indices[i] + idxOffset }, forsTreeAddr);\n        const leaf = context.thash1(prf, forsTreeAddr);\n        // Compute inplace, because we need all roots in same byte array\n        roots.push(computeRoot(leaf, indices[i], idxOffset, authPath, A, context, forsTreeAddr));\n      }\n      const forsPkAddr = setAddr({\n        type: AddressType.FORSPK,\n        keypairAddr: wotsAddr,\n      });\n      let root = context.thashN(K, concatBytes(...roots), forsPkAddr); // root = thash()\n      // WOTS signature\n      const treeAddr = setAddr({ type: AddressType.HASHTREE });\n      const wotsPkAddr = setAddr({ type: AddressType.WOTSPK });\n      const wotsPk = new Uint8Array(WOTS_LEN * N);\n      for (let i = 0; i < wotsVec.length; i++, tree >>= BigInt(TREE_HEIGHT)) {\n        const [wots, sigAuth] = wotsVec[i];\n        setAddr({ tree, layer: i }, treeAddr);\n        setAddr({ subtreeAddr: treeAddr, keypair: leafIdx }, wotsAddr);\n        setAddr({ keypairAddr: wotsAddr }, wotsPkAddr);\n        const lengths = chainLengths(root);\n        for (let i = 0; i < WOTS_LEN; i++) {\n          setAddr({ chain: i }, wotsAddr);\n          const steps = W - 1 - lengths[i];\n          const start = lengths[i];\n          const out = wotsPk.subarray(i * N);\n          out.set(wots.subarray(i * N, (i + 1) * N));\n          for (let j = start; j < start + steps && j < W; j++) {\n            setAddr({ hash: j }, wotsAddr);\n            out.set(context.thash1(out, wotsAddr));\n          }\n        }\n        const leaf = context.thashN(WOTS_LEN, wotsPk, wotsPkAddr);\n        root = computeRoot(leaf, leafIdx, 0, sigAuth, TREE_HEIGHT, context, treeAddr);\n        leafIdx = Number(tree & getMaskBig(TREE_HEIGHT));\n      }\n      return equalBytes(root, pubRoot);\n    },\n  };\n  return {\n    internal,\n    seedLen: seedCoder.bytesLen,\n    keygen: internal.keygen,\n    signRandBytes: internal.signRandBytes,\n    sign: (secretKey: Uint8Array, msg: Uint8Array, ctx = EMPTY, random?: Uint8Array) => {\n      const M = getMessage(msg, ctx);\n      const res = internal.sign(secretKey, M, random);\n      M.fill(0);\n      return res;\n    },\n    verify: (publicKey: Uint8Array, msg: Uint8Array, sig: Uint8Array, ctx = EMPTY) => {\n      return internal.verify(publicKey, getMessage(msg, ctx), sig);\n    },\n    prehash: (hashName: string) => ({\n      seedLen: seedCoder.bytesLen,\n      keygen: internal.keygen,\n      signRandBytes: internal.signRandBytes,\n      sign: (secretKey: Uint8Array, msg: Uint8Array, ctx = EMPTY, random?: Uint8Array) => {\n        const M = getMessagePrehash(hashName, msg, ctx);\n        const res = internal.sign(secretKey, M, random);\n        M.fill(0);\n        return res;\n      },\n      verify: (publicKey: Uint8Array, msg: Uint8Array, sig: Uint8Array, ctx = EMPTY) => {\n        return internal.verify(publicKey, getMessagePrehash(hashName, msg, ctx), sig);\n      },\n    }),\n  };\n}\n\nconst genShake =\n  (): GetContext => (opts: SphincsOpts) => (pubSeed: Uint8Array, skSeed?: Uint8Array) => {\n    const { N } = opts;\n    const stats = { prf: 0, thash: 0, hmsg: 0, gen_message_random: 0 };\n    const h0 = shake256.create({}).update(pubSeed);\n    const h0tmp = h0.clone();\n    const thash = (blocks: number, input: Uint8Array, addr: ADRS) => {\n      stats.thash++;\n      return h0\n        ._cloneInto(h0tmp)\n        .update(addr)\n        .update(input.subarray(0, blocks * N))\n        .xof(N);\n    };\n    return {\n      PRFaddr: (addr: ADRS) => {\n        if (!skSeed) throw new Error('no sk seed');\n        stats.prf++;\n        const res = h0._cloneInto(h0tmp).update(addr).update(skSeed).xof(N);\n        return res;\n      },\n      PRFmsg: (skPRF: Uint8Array, random: Uint8Array, msg: Uint8Array) => {\n        stats.gen_message_random++;\n        return shake256.create({}).update(skPRF).update(random).update(msg).digest().subarray(0, N);\n      },\n      Hmsg: (R: Uint8Array, pk: Uint8Array, m: Uint8Array, outLen) => {\n        stats.hmsg++;\n        return shake256.create({}).update(R.subarray(0, N)).update(pk).update(m).xof(outLen);\n      },\n      thash1: thash.bind(null, 1),\n      thashN: thash,\n      clean: () => {\n        h0.destroy();\n        h0tmp.destroy();\n        //console.log(stats);\n      },\n    };\n  };\n\nconst SHAKE_SIMPLE = { getContext: genShake() };\n\n/** SLH-DSA: 128-bit fast SHAKE version. */\nexport const slh_dsa_shake_128f: SphincsSigner = /* @__PURE__ */ gen(PARAMS['128f'], SHAKE_SIMPLE);\n/** SLH-DSA: 128-bit short SHAKE version. */\nexport const slh_dsa_shake_128s: SphincsSigner = /* @__PURE__ */ gen(PARAMS['128s'], SHAKE_SIMPLE);\n/** SLH-DSA: 192-bit fast SHAKE version. */\nexport const slh_dsa_shake_192f: SphincsSigner = /* @__PURE__ */ gen(PARAMS['192f'], SHAKE_SIMPLE);\n/** SLH-DSA: 192-bit short SHAKE version. */\nexport const slh_dsa_shake_192s: SphincsSigner = /* @__PURE__ */ gen(PARAMS['192s'], SHAKE_SIMPLE);\n/** SLH-DSA: 256-bit fast SHAKE version. */\nexport const slh_dsa_shake_256f: SphincsSigner = /* @__PURE__ */ gen(PARAMS['256f'], SHAKE_SIMPLE);\n/** SLH-DSA: 256-bit short SHAKE version. */\nexport const slh_dsa_shake_256s: SphincsSigner = /* @__PURE__ */ gen(PARAMS['256s'], SHAKE_SIMPLE);\n\ntype ShaType = typeof sha256 | typeof sha512;\nconst genSha =\n  (h0: ShaType, h1: ShaType): GetContext =>\n  (opts) =>\n  (pub_seed, sk_seed?) => {\n    const { N } = opts;\n    /*\n    Perf debug stats, how much hashes we call?\n    128f_simple: { prf: 8305, thash: 96_922, hmsg: 1, gen_message_random: 1, mgf1: 2 }\n    256s_robust: { prf: 497_686, thash: 2_783_203, hmsg: 1, gen_message_random: 1, mgf1: 2_783_205}\n    256f_simple: { prf: 36_179, thash: 309_693, hmsg: 1, gen_message_random: 1, mgf1: 2 }\n    */\n    const stats = { prf: 0, thash: 0, hmsg: 0, gen_message_random: 0, mgf1: 0 };\n\n    const counterB = new Uint8Array(4);\n    const counterV = createView(counterB);\n    const h0ps = h0\n      .create()\n      .update(pub_seed)\n      .update(new Uint8Array(h0.blockLen - N));\n    const h1ps = h1\n      .create()\n      .update(pub_seed)\n      .update(new Uint8Array(h1.blockLen - N));\n\n    const h0tmp = h0ps.clone();\n    const h1tmp = h1ps.clone();\n\n    function mgf1(seed: Uint8Array, length: number, hash: ShaType) {\n      stats.mgf1++;\n      const out = new Uint8Array(Math.ceil(length / hash.outputLen) * hash.outputLen);\n      if (length > 2 ** 32) throw new Error('mask too long');\n      for (let counter = 0, o = out; o.length; counter++) {\n        counterV.setUint32(0, counter, false);\n        hash.create().update(seed).update(counterB).digestInto(o);\n        o = o.subarray(hash.outputLen);\n      }\n      out.subarray(length).fill(0);\n      return out.subarray(0, length);\n    }\n\n    const thash =\n      (_: ShaType, h: typeof h0ps, hTmp: typeof h0ps) =>\n      (blocks: number, input: Uint8Array, addr: ADRS) => {\n        stats.thash++;\n        const d = h\n          ._cloneInto(hTmp as any)\n          .update(addr)\n          .update(input.subarray(0, blocks * N))\n          .digest();\n        return d.subarray(0, N);\n      };\n    return {\n      PRFaddr: (addr: ADRS) => {\n        if (!sk_seed) throw new Error('No sk seed');\n        stats.prf++;\n        const res = h0ps\n          ._cloneInto(h0tmp as any)\n          .update(addr)\n          .update(sk_seed)\n          .digest()\n          .subarray(0, N);\n        return res;\n      },\n      PRFmsg: (skPRF: Uint8Array, random: Uint8Array, msg: Uint8Array) => {\n        stats.gen_message_random++;\n        return new HMAC(h1, skPRF).update(random).update(msg).digest().subarray(0, N);\n      },\n      Hmsg: (R: Uint8Array, pk: Uint8Array, m: Uint8Array, outLen) => {\n        stats.hmsg++;\n        const seed = concatBytes(\n          R.subarray(0, N),\n          pk.subarray(0, N),\n          h1.create().update(R.subarray(0, N)).update(pk).update(m).digest()\n        );\n        return mgf1(seed, outLen, h1);\n      },\n      thash1: thash(h0, h0ps, h0tmp).bind(null, 1),\n      thashN: thash(h1, h1ps, h1tmp),\n      clean: () => {\n        h0ps.destroy();\n        h1ps.destroy();\n        h0tmp.destroy();\n        h1tmp.destroy();\n        //console.log(stats);\n      },\n    };\n  };\n\nconst SHA256_SIMPLE = {\n  isCompressed: true,\n  getContext: genSha(sha256, sha256),\n};\nconst SHA512_SIMPLE = {\n  isCompressed: true,\n  getContext: genSha(sha256, sha512),\n};\n\n/** SLH-DSA: 128-bit fast SHA2 version. */\nexport const slh_dsa_sha2_128f: SphincsSigner = /* @__PURE__ */ gen(PARAMS['128f'], SHA256_SIMPLE);\n/** SLH-DSA: 128-bit small SHA2 version. */\nexport const slh_dsa_sha2_128s: SphincsSigner = /* @__PURE__ */ gen(PARAMS['128s'], SHA256_SIMPLE);\n/** SLH-DSA: 192-bit fast SHA2 version. */\nexport const slh_dsa_sha2_192f: SphincsSigner = /* @__PURE__ */ gen(PARAMS['192f'], SHA512_SIMPLE);\n/** SLH-DSA: 192-bit small SHA2 version. */\nexport const slh_dsa_sha2_192s: SphincsSigner = /* @__PURE__ */ gen(PARAMS['192s'], SHA512_SIMPLE);\n/** SLH-DSA: 256-bit fast SHA2 version. */\nexport const slh_dsa_sha2_256f: SphincsSigner = /* @__PURE__ */ gen(PARAMS['256f'], SHA512_SIMPLE);\n/** SLH-DSA: 256-bit small SHA2 version. */\nexport const slh_dsa_sha2_256s: SphincsSigner = /* @__PURE__ */ gen(PARAMS['256s'], SHA512_SIMPLE);\n", "import { utf8ToBytes, bytesToHex, hexToBytes, randomBytes } from '@noble/hashes/utils';\n\n/**\n * Checks if two Uint8Array instances are equal.\n * @param {Uint8Array | undefined | null} a - The first Uint8Array.\n * @param {Uint8Array | undefined | null} b - The second Uint8Array.\n * @returns {boolean} True if the arrays are equal, false otherwise.\n */\nfunction areUint8ArraysEqual(a, b) {\n    if (a === b) return true;\n    if (!a || !b || a.length !== b.length || !(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nclass KeyList {\n    _keys = []; // You are using a mix of conventions: _keys (older private convention) and #count/#maxSize (JS private fields)\n    #count = 0;\n    #maxSize;\n\n    /**\n     * Creates an instance of KeyList.\n     * @param {number} [maxSize=15] - The maximum number of keys the list can hold.\n     */\n    constructor(maxSize = 15) {\n        if (typeof maxSize !== 'number' || maxSize <= 0) {\n            throw new Error('KeyList: maxSize must be a positive number.');\n        }\n        this.#maxSize = maxSize;\n    }\n\n    /**\n     * Resolves a key input into a Uint8Array.\n     * @param {Uint8Array | { toBytes: () => Uint8Array } | any} key - The key to resolve.\n     * @returns {Uint8Array} The resolved key as a Uint8Array.\n     * @throws {Error} If the key is invalid or not a 32-byte Uint8Array.\n     * @private\n     */\n    #resolveKey(key) {\n        let bytes = null;\n\n        // THE DEFINITIVE FIX for the TypeError.\n        // This check is reliable across different module contexts.\n        if (Object.prototype.toString.call(key) === '[object Uint8Array]') {\n            bytes = key;\n        }\n        // This handles your custom Address object.\n        else if (key && typeof key === 'object' && typeof key.toBytes === 'function') {\n            const potentialBytes = key.toBytes();\n            // Also validate the output of toBytes() reliably.\n            if (Object.prototype.toString.call(potentialBytes) === '[object Uint8Array]') {\n                bytes = potentialBytes;\n            }\n        }\n\n        // Final validation\n        if (!bytes) {\n            throw new Error(\"KeyList: Invalid key type. Key must resolve to a Uint8Array.\");\n        }\n\n        if (bytes.length !== 32) {\n            throw new Error(\n                `KeyList: Key must be a 32-byte Uint8Array, but received ${bytes.length} bytes.`\n            );\n        }\n\n        return bytes;\n    }\n\n    /**\n     * Adds a key to the list.\n     * If the key already exists, its index is returned.\n     * @param {Uint8Array | { toBytes: () => Uint8Array }} key - The key to add.\n     * @returns {number} The index of the added or existing key.\n     * @throws {Error} If the list is at maximum capacity.\n     */\n    add(key) {\n        const bytes = this.#resolveKey(key);\n\n        // Check if key already exists\n        for (let i = 0; i < this.#count; i++) {\n            if (areUint8ArraysEqual(bytes, this._keys[i])) {\n                return i; // Key already exists, return its index\n            }\n        }\n\n        if (this.#count >= this.#maxSize) {\n            throw new Error(`KeyList: Cannot add key, maximum capacity (${this.#maxSize}) reached.`);\n        }\n\n        this._keys[this.#count] = bytes;\n        return this.#count++;\n    }\n\n    /**\n     * Checks if a key exists in the list and returns its index if found.\n     * @param {Uint8Array | { toBytes: () => Uint8Array }} key - The key to check.\n     * @returns {number | false} The index of the key if found, otherwise false.\n     */\n    hasKey(key) {\n        try {\n            const bytesToFind = this.#resolveKey(key);\n            for (let i = 0; i < this.#count; i++) {\n                // Ensure you are comparing against the correct array `this._keys`\n                if (areUint8ArraysEqual(bytesToFind, this._keys[i])) {\n                    return i; // Return the index if found\n                }\n            }\n        } catch (error) {\n            // As per your original code, log a warning if key resolution fails.\n            // Depending on desired behavior, you might want to re-throw or handle differently.\n            console.warn(\"KeyList.hasKey: Could not resolve key:\", error.message);\n            return false; // Key is invalid or resolution failed\n        }\n        return false; // Key not found\n    }\n\n    /**\n     * Gets a shallow copy of the keys currently in the list.\n     * @returns {Uint8Array[]} An array of Uint8Array keys.\n     _\n     */\n    getKeys() {\n        // Ensure you are slicing the correct array `this._keys`\n        return this._keys.slice(0, this.#count);\n    }\n\n    /**\n     * Gets the current number of keys in the list.\n     * @returns {number}\n     */\n    get count() {\n        return this.#count;\n    }\n\n    /**\n     * Gets the maximum capacity of the list.\n     * @returns {number}\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n}\n\nfunction combineUint8Arrays(arrays) {\n    return new Uint8Array(arrays.reduce((acc, val) => (acc.push(...val), acc), []));\n}\n// Export the necessary functions and the class\nexport { utf8ToBytes, bytesToHex, hexToBytes, randomBytes, KeyList, areUint8ArraysEqual, combineUint8Arrays };\n", "import { slh_dsa_sha2_256s as algorithm } from '@noble/post-quantum/slh-dsa';\nimport { encode as bech32mEncode, decode as bech32mDecode } from './bech32m.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { ADDRESS_HRP } from './constants.js';\n\n// The @noble/post-quantum library does not expose key lengths directly.\n// We are hardcoding the public key length for slh_dsa_sha2_256f and slh_dsa_sha2_256s\n// which is 64 bytes.\nconst SLH_PUBLIC_KEY_LEN = 64;\n\nexport class SLHPublicKey {\n  #bytes;\n\n  constructor(value) {\n    if (typeof value === 'string') {\n      // Bech32m addresses are hashes, not valid full public keys\n      const decoded = bech32mDecode(ADDRESS_HRP, value);\n      throw new Error(\"SLH public key must be constructed from raw bytes, not an address.\");\n    } else if (value instanceof Uint8Array) {\n      if (value.length !== SLH_PUBLIC_KEY_LEN) {\n        throw new Error(`SLH-DSA public key must be ${SLH_PUBLIC_KEY_LEN} bytes`);\n      }\n      this.#bytes = Uint8Array.from(value);\n    } else {\n      throw new Error(\"Invalid input: expected Uint8Array\");\n    }\n  }\n\n  // Verifies a signature using the internal public key bytes\n  async verify(message, signature) {\n    return await algorithm.verify(this.#bytes, message, signature);\n  }\n\n  // Returns the raw public key bytes\n  toBytes() {\n    return Uint8Array.from(this.#bytes);\n  }\n\n  /**\n   * Returns a Bech32m-encoded address derived from a SHA-256 hash of the public key.\n   * This avoids exposing large post-quantum keys directly in address format.\n   */\n  /*\n    toString() {\n      //const hash = sha256(this.#bytes);\n      //const fullLengthPublicKey = bech32mEncode(ADDRESS_HRP, this.#bytes);\n      //console.log(`SLH public key: ${fullLengthPublicKey}`);\n      return bech32mEncode(ADDRESS_HRP, this.#bytes);\n    }\n  */\n  // Compares this key with another by byte equality\n  equals(other) {\n    if (!other || typeof other.toBytes !== 'function') return false;\n    const otherBytes = other.toBytes();\n    if (this.#bytes.length !== otherBytes.length) return false;\n    for (let i = 0; i < this.#bytes.length; i++) {\n      if (this.#bytes[i] !== otherBytes[i]) return false;\n    }\n    return true;\n  }\n}\n", "import { slh_dsa_sha2_256s as algorithm } from '@noble/post-quantum/slh-dsa';\nimport { randomBytes } from './utils.js';\nimport { SLHPublicKey } from './slh-public.js';\nimport { blake3 } from \"hash-wasm\";\n\n\nexport class SLHKeypairImpl {\n    #publicKeyInstance;\n    #secretKeyBytes;\n\n    constructor(publicKeyInstance, secretKeyBytes) {\n        this.#publicKeyInstance = publicKeyInstance;\n        this.#secretKeyBytes = secretKeyBytes;\n    }\n\n    get publicKey() {\n        return this.#publicKeyInstance;\n    }\n\n    /**\n     * Returns the full 128-byte secret key (used for signing).\n     */\n    get secretKey() {\n        return Uint8Array.from(this.#secretKeyBytes);\n    }\n    /**\n     * Signs a message using the private key.\n     */\n    async sign(message) {\n        return await algorithm.sign(this.#secretKeyBytes, message);\n    }\n}\n\nconst SLHKeypair = {\n    /**\n     * Generates a new SLH-DSA keypair from a random seed.\n     */\n    /*\n    generate: async () => {\n        const seed = randomBytes(algorithm.seedLen); // usually 96 bytes\n        const { publicKey, secretKey } = await algorithm.keygen(seed);\n        const publicKeyInstance = new SLHPublicKey(publicKey);\n        return new SLHKeypairImpl(publicKeyInstance, secretKey, seed);\n    },\n    */\n    /**\n     * Creates an SLHKeypairImpl from a seed, extending the seed to the correct length using BLAKE3 if necessary.\n     * @param {Uint8Array} seed - The input seed.\n     * @returns {Promise<SLHKeypairImpl>} A promise that resolves to an SLHKeypairImpl instance.\n     * @throws {Error} If the seed is invalid after extension.\n     */\n    fromSecretKey: async (seed) => {\n        let extendedSeed = seed;\n\n        if (!seed) {\n            throw new Error(\"Seed cannot be null or undefined.\");\n        }\n\n        if (seed.length !== algorithm.seedLen) {\n            // Extend the seed to the correct length using BLAKE3\n            // blake3 returns a hex string, so we need to convert it to Uint8Array\n            const hashHex = await blake3(seed, algorithm.seedLen * 8); // blake3 takes bits, so multiply bytes by 8\n            extendedSeed = new Uint8Array(hashHex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n        }\n\n        const { publicKey, secretKey } = await algorithm.keygen(extendedSeed);\n        const publicKeyInstance = new SLHPublicKey(publicKey);\n        return new SLHKeypairImpl(publicKeyInstance, secretKey, extendedSeed);\n    }\n};\n\nexport { SLHKeypair };\n", "import { HDKey } from './hd.js';\nimport { mnemonicToSeed } from './bip39.js';\nimport { Keypair } from './keypair.js';\nimport { SLHKeypair } from './slh-keypair.js';\nimport { ED25519_DERIVATION_BASE, SLHDSA_DERIVATION_BASE, ADDRESS_BYTE_LENGTH, ADDRESS_HRP } from './constants.js';\nimport { createBLAKE3 } from \"hash-wasm\";\nimport { Address } from './address.js';\n\nexport class WalletImpl {\n    #masterKey;\n\n    constructor(masterKey) {\n        if (!(masterKey instanceof HDKey)) {\n            throw new Error(\"Invalid masterKey provided.\");\n        }\n        this.#masterKey = masterKey;\n    }\n\n    /** Derives an Ed25519 Keypair using a BIP-44 path. */\n    deriveAccountEdDsa(index) {\n        try {\n            const derivedHDKey = this.#masterKey.derive(`${ED25519_DERIVATION_BASE}/${index}'`);\n            return Keypair.fromSecretKey(derivedHDKey.privateKey);\n        } catch (error) {\n            throw new Error(`Failed to derive EdDSA account for path ${index}: ${error.message}`);\n        }\n    }\n\n    /**\n     * Derives a post-quantum (SLH-DSA) Keypair.\n     * @param {number} index - The hardened account index (e.g., 0, 1, 2...).\n     */\n    async getAccountSlhDsa(index) {\n        if (typeof index !== 'number' || index < 0 || !Number.isInteger(index)) {\n            throw new Error(\"Account index must be a non-negative integer.\");\n        }\n\n        // SLIP-0010 derivation for SLH-DSA uses a distinct purpose code (211').\n        const path = `${SLHDSA_DERIVATION_BASE}/${index}'`;\n        try {\n            const derivedHDKey = this.#masterKey.derive(path);\n            const pqcSeed = derivedHDKey.privateKey;\n            return await SLHKeypair.fromSecretKey(pqcSeed);\n        } catch (error) {\n            throw new Error(`Failed to derive SLH-DSA account for path ${path}: ${error.message}`);\n        }\n    }\n\n    /**\n     * Creates a full account, including EdDSA and post-quantum SLH-DSA keys,\n    * and derives a unified address from both public keys.\n    * @param {number} index - The hardened account index (e.g., 0, 1, 2...).\n    */\n    async getAccount(index) {\n        if (typeof index !== 'number' || index < 0 || !Number.isInteger(index)) {\n            throw new Error(\"Account index must be a non-negative integer.\");\n        }\n\n        const edDsa = this.deriveAccountEdDsa(index);\n        const slhDsa = await this.getAccountSlhDsa(index);\n\n        const edPublicKeyBytes = edDsa.publicKey.toBytes();\n        const slhPublicKeyBytes = slhDsa.publicKey.toBytes();\n\n        // The address is the BLAKE3 hash of the concatenated EdDSA and SLH-DSA public keys.\n        const blake3Hasher = await createBLAKE3(ADDRESS_BYTE_LENGTH * 8);\n        blake3Hasher.update(edPublicKeyBytes);\n        blake3Hasher.update(slhPublicKeyBytes);\n        const publicKeyPairHash = blake3Hasher.digest('binary');\n        const address = new Address(publicKeyPairHash);\n\n        return {\n            edDsa,\n            slhDsa,\n            publicKeyPairHash,\n            address\n        };\n    }\n\n    /**\n     * Exports the raw Ed25519 private key for an account. Use with caution.\n     * @param {number} index - The hardened account index.\n     */\n    exportPrivateKey(index) {\n        if (typeof index !== 'number' || index < 0 || !Number.isInteger(index)) {\n            throw new Error(\"Account index must be a non-negative integer.\");\n        }\n\n        const path = `${ED25519_DERIVATION_BASE}/${index}'`;\n        try {\n            const derivedHDKey = this.#masterKey.derive(path);\n            return Uint8Array.from(derivedHDKey.privateKey);\n        } catch (error) {\n            throw new Error(`Failed to export private key for index ${index}: ${error.message}`);\n        }\n    }\n}\n\n/** Factory for creating Wallet instances. */\nexport const Wallet = {\n    /**\n     * Creates a wallet from a BIP-39 mnemonic phrase.\n     * @param {string} mnemonic - The seed phrase.\n     * @param {string} [passphrase] - Optional BIP-39 passphrase.\n     */\n    fromMnemonic: (mnemonic, passphrase) => {\n        const seed = mnemonicToSeed(mnemonic, passphrase);\n        const masterKey = HDKey.fromMasterSeed(seed);\n        return new WalletImpl(masterKey);\n    },\n};", "import { encode as bech32mEncode, decode as bech32mDecode } from './bech32m.js';\nimport { ADDRESS_HRP, ADDRESS_BYTE_LENGTH } from './constants.js';\n\nexport class Address {\n    constructor(addressX) {\n        if (typeof addressX === 'string') {\n            try {\n                this.publicKeyPairHash = bech32mDecode(ADDRESS_HRP, addressX);\n            } catch (e) {\n                throw new Error(`Invalid Bech32m address format: ${addressX}. ${e.message}`);\n            }\n        }\n        else if (addressX instanceof Uint8Array) {\n            this.publicKeyPairHash = addressX;\n        }\n        else {\n            throw new Error(\"Invalid input type for Address constructor. Must be a Uint8Array or a Bech32m string.\");\n        }\n\n        // --- Common validation for both paths ---\n        if (this.publicKeyPairHash.length !== ADDRESS_BYTE_LENGTH) {\n            throw new Error(`Public key hash bytes must be ${ADDRESS_BYTE_LENGTH} bytes long, received ${this.publicKeyPairHash.length}`);\n        }\n    }\n\n    toString() {\n        try {\n            return bech32mEncode(ADDRESS_HRP, this.publicKeyPairHash);\n        }\n        catch (e) {\n            throw new Error(`Failed to encode public key pair hash to Bech32m: ${e.message}`);\n        }\n    }\n\n    toBytes() {\n        return this.publicKeyPairHash;\n    }\n}", "class ConnectionImpl {\n    constructor(cluster = \"devnet\") {\n        this.url = this._resolveClusterUrl(cluster);\n    }\n\n    _resolveClusterUrl(cluster) {\n        if (typeof cluster === \"string\" && /^https?:\\/\\//i.test(cluster)) {\n            return cluster;\n        }\n\n        const clusterUrls = {\n            \"mainnet-beta\": \"https://api.mainnet-beta.getlea.org\",\n            devnet: \"https://api.devnet.getlea.org\",\n            testnet: \"https://api.testnet.getlea.org\",\n            local: \"http://localhost:3000\",\n            localhost: \"http://localhost:3000\",\n        };\n\n        if (!clusterUrls[cluster]) {\n            throw new Error(`Unknown cluster: ${cluster}`);\n        }\n\n        return clusterUrls[cluster];\n    }\n\n    async _sendRequest(method, params) {\n        const requestBody = {\n            jsonrpc: \"1.0\",\n            id: 1,\n            method,\n        };\n        if (params !== undefined) {\n            requestBody.params = params;\n        }\n\n        const response = await fetch(this.url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                // is not kept alive and reused for the next request.\n                // PQC signatutres take a long time to compute, so we want to avoid broken pipe\n                \"Connection\": \"close\"\n            },\n            body: JSON.stringify(requestBody),\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`HTTP error: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n\n        const data = await response.json();\n\n        if (data.error) {\n            throw new Error(`RPC error: ${data.error.message} (Code: ${data.error.code})`);\n        }\n\n        if (data.result === undefined) {\n            throw new Error(`Malformed response: Missing 'result' field.`);\n        }\n\n        return data.result;\n    }\n\n    // --- Public API Methods ---\n    getVersion() { return this._sendRequest(\"getVersion\"); }\n    getLatestBlockhash() { return this._sendRequest(\"getLatestBlockhash\"); }\n    getBalance(keys) { return this._sendRequest(\"getBalance\", keys); }\n    getTransaction(id) { return this._sendRequest(\"getTransaction\", [id]); }\n    getTransactionsForAccount(opts) { return this._sendRequest(\"getTransactionsForAccount\", [opts]); }\n\n    sendTransaction(txInput) {\n        let paramsForServer;\n        if (typeof txInput === 'string') {\n            paramsForServer = [txInput];\n        } else if (Array.isArray(txInput) && txInput.length === 1 && typeof txInput[0] === 'string') {\n            paramsForServer = txInput;\n        } else {\n            return Promise.reject(new Error(\"Invalid input for sendTransaction: Expected a hex string or an array containing a single hex string.\"));\n        }\n        return this._sendRequest(\"sendTransaction\", paramsForServer);\n    }\n}\n\nexport const Connection = (cluster = \"devnet\") => new ConnectionImpl(cluster);", "var __toBinaryNode = (base64) => new Uint8Array(Buffer.from(base64, \"base64\"));\n\n// src/sctp.mvp.enc.wasm\nvar sctp_mvp_enc_default = __toBinaryNode(\"AGFzbQEAAAABKAlgAX8AYAAAYAF9AGADf39/AGABfABgAX4AYAJ/fgBgAX8Bf2AAAX8CEQEDZW52CV9fbGVhX2xvZwAAAxsaAQACAwQAAAUAAAMFAAAFAAUGBwgACAgIAQcEBQFwAQEBBQMBAAMGCAF/AUGQjQgLB5gEFwZtZW1vcnkCABFzY3RwX2VuY29kZXJfaW5pdAAVFV9fbGVhX2FsbG9jYXRvcl9yZXNldAAZDF9fbGVhX21hbGxvYwAaEXNjdHBfZW5jb2Rlcl9kYXRhABQRc2N0cF9lbmNvZGVyX3NpemUAFhdzY3RwX2VuY29kZXJfYWRkX3ZlY3RvcgATFnNjdHBfZW5jb2Rlcl9hZGRfc2hvcnQAChVzY3RwX2VuY29kZXJfYWRkX2ludDgACRZzY3RwX2VuY29kZXJfYWRkX3VpbnQ4ABAWc2N0cF9lbmNvZGVyX2FkZF9pbnQxNgAGF3NjdHBfZW5jb2Rlcl9hZGRfdWludDE2AA0Wc2N0cF9lbmNvZGVyX2FkZF9pbnQzMgAHF3NjdHBfZW5jb2Rlcl9hZGRfdWludDMyAA4Wc2N0cF9lbmNvZGVyX2FkZF9pbnQ2NAAIF3NjdHBfZW5jb2Rlcl9hZGRfdWludDY0AA8Yc2N0cF9lbmNvZGVyX2FkZF9mbG9hdDMyAAMYc2N0cF9lbmNvZGVyX2FkZF9mbG9hdDY0AAUYc2N0cF9lbmNvZGVyX2FkZF91bGViMTI4ABEYc2N0cF9lbmNvZGVyX2FkZF9zbGViMTI4AAwUc2N0cF9lbmNvZGVyX2FkZF9lb2YAARNfX2xlYV9nZXRfaGVhcF9iYXNlABcSX19sZWFfZ2V0X2hlYXBfdG9wABgKixcaXQEDfwJAAkBBACgC8IiAgAAiAEUNACAAKAIIIgFBAWoiAiAAKAIESw0BIAAgAjYCCCAAKAIAIAFqQQ86AAAPC0GkiICAABCCgICAAAAAC0GAiICAABCCgICAAAAAC60BAQR/AkAgAEUNAEEAIQECQCAALQAAIgJFDQAgAEEBaiEDQQAhAANAIABBgImAgABqIAI6AAAgAEEBaiEBIAMgAGotAAAiAkUNASAAQf4DSSEEIAEhACAEDQALCyABQYCJgIAAakEAOgAAQYCJgIAAEICAgIAAQYB8IQADQCAAQYCNgIAAakEAOgAAIABBAWoiASAATyECIAEhACACDQALDwtBAEEAOgCAiYCAAAuPAQEEfyOAgICAAEEQayIBJICAgIAAIAEgADgCDAJAAkBBACgC8IiAgAAiAkUNACACKAIIIgNBAWoiBCACKAIESw0BIAIgBDYCCCACKAIAIANqQQo6AAAgAiABQQxqQQQQhICAgAAgAUEQaiSAgICAAA8LQaSIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALdQECfwJAIAAoAggiAyACaiIEIAAoAgRLDQACQCACRQ0AIAAoAgAgA2ohBCACIQMDQCAEIAEtAAA6AAAgAUEBaiEBIARBAWohBCADQX9qIgMNAAsgACgCCCACaiEECyAAIAQ2AggPC0GAiICAABCCgICAAAAAC48BAQR/I4CAgIAAQRBrIgEkgICAgAAgASAAOQMIAkACQEEAKALwiICAACICRQ0AIAIoAggiA0EBaiIEIAIoAgRLDQEgAiAENgIIIAIoAgAgA2pBCzoAACACIAFBCGpBCBCEgICAACABQRBqJICAgIAADwtBpIiAgAAQgoCAgAAAAAtBgIiAgAAQgoCAgAAAAAuPAQEDfyOAgICAAEEQayIBJICAgIAAIAEgADsBDgJAAkBBACgC8IiAgAAiAEUNACAAKAIIIgJBAWoiAyAAKAIESw0BIAAgAzYCCCAAKAIAIAJqQQI6AAAgACABQQ5qQQIQhICAgAAgAUEQaiSAgICAAA8LQaSIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALjwEBA38jgICAgABBEGsiASSAgICAACABIAA2AgwCQAJAQQAoAvCIgIAAIgBFDQAgACgCCCICQQFqIgMgACgCBEsNASAAIAM2AgggACgCACACakEEOgAAIAAgAUEMakEEEISAgIAAIAFBEGokgICAgAAPC0GkiICAABCCgICAAAAAC0GAiICAABCCgICAAAAAC48BAQR/I4CAgIAAQRBrIgEkgICAgAAgASAANwMIAkACQEEAKALwiICAACICRQ0AIAIoAggiA0EBaiIEIAIoAgRLDQEgAiAENgIIIAIoAgAgA2pBBjoAACACIAFBCGpBCBCEgICAACABQRBqJICAgIAADwtBpIiAgAAQgoCAgAAAAAtBgIiAgAAQgoCAgAAAAAuPAQEDfyOAgICAAEEQayIBJICAgIAAIAEgADoADwJAAkBBACgC8IiAgAAiAEUNACAAKAIIIgJBAWoiAyAAKAIESw0BIAAgAzYCCCAAKAIAIAJqQQA6AAAgACABQQ9qQQEQhICAgAAgAUEQaiSAgICAAA8LQaSIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALSAEBfwJAAkBBACgC8IiAgAAiAUUNACAAQRBPDQEgAUEMIAAQi4CAgAAPC0GkiICAABCCgICAAAAAC0HDiICAABCCgICAAAAAC0MBAn8CQCAAKAIIIgNBAWoiBCAAKAIETQ0AQYCIgIAAEIKAgIAAAAALIAAgBDYCCCAAKAIAIANqIAJBBHQgAXI6AAAL6AEDA38BfgJ/AkACQAJAQQAoAvCIgIAAIgFFDQAgASgCCCICQQFqIgMgASgCBEsNASABIAM2AgggASgCACACakEJOgAAA0AgAEIHhyEEIACnIQICQAJAIABCwABUDQAgAkGAf3IhA0EAIQUgBEJ/Ug0BIABCwACDUA0BCyACQf8AcSEDQQEhBQsgASgCCCICQQFqIgYgASgCBEsNAyABIAY2AgggASgCACACaiADOgAAIAQhACAFRQ0ACw8LQaSIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALjwEBA38jgICAgABBEGsiASSAgICAACABIAA7AQ4CQAJAQQAoAvCIgIAAIgBFDQAgACgCCCICQQFqIgMgACgCBEsNASAAIAM2AgggACgCACACakEDOgAAIAAgAUEOakECEISAgIAAIAFBEGokgICAgAAPC0GkiICAABCCgICAAAAAC0GAiICAABCCgICAAAAAC48BAQN/I4CAgIAAQRBrIgEkgICAgAAgASAANgIMAkACQEEAKALwiICAACIARQ0AIAAoAggiAkEBaiIDIAAoAgRLDQEgACADNgIIIAAoAgAgAmpBBToAACAAIAFBDGpBBBCEgICAACABQRBqJICAgIAADwtBpIiAgAAQgoCAgAAAAAtBgIiAgAAQgoCAgAAAAAuPAQEEfyOAgICAAEEQayIBJICAgIAAIAEgADcDCAJAAkBBACgC8IiAgAAiAkUNACACKAIIIgNBAWoiBCACKAIESw0BIAIgBDYCCCACKAIAIANqQQc6AAAgAiABQQhqQQgQhICAgAAgAUEQaiSAgICAAA8LQaSIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALjwEBA38jgICAgABBEGsiASSAgICAACABIAA6AA8CQAJAQQAoAvCIgIAAIgBFDQAgACgCCCICQQFqIgMgACgCBEsNASAAIAM2AgggACgCACACakEBOgAAIAAgAUEPakEBEISAgIAAIAFBEGokgICAgAAPC0GkiICAABCCgICAAAAAC0GAiICAABCCgICAAAAAC2cBA38CQAJAQQAoAvCIgIAAIgFFDQAgASgCCCICQQFqIgMgASgCBEsNASABIAM2AgggASgCACACakEIOgAAIAEgABCSgICAAA8LQaSIgIAAEIKAgIAAAAALQYCIgIAAEIKAgIAAAAALXQECfwJAA0AgACgCCCICQQFqIgMgACgCBEsNASAAIAM2AgggACgCACACaiABp0H/AHEgAUL/AFYiAkEHdHI6AAAgAUIHiCEBIAINAAsPC0GAiICAABCCgICAAAAAC7wBAQN/AkACQAJAQQAoAvCIgIAAIgFFDQACQAJAIABBDksNACABQQ0gAEH/AXEQi4CAgAAMAQsgASgCCCICQQFqIgMgASgCBEsNAiABIAM2AgggASgCACACakH9AToAACABIACtEJKAgIAACyABKAIIIgIgAGoiACABKAIESw0CIAEgADYCCCABKAIAIAJqDwtBpIiAgAAQgoCAgAAAAAtBgIiAgAAQgoCAgAAAAAtBgIiAgAAQgoCAgAAAAAsnAQF/AkBBACgC8IiAgAAiAA0AQaSIgIAAEIKAgIAAAAALIAAoAgALigEBA39BgIB8IQEDQCABQZCNhIAAakEAOgAAIAFBAWoiAiABTyEDIAIhASADDQALQQBBkI2AgAA2AvCIgIAAQQBBDDYCgI2AgAACQCAAQfX/A0kNAAAAC0EAIAA2ApSNgIAAQQBBnI2AgAA2ApCNgIAAQQAgAEEMajYCgI2AgABBAEEANgKYjYCAAAsnAQF/AkBBACgC8IiAgAAiAA0AQaSIgIAAEIKAgIAAAAALIAAoAggLCABBkI2AgAALCwBBACgCgI2AgAALOgEDf0GAgHwhAANAIABBkI2EgABqQQA6AAAgAEEBaiIBIABPIQIgASEAIAINAAtBAEEANgKAjYCAAAs1AQF/AkBBgIAEQQAoAoCNgIAAIgFrIABPDQAAAAtBACABIABqNgKAjYCAACABQZCNgIAAagsLawEAQYAIC2RBQk9SVDogU0NUUCBlbmNvZGVyIG91dCBvZiBjYXBhY2l0eQBBQk9SVDogZW5jb2RlciBub3QgaW5pdGlhbGl6ZWQAQUJPUlQ6IHNob3J0IHZhbHVlIG11c3QgYmUgPD0gMTUAAPwEBG5hbWUB1AQbAAlfX2xlYV9sb2cBFHNjdHBfZW5jb2Rlcl9hZGRfZW9mAgdsZWFfbG9nAxhzY3RwX2VuY29kZXJfYWRkX2Zsb2F0MzIEGF9zY3RwX2VuY29kZXJfd3JpdGVfZGF0YQUYc2N0cF9lbmNvZGVyX2FkZF9mbG9hdDY0BhZzY3RwX2VuY29kZXJfYWRkX2ludDE2BxZzY3RwX2VuY29kZXJfYWRkX2ludDMyCBZzY3RwX2VuY29kZXJfYWRkX2ludDY0CRVzY3RwX2VuY29kZXJfYWRkX2ludDgKFnNjdHBfZW5jb2Rlcl9hZGRfc2hvcnQLGl9zY3RwX2VuY29kZXJfd3JpdGVfaGVhZGVyDBhzY3RwX2VuY29kZXJfYWRkX3NsZWIxMjgNF3NjdHBfZW5jb2Rlcl9hZGRfdWludDE2DhdzY3RwX2VuY29kZXJfYWRkX3VpbnQzMg8Xc2N0cF9lbmNvZGVyX2FkZF91aW50NjQQFnNjdHBfZW5jb2Rlcl9hZGRfdWludDgRGHNjdHBfZW5jb2Rlcl9hZGRfdWxlYjEyOBIbX3NjdHBfZW5jb2Rlcl93cml0ZV91bGViMTI4ExdzY3RwX2VuY29kZXJfYWRkX3ZlY3RvchQRc2N0cF9lbmNvZGVyX2RhdGEVEXNjdHBfZW5jb2Rlcl9pbml0FhFzY3RwX2VuY29kZXJfc2l6ZRcTX19sZWFfZ2V0X2hlYXBfYmFzZRgSX19sZWFfZ2V0X2hlYXBfdG9wGQ9hbGxvY2F0b3JfcmVzZXQaBm1hbGxvYwcSAQAPX19zdGFja19wb2ludGVyCQoBAAcucm9kYXRhAC0JcHJvZHVjZXJzAQxwcm9jZXNzZWQtYnkBDERlYmlhbiBjbGFuZwYxNC4wLjY=\");\n\n// src/encoder.class.js\nvar wasmModule = null;\nvar SctpEncoderImpl = class {\n  /**\n   * @private\n   * @param {WebAssembly.Instance} instance The WASM instance.\n   * @param {WebAssembly.Memory} memory The WASM memory.\n   */\n  constructor(instance, memory) {\n    this.instance = instance;\n    this.memory = memory;\n  }\n  /**\n   * Initializes the encoder's internal buffer.\n   * This method must be called before any other methods.\n   * @param {number} [initialCapacity=1024] The initial capacity of the encoder buffer.\n   */\n  init(initialCapacity = 1024) {\n    this.instance.exports.sctp_encoder_init(initialCapacity);\n  }\n  /**\n   * Adds an 8-bit signed integer to the buffer.\n   * @param {number} value\n   */\n  addInt8(value) {\n    this.instance.exports.sctp_encoder_add_int8(value);\n  }\n  /**\n   * Adds an 8-bit unsigned integer to the buffer.\n   * @param {number} value\n   */\n  addUint8(value) {\n    this.instance.exports.sctp_encoder_add_uint8(value);\n  }\n  /**\n   * Adds a 16-bit signed integer to the buffer.\n   * @param {number} value\n   */\n  addInt16(value) {\n    this.instance.exports.sctp_encoder_add_int16(value);\n  }\n  /**\n   * Adds a 16-bit unsigned integer to the buffer.\n   * @param {number} value\n   */\n  addUint16(value) {\n    this.instance.exports.sctp_encoder_add_uint16(value);\n  }\n  /**\n   * Adds a 32-bit signed integer to the buffer.\n   * @param {number} value\n   */\n  addInt32(value) {\n    this.instance.exports.sctp_encoder_add_int32(value);\n  }\n  /**\n   * Adds a 32-bit unsigned integer to the buffer.\n   * @param {number} value\n   */\n  addUint32(value) {\n    this.instance.exports.sctp_encoder_add_uint32(value);\n  }\n  /**\n   * Adds a 64-bit signed integer to the buffer.\n   * @param {bigint} value\n   */\n  addInt64(value) {\n    this.instance.exports.sctp_encoder_add_int64(value);\n  }\n  /**\n   * Adds a 64-bit unsigned integer to the buffer.\n   * @param {bigint} value\n   */\n  addUint64(value) {\n    this.instance.exports.sctp_encoder_add_uint64(value);\n  }\n  /**\n   * Adds a ULEB128-encoded unsigned integer to the buffer.\n   * @param {bigint} value\n   */\n  addUleb128(value) {\n    this.instance.exports.sctp_encoder_add_uleb128(value);\n  }\n  /**\n   * Adds an SLEB128-encoded signed integer to the buffer.\n   * @param {bigint} value\n   */\n  addSleb128(value) {\n    this.instance.exports.sctp_encoder_add_sleb128(value);\n  }\n  /**\n   * Adds a 32-bit float to the buffer.\n   * @param {number} value\n   */\n  addFloat32(value) {\n    this.instance.exports.sctp_encoder_add_float32(value);\n  }\n  /**\n   * Adds a 64-bit float to the buffer.\n   * @param {number} value\n   */\n  addFloat64(value) {\n    this.instance.exports.sctp_encoder_add_float64(value);\n  }\n  /**\n   * Adds a \"short\" value (0-15).\n   * @param {number} value\n   */\n  addShort(value) {\n    this.instance.exports.sctp_encoder_add_short(value);\n  }\n  /**\n   * Adds a byte vector to the buffer.\n   * @param {Uint8Array} data The byte array to add.\n   */\n  addVector(data) {\n    const length = data.length;\n    const ptr = this.instance.exports.sctp_encoder_add_vector(length);\n    new Uint8Array(this.memory.buffer, ptr, length).set(data);\n  }\n  /**\n   * Finalizes the encoded data, adds an EOF marker, and returns the resulting buffer.\n   * This method should be called after all data has been added to the encoder.\n   * @returns {Uint8Array} A copy of the encoded data.\n   */\n  build() {\n    if (!this.instance) throw new Error(\"Encoder not initialized.\");\n    this.instance.exports.sctp_encoder_add_eof();\n    return this.getBytes();\n  }\n  /**\n   * Returns the encoded data without an EOF marker.\n   * @returns {Uint8Array} A copy of the encoded data.\n   */\n  getBytes() {\n    if (!this.instance) throw new Error(\"Encoder not initialized.\");\n    const dataPtr = this.instance.exports.sctp_encoder_data();\n    const size = this.instance.exports.sctp_encoder_size();\n    return new Uint8Array(this.memory.buffer, dataPtr, size).slice();\n  }\n};\nasync function SctpEncoder() {\n  if (!wasmModule) {\n    wasmModule = await WebAssembly.compile(sctp_mvp_enc_default);\n  }\n  const importObject = {\n    env: {\n      __lea_log: (ptr) => {\n        const mem = new Uint8Array(memory.buffer);\n        let end = ptr;\n        while (mem[end] !== 0) {\n          end++;\n        }\n        const message = new TextDecoder(\"utf-8\").decode(mem.subarray(ptr, end));\n        console.error(`sctp.mvp.enc.wasm: ${message}`);\n      }\n    }\n  };\n  const instance = await WebAssembly.instantiate(wasmModule, importObject);\n  const memory = instance.exports.memory;\n  return new SctpEncoderImpl(instance, memory);\n}\n\n// src/sctp.mvp.dec.wasm\nvar sctp_mvp_dec_default = __toBinaryNode(\"AGFzbQEAAAABHAZgA39/fwBgAX8AYAF/AX9gAAF/YAF/AX5gAAACKwIDZW52E19fc2N0cF9kYXRhX2hhbmRsZXIAAANlbnYJX19sZWFfbG9nAAEDCQgCAwEEAwMFAgQFAXABAQEFAwEAAwYIAX8BQbCOCAsHgwEHBm1lbW9yeQIAEXNjdHBfZGVjb2Rlcl9pbml0AAIVX19sZWFfYWxsb2NhdG9yX3Jlc2V0AAgMX19sZWFfbWFsbG9jAAkQc2N0cF9kZWNvZGVyX3J1bgADE19fbGVhX2dldF9oZWFwX2Jhc2UABhJfX2xlYV9nZXRfaGVhcF90b3AABwqoDAiQAQEDf0GAgHwhAQNAIAFBsI6EgABqQQA6AAAgAUEBaiICIAFPIQMgAiEBIAMNAAtBAEEMNgKgjoCAAAJAIABB9f8DSQ0AAAALQQAgADYCtI6AgABBAEG8joCAADYCsI6AgABBAEGwjoCAADYCkIqAgABBACAAQQxqNgKgjoCAAEEAQQA2AriOgIAAQbyOgIAAC78HAgt/AX4jgICAgABBEGsiACSAgICAAAJAQQAoApCKgIAAIgFFDQACQCABKAIIIgIgASgCBCIDTw0AA0AgASACQQFqIgQ2AgggACABKAIAIgUgAmoiBi0AACIHQQR2Igg6AA8CQCAHQQ9xIglBD0cNAEEPQQBBABCAgICAAAwCC0EBIQcgAEEPaiEKAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgCQ4OAAECAwQFBgcNCggJHgsMCyACQQJqIgIgA0sNDSABIAI2AggMHAsgAkECaiICIANLDQ0gASACNgIIDBsLIAJBA2oiByADSw0NIAEgBzYCCAwZCyACQQNqIgcgA0sNDSABIAc2AggMGAsgAkEFaiIHIANLDQ0gASAHNgIIDBYLIAJBBWoiByADSw0NIAEgBzYCCAwVCyACQQlqIgcgA0sNDSABIAc2AggMEwsgAkEJaiIHIANLDQ0gASAHNgIIDBILIAJBBWoiByADSw0NIAEgBzYCCAwSCyACQQlqIgcgA0sNDSABIAc2AggMEAsgAkECaiEIIAMgBCADIARLGyACayEKQQAhAkEBIQcDQCAKIAdGDQ4gASAIIAdqQX9qNgIIIAYgB2osAABBf0oNEyAHQQFqIQcgAkH/AXFBB2oiAkHAAXFFDQALQZiIgIAAEISAgIAAAAALAkAgCEEPRw0AIAEQhYCAgAAhCyABKAIEIQMgASgCCCEEIAunIQgLIAQgCGoiByADSw0NIAEgBzYCCCABKAIAIARqIQogCCEHDBILQbCIgIAAEISAgIAAAAALIAEQhYCAgAAaIAEoAgAgBGohCiABKAIIIARrIQcMEAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAtB1YmAgAAQhICAgAAAAAtB6IiAgAAQhICAgAAAAAsgBSAEaiEKQQghBwwDCyAFIARqIQpBBCEHDAILIAUgBGohCkECIQcMAQsgBSAEaiEKCyAJIAogBxCAgICAACABKAIIIgIgASgCBCIDSQ0ACwsgAEEQaiSAgICAAEEADwtByYiAgAAQhICAgAAAAAutAQEEfwJAIABFDQBBACEBAkAgAC0AACICRQ0AIABBAWohA0EAIQADQCAAQaCKgIAAaiACOgAAIABBAWohASADIABqLQAAIgJFDQEgAEH+A0khBCABIQAgBA0ACwsgAUGgioCAAGpBADoAAEGgioCAABCBgICAAEGAfCEAA0AgAEGgjoCAAGpBADoAACAAQQFqIgEgAE8hAiABIQAgAg0ACw8LQQBBADoAoIqAgAALnQEDA38BfgF/IAAoAggiASAAKAIEIgIgASACSxshA0EAIQJCACEEAkACQANAIAMgAUYNAiAAIAFBAWoiBTYCCCAAKAIAIAFqLQAAIgFB/wBxrSACQf8BcSICrYYgBIQhBCABQYABcUUNASAFIQEgAkEHaiICQcABcUUNAAtBgIiAgAAQhICAgAAAAAsgBA8LQZ+JgIAAEISAgIAAAAALCABBsI6AgAALCwBBACgCoI6AgAALOgEDf0GAgHwhAANAIABBsI6EgABqQQA6AAAgAEEBaiIBIABPIQIgASEAIAINAAtBAEEANgKgjoCAAAs1AQF/AkBBgIAEQQAoAqCOgIAAIgFrIABPDQAAAAtBACABIABqNgKgjoCAACABQbCOgIAAagsLkwIBAEGACAuLAkFCT1JUOiB1bGViMTI4IG92ZXJmbG93AEFCT1JUOiBzbGViMTI4IG92ZXJmbG93AEFCT1JUOiB1bmtub3duIHNjdHAgdHlwZQBBQk9SVDogZGVjb2RlciBub3QgaW5pdGlhbGl6ZWQAQUJPUlQ6IHVuZXhwZWN0ZWQgZW5kIG9mIHN0cmVhbSB3aGlsZSByZWFkaW5nIHJhdyBkYXRhAEFCT1JUOiB1bmV4cGVjdGVkIGVuZCBvZiBzdHJlYW0gd2hpbGUgcmVhZGluZyB1bGViMTI4AEFCT1JUOiB1bmV4cGVjdGVkIGVuZCBvZiBzdHJlYW0gd2hpbGUgcmVhZGluZyBzbGViMTI4AADVAQRuYW1lAa0BCgATX19zY3RwX2RhdGFfaGFuZGxlcgEJX19sZWFfbG9nAhFzY3RwX2RlY29kZXJfaW5pdAMQc2N0cF9kZWNvZGVyX3J1bgQHbGVhX2xvZwUaX3NjdHBfZGVjb2Rlcl9yZWFkX3VsZWIxMjgGE19fbGVhX2dldF9oZWFwX2Jhc2UHEl9fbGVhX2dldF9oZWFwX3RvcAgPYWxsb2NhdG9yX3Jlc2V0CQZtYWxsb2MHEgEAD19fc3RhY2tfcG9pbnRlcgkKAQAHLnJvZGF0YQAtCXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQxEZWJpYW4gY2xhbmcGMTQuMC42\");\n\n// src/decoder.class.js\nvar wasmModule2 = null;\nvar typeMap = {\n  INT8: 0,\n  UINT8: 1,\n  INT16: 2,\n  UINT16: 3,\n  INT32: 4,\n  UINT32: 5,\n  INT64: 6,\n  UINT64: 7,\n  ULEB128: 8,\n  SLEB128: 9,\n  FLOAT32: 10,\n  FLOAT64: 11,\n  SHORT: 12,\n  VECTOR: 13,\n  EOF: 15\n};\nvar typeIdToName = Object.fromEntries(Object.entries(typeMap).map(([name, id]) => [id, name]));\nvar SctpDecoderImpl = class {\n  /**\n   * @private\n   */\n  constructor() {\n    this.instance = null;\n    this.memory = null;\n    this.decodedFields = [];\n  }\n  /**\n   * The callback function passed to the WASM module to handle decoded data fields.\n   * This method is called by the WASM module for each field it decodes.\n   * @private\n   * @param {number} type The SCTP type ID of the decoded field.\n   * @param {number} dataPtr A pointer to the decoded data in the WASM memory.\n   * @param {number} size The size of the decoded data.\n   */\n  _handle_data(type, dataPtr, size) {\n    const typeName = typeIdToName[type];\n    if (typeName === \"EOF\") {\n      this.decodedFields.push({ type: \"EOF\" });\n      return;\n    }\n    const view = new DataView(this.memory.buffer, dataPtr, size);\n    let value;\n    switch (typeName) {\n      case \"INT8\":\n        value = view.getInt8(0);\n        break;\n      case \"UINT8\":\n        value = view.getUint8(0);\n        break;\n      case \"INT16\":\n        value = view.getInt16(0, true);\n        break;\n      case \"UINT16\":\n        value = view.getUint16(0, true);\n        break;\n      case \"INT32\":\n        value = view.getInt32(0, true);\n        break;\n      case \"UINT32\":\n        value = view.getUint32(0, true);\n        break;\n      case \"INT64\":\n        value = view.getBigInt64(0, true);\n        break;\n      case \"UINT64\":\n        value = view.getBigUint64(0, true);\n        break;\n      case \"FLOAT32\":\n        value = view.getFloat32(0, true);\n        break;\n      case \"FLOAT64\":\n        value = view.getFloat64(0, true);\n        break;\n      case \"SHORT\":\n        value = new Uint8Array(this.memory.buffer, dataPtr, size)[0];\n        break;\n      case \"VECTOR\":\n        value = new Uint8Array(this.memory.buffer, dataPtr, size).slice();\n        break;\n      case \"ULEB128\":\n      case \"SLEB128\":\n        value = new Uint8Array(this.memory.buffer, dataPtr, size).slice();\n        break;\n      default:\n        throw new Error(`Unknown SCTP type ID: ${type}`);\n    }\n    this.decodedFields.push({ type: typeName, value });\n  }\n  /**\n   * Decodes a buffer of SCTP-encoded data.\n   * @param {Uint8Array} encodedData The byte array to decode.\n   * @returns {Array<{type: string, value: any}>} An array of decoded field objects, each with a `type` and `value`.\n   */\n  decode(encodedData) {\n    if (!this.instance) throw new Error(\"Decoder not initialized.\");\n    this.decodedFields = [];\n    const bufferPtr = this.instance.exports.sctp_decoder_init(encodedData.length);\n    if (bufferPtr === 0) {\n      throw new Error(\"Failed to allocate memory in WASM for decoder.\");\n    }\n    new Uint8Array(this.memory.buffer, bufferPtr, encodedData.length).set(encodedData);\n    const result = this.instance.exports.sctp_decoder_run();\n    if (result !== 0) {\n      throw new Error(`Decoder failed with exit code: ${result}`);\n    }\n    return this.decodedFields;\n  }\n};\nasync function SctpDecoder() {\n  if (!wasmModule2) {\n    wasmModule2 = await WebAssembly.compile(sctp_mvp_dec_default);\n  }\n  const decoder = new SctpDecoderImpl();\n  const importObject = {\n    env: {\n      __sctp_data_handler: decoder._handle_data.bind(decoder),\n      __lea_log: (ptr) => {\n        if (!decoder.memory) return;\n        const mem = new Uint8Array(decoder.memory.buffer);\n        let end = ptr;\n        while (mem[end] !== 0) {\n          end++;\n        }\n        const message = new TextDecoder(\"utf-8\").decode(mem.subarray(ptr, end));\n        console.error(`sctp.mvp.dec.wasm: ${message}`);\n      }\n    }\n  };\n  const instance = await WebAssembly.instantiate(wasmModule2, importObject);\n  decoder.instance = instance;\n  decoder.memory = instance.exports.memory;\n  return decoder;\n}\nexport {\n  SctpDecoder,\n  SctpEncoder\n};\n", "// --- system-program.js ---\nimport { SctpEncoder } from '@leachain/sctp';\n\nimport { LEA_SYSTEM_PROGRAM } from './constants.js';\n\nexport class TransferInstruction {\n    #programIndex = null;\n\n    constructor({ fromPubkeyPairHash, toPubkeyPairHash, amount }) {\n        this.fromPubkeyPairHash = fromPubkeyPairHash;\n        console.log(`TransferInstruction fromPubkeyPairHash:`, fromPubkeyPairHash);\n        this.toPubkeyPairHash = toPubkeyPairHash;\n        this.amount = amount;\n        this.fromPubkeyIndex = null;\n        this.toPubkeyIndex = null;\n    }\n\n    resolveKeys(keyList) {\n        this.#programIndex = keyList.add(LEA_SYSTEM_PROGRAM);\n        this.fromPubkeyIndex = keyList.add(this.fromPubkeyPairHash);\n        this.toPubkeyIndex = keyList.add(this.toPubkeyPairHash);\n    }\n\n    get programIndex() {\n        return this.#programIndex;\n    }\n\n    async toBytes() {\n        if (this.fromPubkeyIndex === null || this.toPubkeyIndex === null) {\n            throw new Error(\"resolveKeys() must be called before toBytes()\");\n        }\n        const encoder = await SctpEncoder();\n        encoder.init(2000);\n        encoder.addUint8(0x00); // Transfer action code\n        encoder.addShort(this.fromPubkeyIndex);\n        encoder.addUleb128(this.amount);\n        encoder.addShort(this.toPubkeyIndex);\n        return encoder.build();\n    }\n}\n//accountPubKeyHash should alsways be a object of type Address\nexport class PublishKeyPairInstruction {\n    #programIndex = null;\n\n    constructor({ address, slhPubKey, eddsaPubKey }) {\n        this.accountPubKeyHash = address.toBytes();\n        this.slhPubKey = slhPubKey;\n        this.eddsaPubKey = eddsaPubKey;\n        this.accountPubKeyIndex = null;\n    }\n\n    resolveKeys(keyList) {\n        this.#programIndex = keyList.add(LEA_SYSTEM_PROGRAM);\n        this.accountPubKeyIndex = keyList.add(this.accountPubKeyHash);\n    }\n\n    get programIndex() {\n        return this.#programIndex;\n    }\n\n    async toBytes() {\n        if (this.accountPubKeyIndex === null) {\n            throw new Error(\"resolveKeys() must be called before toBytes()\");\n        }\n        const encoder = await SctpEncoder();\n        encoder.init(2000);\n        encoder.addUint8(0x01); // Publish Key Pair action code\n        encoder.addShort(this.accountPubKeyIndex);\n        encoder.addVector(this.eddsaPubKey);\n        encoder.addVector(this.slhPubKey);\n        return encoder.build();\n    }\n}\n\nexport class RevokeKeyPairInstruction {\n    #programIndex = null;\n\n    constructor({ address }) {\n        this.accountPubKeyHash = address.toBytes();\n        this.accountPubKeyIndex = null;\n    }\n\n    resolveKeys(keyList) {\n        this.#programIndex = keyList.add(LEA_SYSTEM_PROGRAM);\n        this.accountPubKeyIndex = keyList.add(this.accountPubKeyHash);\n    }\n\n    get programIndex() {\n        return this.#programIndex;\n    }\n\n    async toBytes() {\n        if (this.accountPubKeyIndex === null) {\n            throw new Error(\"resolveKeys() must be called before toBytes()\");\n        }\n        const encoder = await SctpEncoder.create();\n        encoder.init(2000);\n        encoder.addUint8(0x02); // Revoke Key Pair action code\n        encoder.addShort(this.accountPubKeyIndex);\n        return encoder.build();\n    }\n}\n\nexport class SystemProgram {\n    static transfer(obj) {\n        return new TransferInstruction(obj);\n    }\n\n    static publishKeyPair(obj) {\n        return new PublishKeyPairInstruction(obj);\n    }\n\n    static revokeKeyPair(obj) {\n        return new RevokeKeyPairInstruction(obj);\n    }\n}", "import { SctpEncoder } from '@leachain/sctp';\nimport { KeyList, hexToBytes, combineUint8Arrays } from './utils.js';\nimport { SLHPublicKey } from './slh-public.js';\nimport { PublicKey } from './publickey.js';\nimport { Address } from './address.js';\nimport { MAX_TRANSACTION_SIZE } from './constants.js';\nconst recentBlockhashPlaceHolder = new Uint8Array([\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0\n]);\n\nexport class Transaction {\n    #keyList = new KeyList();\n    #instructions = [];\n    #signaturesEd25519 = new Map();\n    #signaturesSLHDSA = new Map();\n    constructor() {\n        this.#keyList.add(recentBlockhashPlaceHolder); // element 0 is recent blockhash\n    }\n\n    add(instruction) {\n        instruction.resolveKeys(this.#keyList);\n        this.#instructions.push(instruction);\n    }\n\n    addEdDsaSig(publicKey, signature) {\n        const pubkeyIndex = this.#keyList.hasKey(publicKey);\n        if (!(signature instanceof Uint8Array)) {\n            throw new Error(\"Invalid signature: must be a Uint8Array\");\n        }\n        if (typeof pubkeyIndex === 'number') {\n            this.#signaturesEd25519.set(pubkeyIndex, signature);\n        }\n        else {\n            throw new Error(\"Address missing for transaction signature\");\n        }\n    }\n\n    addSlhDsaSig(address, signature) {\n        const pubkeyIndex = this.#keyList.hasKey(address);\n        if (!(signature instanceof Uint8Array)) {\n            throw new Error(\"Invalid signature: must be a Uint8Array\");\n        }\n        if (typeof pubkeyIndex === 'number') {\n            this.#signaturesSLHDSA.set(pubkeyIndex, signature);\n        } else {\n            throw new Error(\"Signer address missing for transaction signature\");\n        }\n    }\n\n    async sign(signer) {\n        // Ensure the signer's keypair hash is in the keyList\n        if (this.#keyList.hasKey(signer.address) === undefined) {\n            this.#keyList.add(signer.address);\n        }\n\n        //build transaction without signatures\n        const encoder = await this.serializeWithoutSignatures();\n        const unsignedTransaction = encoder.getBytes();\n        const edDsaSignature = await signer.edDsa.sign(unsignedTransaction);\n        this.addEdDsaSig(signer.address, edDsaSignature);\n        const slhDsaSignature = await signer.slhDsa.sign(unsignedTransaction);\n        this.addSlhDsaSig(signer.address, slhDsaSignature);\n    }\n\n    set recentBlockhash(blockHash) {\n        if (typeof blockHash === 'string') {\n            this.#keyList._keys[0] = hexToBytes(blockHash);\n        } else if (blockHash instanceof Uint8Array) {\n            this.#keyList._keys[0] = blockHash;\n        } else {\n            throw new Error(\"Invalid blockHash: must be a hex string or Uint8Array\");\n        }\n    }\n\n    async serializeWithoutSignatures() {\n        /* build transaction */\n        const encoder = await SctpEncoder();\n        encoder.init(MAX_TRANSACTION_SIZE);\n\n        const keys = this.#keyList.getKeys();\n        const rawKeys = keys.map(key => {\n            if (key instanceof PublicKey || key instanceof SLHPublicKey) {\n                return key.toBytes();\n            }\n            if (key instanceof Address) {\n                return key.publicKeyPairHash;\n            }\n            return key;\n        });\n\n        /* build a 32byte index array */\n        encoder.addShort(0x01); // version 1\n        encoder.addVector(combineUint8Arrays(rawKeys));\n        /* number of instruction in this transaction */\n        encoder.addShort(this.#instructions.length);\n\n        const encoded = [];\n        for (const ix of this.#instructions) {\n            // programm index reference\n            encoder.addShort(ix.programIndex);\n            // programm command data\n            encoder.addVector(await ix.toBytes());\n        }\n        return encoder;\n    }\n\n    async toBytes() {\n        const encoder = await this.serializeWithoutSignatures();\n        /* Add any signatures we maybe have set */\n        if (this.#signaturesEd25519.size > 0) {\n            for (const [pubkeyIndex, signature] of this.#signaturesEd25519.entries()) {\n                encoder.addVector(signature);\n                encoder.addShort(pubkeyIndex);\n            }\n        }\n        if (this.#signaturesSLHDSA.size > 0) {\n            for (const [pubkeyIndex, signature] of this.#signaturesSLHDSA.entries()) {\n                encoder.addVector(signature);\n                encoder.addShort(pubkeyIndex);\n            }\n        }\n\n        return encoder.build();\n    }\n}\n"],
  "mappings": "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AAS,WAAW,UAAU,SAAS,WAAW,SAAS,QAAQ,UAAU,QAAQ,SAAS,SAAS,OAAO,SAAS,SAAS,QAAQ,UAAU,WAAW,UAAU,UAAU,SAAS,OAAO,YAAY,UAAU,WAAW,OAAO,UAAU,WAAW,SAAS,UAAU,UAAU,UAAU,WAAW,QAAQ,UAAU,UAAU,YAAY,WAAW,WAAW,SAAS,UAAU,QAAQ,UAAU,QAAQ,UAAU,WAAW,WAAW,SAAS,SAAS,SAAS,QAAQ,WAAW,SAAS,WAAW,QAAQ,QAAQ,YAAY,SAAS,SAAS,OAAO,WAAW,WAAW,QAAQ,UAAU,UAAU,UAAU,OAAO,UAAU,WAAW,UAAU,QAAQ,SAAS,UAAU,UAAU,SAAS,QAAQ,UAAU,WAAW,UAAU,QAAQ,UAAU,SAAS,UAAU,UAAU,WAAW,SAAS,QAAQ,SAAS,WAAW,QAAQ,UAAU,UAAU,WAAW,UAAU,WAAW,OAAO,QAAQ,QAAQ,WAAW,QAAQ,SAAS,UAAU,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,SAAS,SAAS,WAAW,UAAU,QAAQ,QAAQ,SAAS,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,SAAS,UAAU,UAAU,UAAU,QAAQ,UAAU,UAAU,OAAO,OAAO,WAAW,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,SAAS,UAAU,SAAS,UAAU,SAAS,SAAS,YAAY,UAAU,UAAU,SAAS,WAAW,SAAS,SAAS,UAAU,SAAS,UAAU,WAAW,SAAS,QAAQ,QAAQ,UAAU,UAAU,UAAU,UAAU,UAAU,SAAS,OAAO,YAAY,QAAQ,UAAU,SAAS,QAAQ,WAAW,SAAS,SAAS,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,OAAO,SAAS,UAAU,SAAS,UAAU,SAAS,UAAU,UAAU,WAAW,WAAW,WAAW,OAAO,UAAU,QAAQ,SAAS,UAAU,SAAS,QAAQ,QAAQ,QAAQ,UAAU,UAAU,UAAU,OAAO,WAAW,SAAS,YAAY,UAAU,UAAU,SAAS,WAAW,QAAQ,WAAW,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,SAAS,SAAS,YAAY,UAAU,SAAS,WAAW,UAAU,SAAS,QAAQ,SAAS,SAAS,UAAU,QAAQ,UAAU,SAAS,WAAW,SAAS,SAAS,WAAW,UAAU,UAAU,WAAW,WAAW,SAAS,SAAS,SAAS,YAAY,UAAU,WAAW,QAAQ,SAAS,SAAS,QAAQ,WAAW,QAAQ,QAAQ,SAAS,SAAS,UAAU,SAAS,UAAU,SAAS,SAAS,UAAU,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,WAAW,UAAU,SAAS,SAAS,WAAW,QAAQ,UAAU,QAAQ,QAAQ,WAAW,SAAS,UAAU,WAAW,QAAQ,WAAW,SAAS,UAAU,WAAW,WAAW,WAAW,WAAW,YAAY,WAAW,YAAY,WAAW,YAAY,QAAQ,QAAQ,UAAU,QAAQ,SAAS,QAAQ,QAAQ,WAAW,QAAQ,UAAU,SAAS,WAAW,UAAU,UAAU,UAAU,SAAS,UAAU,SAAS,UAAU,SAAS,QAAQ,SAAS,SAAS,UAAU,SAAS,SAAS,SAAS,UAAU,SAAS,QAAQ,WAAW,SAAS,SAAS,UAAU,QAAQ,SAAS,UAAU,SAAS,WAAW,SAAS,UAAU,WAAW,UAAU,SAAS,OAAO,WAAW,QAAQ,WAAW,OAAO,YAAY,WAAW,WAAW,WAAW,SAAS,WAAW,UAAU,QAAQ,SAAS,OAAO,UAAU,QAAQ,SAAS,UAAU,UAAU,QAAQ,YAAY,QAAQ,OAAO,QAAQ,UAAU,UAAU,UAAU,YAAY,UAAU,WAAW,YAAY,YAAY,QAAQ,WAAW,UAAU,QAAQ,UAAU,SAAS,WAAW,UAAU,UAAU,UAAU,WAAW,QAAQ,UAAU,UAAU,WAAW,SAAS,UAAU,UAAU,YAAY,UAAU,UAAU,QAAQ,WAAW,WAAW,UAAU,UAAU,WAAW,UAAU,UAAU,WAAW,QAAQ,WAAW,SAAS,QAAQ,UAAU,QAAQ,UAAU,WAAW,WAAW,WAAW,UAAU,YAAY,UAAU,QAAQ,YAAY,YAAY,WAAW,QAAQ,WAAW,YAAY,WAAW,YAAY,UAAU,UAAU,WAAW,SAAS,UAAU,YAAY,OAAO,QAAQ,WAAW,UAAU,UAAU,UAAU,SAAS,QAAQ,QAAQ,UAAU,QAAQ,SAAS,UAAU,SAAS,WAAW,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,SAAS,QAAQ,SAAS,WAAW,SAAS,SAAS,SAAS,QAAQ,SAAS,UAAU,QAAQ,QAAQ,QAAQ,WAAW,WAAW,QAAQ,QAAQ,WAAW,UAAU,OAAO,SAAS,UAAU,SAAS,SAAS,YAAY,WAAW,WAAW,YAAY,YAAY,SAAS,QAAQ,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,WAAW,SAAS,UAAU,SAAS,OAAO,WAAW,WAAW,SAAS,UAAU,WAAW,UAAU,UAAU,WAAW,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,SAAS,UAAU,SAAS,YAAY,WAAW,SAAS,SAAS,OAAO,SAAS,SAAS,WAAW,SAAS,SAAS,UAAU,SAAS,WAAW,UAAU,WAAW,UAAU,YAAY,QAAQ,SAAS,UAAU,SAAS,WAAW,UAAU,YAAY,UAAU,WAAW,UAAU,WAAW,YAAY,WAAW,WAAW,SAAS,SAAS,QAAQ,UAAU,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,SAAS,OAAO,WAAW,UAAU,QAAQ,WAAW,QAAQ,SAAS,SAAS,QAAQ,SAAS,QAAQ,UAAU,UAAU,OAAO,SAAS,WAAW,QAAQ,WAAW,OAAO,SAAS,UAAU,WAAW,SAAS,YAAY,WAAW,YAAY,WAAW,OAAO,QAAQ,QAAQ,UAAU,SAAS,YAAY,SAAS,SAAS,OAAO,SAAS,WAAW,SAAS,UAAU,QAAQ,QAAQ,UAAU,SAAS,QAAQ,QAAQ,UAAU,UAAU,QAAQ,QAAQ,SAAS,UAAU,QAAQ,OAAO,WAAW,OAAO,QAAQ,SAAS,SAAS,QAAQ,UAAU,QAAQ,UAAU,QAAQ,SAAS,SAAS,SAAS,UAAU,SAAS,SAAS,OAAO,QAAQ,SAAS,OAAO,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,SAAS,UAAU,UAAU,QAAQ,WAAW,SAAS,WAAW,UAAU,UAAU,SAAS,OAAO,WAAW,SAAS,YAAY,SAAS,UAAU,UAAU,QAAQ,SAAS,SAAS,SAAS,UAAU,SAAS,QAAQ,OAAO,SAAS,WAAW,QAAQ,UAAU,UAAU,QAAQ,UAAU,WAAW,QAAQ,OAAO,UAAU,WAAW,UAAU,UAAU,WAAW,OAAO,QAAQ,QAAQ,UAAU,SAAS,QAAQ,WAAW,UAAU,SAAS,UAAU,WAAW,WAAW,SAAS,SAAS,QAAQ,UAAU,UAAU,WAAW,QAAQ,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,SAAS,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,QAAQ,SAAS,WAAW,UAAU,UAAU,UAAU,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,QAAQ,WAAW,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,OAAO,OAAO,SAAS,QAAQ,QAAQ,UAAU,WAAW,QAAQ,SAAS,UAAU,QAAQ,SAAS,WAAW,OAAO,QAAQ,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,YAAY,UAAU,SAAS,UAAU,QAAQ,OAAO,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,WAAW,SAAS,UAAU,QAAQ,QAAQ,WAAW,UAAU,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,UAAU,SAAS,YAAY,QAAQ,SAAS,QAAQ,SAAS,OAAO,QAAQ,SAAS,UAAU,SAAS,WAAW,UAAU,QAAQ,UAAU,SAAS,QAAQ,WAAW,UAAU,OAAO,QAAQ,QAAQ,YAAY,QAAQ,UAAU,OAAO,WAAW,WAAW,SAAS,WAAW,WAAW,UAAU,UAAU,UAAU,WAAW,WAAW,QAAQ,WAAW,UAAU,YAAY,SAAS,YAAY,UAAU,YAAY,UAAU,WAAW,UAAU,UAAU,WAAW,WAAW,UAAU,UAAU,UAAU,SAAS,YAAY,SAAS,WAAW,UAAU,UAAU,UAAU,WAAW,WAAW,UAAU,YAAY,QAAQ,UAAU,UAAU,WAAW,QAAQ,UAAU,WAAW,SAAS,QAAQ,SAAS,UAAU,UAAU,OAAO,QAAQ,WAAW,SAAS,SAAS,SAAS,OAAO,QAAQ,QAAQ,WAAW,OAAO,SAAS,SAAS,QAAQ,UAAU,UAAU,QAAQ,QAAQ,YAAY,QAAQ,QAAQ,WAAW,OAAO,QAAQ,OAAO,UAAU,QAAQ,WAAW,QAAQ,OAAO,WAAW,QAAQ,UAAU,QAAQ,QAAQ,SAAS,SAAS,QAAQ,OAAO,SAAS,SAAS,UAAU,QAAQ,QAAQ,QAAQ,YAAY,UAAU,SAAS,SAAS,SAAS,SAAS,WAAW,QAAQ,OAAO,QAAQ,WAAW,SAAS,QAAQ,UAAU,QAAQ,SAAS,SAAS,WAAW,QAAQ,OAAO,SAAS,UAAU,WAAW,SAAS,QAAQ,UAAU,QAAQ,WAAW,UAAU,UAAU,SAAS,QAAQ,WAAW,WAAW,WAAW,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,UAAU,QAAQ,UAAU,QAAQ,UAAU,QAAQ,QAAQ,WAAW,SAAS,QAAQ,SAAS,UAAU,QAAQ,QAAQ,WAAW,QAAQ,UAAU,QAAQ,SAAS,SAAS,WAAW,UAAU,SAAS,SAAS,UAAU,UAAU,WAAW,OAAO,SAAS,UAAU,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,UAAU,OAAO,UAAU,WAAW,SAAS,WAAW,UAAU,SAAS,UAAU,SAAS,UAAU,UAAU,UAAU,YAAY,QAAQ,QAAQ,UAAU,SAAS,YAAY,QAAQ,UAAU,UAAU,WAAW,QAAQ,UAAU,QAAQ,WAAW,QAAQ,YAAY,SAAS,SAAS,UAAU,QAAQ,UAAU,UAAU,WAAW,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,WAAW,SAAS,UAAU,UAAU,YAAY,QAAQ,WAAW,SAAS,QAAQ,WAAW,SAAS,UAAU,WAAW,UAAU,UAAU,QAAQ,WAAW,OAAO,SAAS,WAAW,UAAU,SAAS,UAAU,OAAO,UAAU,WAAW,UAAU,WAAW,SAAS,QAAQ,SAAS,QAAQ,WAAW,YAAY,UAAU,UAAU,SAAS,YAAY,SAAS,QAAQ,SAAS,QAAQ,UAAU,QAAQ,YAAY,UAAU,UAAU,YAAY,SAAS,QAAQ,UAAU,UAAU,WAAW,QAAQ,SAAS,QAAQ,UAAU,UAAU,SAAS,UAAU,UAAU,QAAQ,QAAQ,QAAQ,YAAY,WAAW,WAAW,UAAU,SAAS,QAAQ,OAAO,WAAW,WAAW,SAAS,QAAQ,QAAQ,QAAQ,SAAS,SAAS,SAAS,WAAW,UAAU,UAAU,SAAS,QAAQ,WAAW,QAAQ,WAAW,UAAU,SAAS,OAAO,WAAW,UAAU,SAAS,OAAO,OAAO,QAAQ,UAAU,UAAU,WAAW,WAAW,UAAU,WAAW,SAAS,SAAS,WAAW,QAAQ,OAAO,SAAS,UAAU,SAAS,OAAO,QAAQ,OAAO,SAAS,WAAW,QAAQ,QAAQ,OAAO,SAAS,UAAU,QAAQ,QAAQ,SAAS,WAAW,UAAU,UAAU,UAAU,SAAS,WAAW,SAAS,YAAY,SAAS,UAAU,YAAY,UAAU,WAAW,SAAS,WAAW,SAAS,UAAU,WAAW,QAAQ,QAAQ,QAAQ,OAAO,SAAS,UAAU,UAAU,SAAS,QAAQ,UAAU,QAAQ,QAAQ,UAAU,QAAQ,SAAS,SAAS,SAAS,WAAW,SAAS,UAAU,UAAU,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ,WAAW,UAAU,WAAW,SAAS,QAAQ,WAAW,SAAS,UAAU,QAAQ,WAAW,WAAW,OAAO,WAAW,UAAU,UAAU,UAAU,WAAW,UAAU,UAAU,OAAO,SAAS,SAAS,UAAU,YAAY,SAAS,UAAU,WAAW,SAAS,OAAO,UAAU,QAAQ,SAAS,QAAQ,WAAW,QAAQ,UAAU,SAAS,SAAS,SAAS,UAAU,WAAW,SAAS,QAAQ,UAAU,UAAU,SAAS,QAAQ,UAAU,QAAQ,QAAQ,SAAS,SAAS,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,WAAW,WAAW,YAAY,YAAY,QAAQ,UAAU,WAAW,WAAW,UAAU,SAAS,YAAY,UAAU,WAAW,UAAU,WAAW,WAAW,UAAU,WAAW,SAAS,SAAS,WAAW,SAAS,YAAY,UAAU,WAAW,SAAS,WAAW,WAAW,WAAW,UAAU,WAAW,WAAW,WAAW,SAAS,YAAY,WAAW,WAAW,SAAS,WAAW,UAAU,WAAW,QAAQ,QAAQ,SAAS,WAAW,SAAS,SAAS,SAAS,YAAY,UAAU,WAAW,SAAS,QAAQ,OAAO,UAAU,WAAW,WAAW,WAAW,WAAW,YAAY,SAAS,QAAQ,QAAQ,SAAS,UAAU,WAAW,QAAQ,QAAQ,SAAS,SAAS,QAAQ,QAAQ,SAAS,SAAS,QAAQ,SAAS,UAAU,SAAS,SAAS,QAAQ,QAAQ,UAAU,SAAS,OAAO,SAAS,SAAS,QAAQ,UAAU,SAAS,WAAW,UAAU,WAAW,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,UAAU,UAAU,UAAU,WAAW,UAAU,SAAS,WAAW,UAAU,QAAQ,UAAU,YAAY,UAAU,UAAU,UAAU,SAAS,QAAQ,UAAU,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,YAAY,UAAU,YAAY,YAAY,UAAU,UAAU,WAAW,UAAU,WAAW,UAAU,UAAU,UAAU,UAAU,OAAO,UAAU,QAAQ,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,QAAQ,SAAS,SAAS,UAAU,UAAU,WAAW,QAAQ,UAAU,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,SAAS,UAAU,QAAQ,OAAO,QAAQ,OAAO,UAAU,SAAS,OAAO,UAAU,WAAW,QAAQ,QAAQ,SAAS,UAAU,SAAS,QAAQ,UAAU,QAAQ,UAAU,QAAQ,WAAW,WAAW,SAAS,WAAW,QAAQ,OAAO,SAAS,QAAQ,SAAS,WAAW,SAAS,UAAU,UAAU,WAAW,YAAY,YAAY,SAAS,SAAS,UAAU,UAAU,SAAS,OAAO,UAAU,UAAU,QAAQ,UAAU,UAAU,WAAW,YAAY,QAAQ,QAAQ,WAAW,UAAU,QAAQ,WAAW,UAAU,SAAS,YAAY,UAAU,WAAW,WAAW,UAAU,SAAS,SAAS,UAAU,SAAS,WAAW,SAAS,QAAQ,SAAS,WAAW,UAAU,SAAS,SAAS,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ,SAAS,YAAY,SAAS,UAAU,SAAS,WAAW,OAAO,WAAW,QAAQ,QAAQ,SAAS,SAAS,QAAQ,UAAU,QAAQ,SAAS,UAAU,WAAW,UAAU,SAAS,QAAQ,SAAS,UAAU,WAAW,OAAO,QAAQ,SAAS,UAAU,OAAO,SAAS,QAAQ,SAAS,SAAS,QAAQ,QAAQ,SAAS,WAAW,SAAS,SAAS,UAAU,QAAQ,UAAU,QAAQ,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,SAAS,SAAS,QAAQ,SAAS,QAAQ,QAAQ,UAAU,UAAU,QAAQ,QAAQ,QAAQ,SAAS,WAAW,SAAS,YAAY,SAAS,WAAW,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,SAAS,QAAQ,UAAU,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,UAAU,SAAS,UAAU,SAAS,QAAQ,UAAU,SAAS,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,UAAU,UAAU,OAAO,UAAU,WAAW,YAAY,UAAU,WAAW,SAAS,SAAS,UAAU,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,SAAS,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,SAAS,WAAW,SAAS,SAAS,SAAS,SAAS,YAAY,UAAU,UAAU,UAAU,YAAY,WAAW,SAAS,WAAW,SAAS,WAAW,UAAU,UAAU,WAAW,QAAQ,UAAU,UAAU,SAAS,WAAW,QAAQ,UAAU,OAAO,SAAS,UAAU,SAAS,UAAU,WAAW,QAAQ,WAAW,SAAS,YAAY,YAAY,UAAU,WAAW,WAAW,WAAW,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,SAAS,UAAU,SAAS,UAAU,WAAW,SAAS,UAAU,SAAS,UAAU,OAAO,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,SAAS,UAAU,QAAQ,SAAS,QAAQ,QAAQ,OAAO,UAAU,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,SAAS,QAAQ,UAAU,SAAS,QAAQ,SAAS,QAAQ,WAAW,SAAS,UAAU,SAAS,SAAS,WAAW,UAAU,QAAQ,SAAS,QAAQ,UAAU,QAAQ,QAAQ,OAAO,SAAS,UAAU,SAAS,SAAS,WAAW,SAAS,WAAW,OAAO,YAAY,UAAU,SAAS,UAAU,YAAY,QAAQ,UAAU,WAAW,QAAQ,SAAS,OAAO,SAAS,UAAU,SAAS,WAAW,YAAY,QAAQ,SAAS,WAAW,UAAU,SAAS,QAAQ,OAAO,SAAS,SAAS,WAAW,UAAU,SAAS,YAAY,QAAQ,SAAS,UAAU,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,WAAW,QAAQ,QAAQ,UAAU,WAAW,SAAS,QAAQ,SAAS,WAAW,SAAS,SAAS,OAAO,QAAQ,WAAW,UAAU,QAAQ,UAAU,UAAU,QAAQ,UAAU,UAAU,UAAU,SAAS,QAAQ,SAAS,OAAO,QAAQ,WAAW,QAAQ,YAAY,UAAU,WAAW,SAAS,WAAW,SAAS,QAAQ,UAAU,UAAU,WAAW,WAAW,UAAU,QAAQ,YAAY,WAAW,UAAU,SAAS,WAAW,UAAU,UAAU,WAAW,UAAU,QAAQ,SAAS,SAAS,SAAS,QAAQ,SAAS,OAAO,QAAQ,UAAU,WAAW,SAAS,WAAW,UAAU,UAAU,SAAS,SAAS,UAAU,SAAS,OAAO,UAAU,SAAS,WAAW,QAAQ,SAAS,WAAW,UAAU,UAAU,WAAW,SAAS,QAAQ,UAAU,WAAW,QAAQ,UAAU,WAAW,UAAU,WAAW,WAAW,WAAW,SAAS,QAAQ,WAAW,WAAW,UAAU,WAAW,SAAS,QAAQ,SAAS,UAAU,SAAS,SAAS,SAAS,SAAS,QAAQ,WAAW,UAAU,QAAQ,UAAU,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,UAAU,QAAQ,WAAW,QAAQ,WAAW,QAAQ,QAAQ,SAAS,SAAS,QAAQ,OAAO,UAAU,UAAU,QAAQ,UAAU,WAAW,OAAO,WAAW,WAAW,SAAS,WAAW,QAAQ,OAAO,SAAS,QAAQ,SAAS,SAAS,QAAQ,S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",
  "names": ["exports", "module", "global", "P", "data", "mutex", "hash", "err", "_a", "C", "blake3", "createBLAKE3", "sha224", "sha256", "sha384", "sha512", "ripemd160", "pbkdf2", "hmac", "C", "G", "P", "p", "n", "isLE", "_32n", "cr", "ripemd160", "C", "G", "sha256", "sha512", "sha512", "ripemd160", "sha256", "I", "sha256", "sha512", "ensureBytes", "randomBytes", "ensureBytes", "bytesToNumberBE", "numberToBytesBE", "gen", "N", "W", "opts", "W2", "randomBytes", "ensureBytes", "root", "i", "M", "genShake", "import_hash_wasm"]
}
