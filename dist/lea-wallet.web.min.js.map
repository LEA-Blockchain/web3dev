{
  "version": 3,
  "sources": ["../src/index.js", "../node_modules/@noble/ed25519/index.js", "../node_modules/@noble/hashes/src/crypto.ts", "../node_modules/@noble/hashes/src/utils.ts", "../node_modules/@noble/hashes/src/hmac.ts", "../node_modules/@noble/hashes/src/_md.ts", "../node_modules/@noble/hashes/src/legacy.ts", "../node_modules/@noble/hashes/src/ripemd160.ts", "../node_modules/@noble/hashes/src/_u64.ts", "../node_modules/@noble/hashes/src/sha2.ts", "../node_modules/@noble/hashes/src/sha256.ts", "../node_modules/@noble/hashes/src/sha512.ts", "../src/hd.js", "../node_modules/@noble/hashes/src/pbkdf2.ts", "../src/bip39.js", "../src/bech32m.js", "../src/constants.js", "../src/publickey.js", "../src/keypair.js", "../src/wallet.js", "../src/connection.js", "../node_modules/@leachain/cte-core/dist/cte-core.web.js", "../src/system-program.js", "../src/utils.js", "../src/transaction.js"],
  "sourcesContent": ["export { Wallet } from './wallet.js';\nexport { Keypair } from './keypair.js';\nexport { PublicKey } from './publickey.js';\nexport { generateMnemonic } from './bip39.js';\nexport { Connection } from './connection.js';\nexport { SystemProgram } from './system-program.js';\nexport { Transaction } from './transaction.js';\nexport * from './utils.js';\nexport * from './constants.js';\n", "/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n/**\n * 4KB JS implementation of ed25519 EDDSA signatures compliant with RFC8032, FIPS 186-5 & ZIP215.\n * @module\n */\nconst P = 2n ** 255n - 19n; // ed25519 is twisted edwards curve\nconst N = 2n ** 252n + 27742317777372353535851937790883648493n; // curve's (group) order\nconst Gx = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an; // base point x\nconst Gy = 0x6666666666666666666666666666666666666666666666666666666666666658n; // base point y\nconst _d = 37095705934669439343138083508754565189542113879843219016388785533085940283555n;\n/**\n * ed25519 curve parameters. Equation is \u2212x\u00B2 + y\u00B2 = -a + dx\u00B2y\u00B2.\n * Gx and Gy are generator coordinates. p is field order, n is group order.\n * h is cofactor.\n */\nconst CURVE = {\n    a: -1n, // -1 mod p\n    d: _d, // -(121665/121666) mod p\n    p: P, n: N, h: 8, Gx: Gx, Gy: Gy // field prime, curve (group) order, cofactor\n};\nconst err = (m = '') => { throw new Error(m); }; // error helper, messes-up stack trace\nconst isS = (s) => typeof s === 'string'; // is string\nconst isu8 = (a) => (a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array'));\nconst au8 = (a, l) => // is Uint8Array (of specific length)\n !isu8(a) || (typeof l === 'number' && l > 0 && a.length !== l) ?\n    err('Uint8Array of valid length expected') : a;\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst toU8 = (a, len) => au8(isS(a) ? h2b(a) : u8n(au8(a)), len); // norm(hex/u8a) to u8a\nconst M = (a, b = P) => { let r = a % b; return r >= 0n ? r : b + r; }; // mod division\nconst isPoint = (p) => (p instanceof Point ? p : err('Point expected')); // is xyzt point\n/** Point in xyzt extended coordinates. */\nclass Point {\n    constructor(ex, ey, ez, et) {\n        this.ex = ex;\n        this.ey = ey;\n        this.ez = ez;\n        this.et = et;\n    }\n    static fromAffine(p) { return new Point(p.x, p.y, 1n, M(p.x * p.y)); }\n    /** RFC8032 5.1.3: hex / Uint8Array to Point. */\n    static fromHex(hex, zip215 = false) {\n        const { d } = CURVE;\n        hex = toU8(hex, 32);\n        const normed = hex.slice(); // copy the array to not mess it up\n        const lastByte = hex[31];\n        normed[31] = lastByte & ~0x80; // adjust first LE byte = last BE byte\n        const y = b2n_LE(normed); // decode as little-endian, convert to num\n        if (zip215 && !(0n <= y && y < 2n ** 256n))\n            err('bad y coord 1'); // zip215=true  [1..2^256-1]\n        if (!zip215 && !(0n <= y && y < P))\n            err('bad y coord 2'); // zip215=false [1..P-1]\n        const y2 = M(y * y); // y\u00B2\n        const u = M(y2 - 1n); // u=y\u00B2-1\n        const v = M(d * y2 + 1n); // v=dy\u00B2+1\n        let { isValid, value: x } = uvRatio(u, v); // (uv\u00B3)(uv\u2077)^(p-5)/8; square root\n        if (!isValid)\n            err('bad y coordinate 3'); // not square root: bad point\n        const isXOdd = (x & 1n) === 1n; // adjust sign of x coordinate\n        const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n        if (!zip215 && x === 0n && isLastByteOdd)\n            err('bad y coord 3'); // x=0 and x_0 = 1\n        if (isLastByteOdd !== isXOdd)\n            x = M(-x);\n        return new Point(x, y, 1n, M(x * y)); // Z=1, T=xy\n    }\n    get x() { return this.toAffine().x; } // .x, .y will call expensive toAffine.\n    get y() { return this.toAffine().y; } // Should be used with care.\n    equals(other) {\n        const { ex: X1, ey: Y1, ez: Z1 } = this;\n        const { ex: X2, ey: Y2, ez: Z2 } = isPoint(other); // isPoint() checks class equality\n        const X1Z2 = M(X1 * Z2), X2Z1 = M(X2 * Z1);\n        const Y1Z2 = M(Y1 * Z2), Y2Z1 = M(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() { return this.equals(I); }\n    negate() {\n        return new Point(M(-this.ex), this.ey, this.ez, M(-this.et));\n    }\n    /** Point doubling. Complete formula. */\n    double() {\n        const { ex: X1, ey: Y1, ez: Z1 } = this; // Cost: 4M + 4S + 1*a + 6add + 1*2\n        const { a } = CURVE; // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        const A = M(X1 * X1);\n        const B = M(Y1 * Y1);\n        const C = M(2n * M(Z1 * Z1));\n        const D = M(a * A);\n        const x1y1 = X1 + Y1;\n        const E = M(M(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = M(E * F);\n        const Y3 = M(G * H);\n        const T3 = M(E * H);\n        const Z3 = M(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    /** Point addition. Complete formula. */\n    add(other) {\n        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this; // Cost: 8M + 1*k + 8add + 1*2.\n        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = isPoint(other); // doesn't check if other on-curve\n        const { a, d } = CURVE; // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n        const A = M(X1 * X2);\n        const B = M(Y1 * Y2);\n        const C = M(T1 * d * T2);\n        const D = M(Z1 * Z2);\n        const E = M((X1 + Y1) * (X2 + Y2) - A - B);\n        const F = M(D - C);\n        const G = M(D + C);\n        const H = M(B - a * A);\n        const X3 = M(E * F);\n        const Y3 = M(G * H);\n        const T3 = M(E * H);\n        const Z3 = M(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    mul(n, safe = true) {\n        if (n === 0n)\n            return safe === true ? err('cannot multiply by 0') : I;\n        if (!(typeof n === 'bigint' && 0n < n && n < N))\n            err('invalid scalar, must be < L');\n        if (!safe && this.is0() || n === 1n)\n            return this; // safe=true bans 0. safe=false allows 0.\n        if (this.equals(G))\n            return wNAF(n).p; // use wNAF precomputes for base points\n        let p = I, f = G; // init result point & fake point\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) { // double-and-add ladder\n            if (n & 1n)\n                p = p.add(d); // if bit is present, add to point\n            else if (safe)\n                f = f.add(d); // if not, add to fake for timing safety\n        }\n        return p;\n    }\n    multiply(scalar) { return this.mul(scalar); } // Aliases for compatibilty\n    clearCofactor() { return this.mul(BigInt(CURVE.h), false); } // multiply by cofactor\n    isSmallOrder() { return this.clearCofactor().is0(); } // check if P is small order\n    isTorsionFree() {\n        let p = this.mul(N / 2n, false).double(); // ensures the point is not \"bad\".\n        if (N % 2n)\n            p = p.add(this); // P^(N+1)             // P*N == (P*(N/2))*2+P\n        return p.is0();\n    }\n    /** converts point to 2d xy affine point. (x, y, z, t) \u220B (x=x/z, y=y/z, t=xy). */\n    toAffine() {\n        const { ex: x, ey: y, ez: z } = this;\n        if (this.equals(I))\n            return { x: 0n, y: 1n }; // fast-path for zero point\n        const iz = invert(z, P); // z^-1: invert z\n        if (M(z * iz) !== 1n)\n            err('invalid inverse'); // (z * z^-1) must be 1, otherwise bad math\n        return { x: M(x * iz), y: M(y * iz) }; // x = x*z^-1; y = y*z^-1\n    }\n    toRawBytes() {\n        const { x, y } = this.toAffine(); // convert to affine 2d point\n        const b = n2b_32LE(y); // encode number to 32 bytes\n        b[31] |= x & 1n ? 0x80 : 0; // store sign in first LE byte\n        return b;\n    }\n    toHex() { return b2h(this.toRawBytes()); } // encode to hex string\n}\n/** Generator / Base point */\nPoint.BASE = new Point(Gx, Gy, 1n, M(Gx * Gy));\n/** Identity / Zero point */\nPoint.ZERO = new Point(0n, 1n, 1n, 0n);\nconst { BASE: G, ZERO: I } = Point; // Generator, identity points\nconst padh = (num, pad) => num.toString(16).padStart(pad, '0');\nconst b2h = (b) => Array.from(au8(b)).map(e => padh(e, 2)).join(''); // bytes to hex\nconst C = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 }; // ASCII characters\nconst _ch = (ch) => {\n    if (ch >= C._0 && ch <= C._9)\n        return ch - C._0; // '2' => 50-48\n    if (ch >= C.A && ch <= C.F)\n        return ch - (C.A - 10); // 'B' => 66-(65-10)\n    if (ch >= C.a && ch <= C.f)\n        return ch - (C.a - 10); // 'b' => 98-(97-10)\n    return;\n};\nconst h2b = (hex) => {\n    const e = 'hex invalid';\n    if (!isS(hex))\n        return err(e);\n    const hl = hex.length, al = hl / 2;\n    if (hl % 2)\n        return err(e);\n    const array = u8n(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) { // treat each char as ASCII\n        const n1 = _ch(hex.charCodeAt(hi)); // parse first char, multiply it by 16\n        const n2 = _ch(hex.charCodeAt(hi + 1)); // parse second char\n        if (n1 === undefined || n2 === undefined)\n            return err(e);\n        array[ai] = n1 * 16 + n2; // example: 'A9' => 10*16 + 9\n    }\n    return array;\n};\nconst n2b_32LE = (num) => h2b(padh(num, 32 * 2)).reverse(); // number to bytes LE\nconst b2n_LE = (b) => BigInt('0x' + b2h(u8n(au8(b)).reverse())); // bytes LE to num\nconst concatB = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + au8(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\nconst invert = (num, md) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md); // no neg exponent for now\n    let a = M(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) { // uses euclidean gcd algorithm\n        const q = b / a, r = b % a; // not constant-time\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? M(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst pow2 = (x, power) => {\n    let r = x;\n    while (power-- > 0n) {\n        r *= r;\n        r %= P;\n    }\n    return r;\n};\nconst pow_2_252_3 = (x) => {\n    const x2 = (x * x) % P; // x^2,       bits 1\n    const b2 = (x2 * x) % P; // x^3,       bits 11\n    const b4 = (pow2(b2, 2n) * b2) % P; // x^(2^4-1), bits 1111\n    const b5 = (pow2(b4, 1n) * x) % P; // x^(2^5-1), bits 11111\n    const b10 = (pow2(b5, 5n) * b5) % P; // x^(2^10)\n    const b20 = (pow2(b10, 10n) * b10) % P; // x^(2^20)\n    const b40 = (pow2(b20, 20n) * b20) % P; // x^(2^40)\n    const b80 = (pow2(b40, 40n) * b40) % P; // x^(2^80)\n    const b160 = (pow2(b80, 80n) * b80) % P; // x^(2^160)\n    const b240 = (pow2(b160, 80n) * b80) % P; // x^(2^240)\n    const b250 = (pow2(b240, 10n) * b10) % P; // x^(2^250)\n    const pow_p_5_8 = (pow2(b250, 2n) * x) % P; // < To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n};\nconst RM1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n; // \u221A-1\nconst uvRatio = (u, v) => {\n    const v3 = M(v * v * v); // v\u00B3\n    const v7 = M(v3 * v3 * v); // v\u2077\n    const pow = pow_2_252_3(u * v7).pow_p_5_8; // (uv\u2077)^(p-5)/8\n    let x = M(u * v3 * pow); // (uv\u00B3)(uv\u2077)^(p-5)/8\n    const vx2 = M(v * x * x); // vx\u00B2\n    const root1 = x; // First root candidate\n    const root2 = M(x * RM1); // Second root candidate; RM1 is \u221A-1\n    const useRoot1 = vx2 === u; // If vx\u00B2 = u (mod p), x is a square root\n    const useRoot2 = vx2 === M(-u); // If vx\u00B2 = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === M(-u * RM1); // There is no valid root, vx\u00B2 = -u\u221A-1\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if ((M(x) & 1n) === 1n)\n        x = M(-x); // edIsNegative\n    return { isValid: useRoot1 || useRoot2, value: x };\n};\nconst modL_LE = (hash) => M(b2n_LE(hash), N); // modulo L; but little-endian\nlet _shaS;\nconst sha512a = (...m) => etc.sha512Async(...m); // Async SHA512\nconst sha512s = (...m) => // Sync SHA512, not set by default\n typeof _shaS === 'function' ? _shaS(...m) : err('etc.sha512Sync not set');\nconst hash2extK = (hashed) => {\n    const head = hashed.slice(0, 32); // slice creates a copy, unlike subarray\n    head[0] &= 248; // Clamp bits: 0b1111_1000,\n    head[31] &= 127; // 0b0111_1111,\n    head[31] |= 64; // 0b0100_0000\n    const prefix = hashed.slice(32, 64); // private key \"prefix\"\n    const scalar = modL_LE(head); // modular division over curve order\n    const point = G.mul(scalar); // public key point\n    const pointBytes = point.toRawBytes(); // point serialized to Uint8Array\n    return { head, prefix, scalar, point, pointBytes };\n};\n// RFC8032 5.1.5; getPublicKey async, sync. Hash priv key and extract point.\nconst getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, 32)).then(hash2extK);\nconst getExtendedPublicKey = (priv) => hash2extK(sha512s(toU8(priv, 32)));\n/** Creates 32-byte ed25519 public key from 32-byte private key. Async. */\nconst getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then(p => p.pointBytes);\n/** Creates 32-byte ed25519 public key from 32-byte private key. To use, set `etc.sha512Sync` first. */\nconst getPublicKey = (priv) => getExtendedPublicKey(priv).pointBytes;\nfunction hashFinish(asynchronous, res) {\n    if (asynchronous)\n        return sha512a(res.hashable).then(res.finish);\n    return res.finish(sha512s(res.hashable));\n}\nconst _sign = (e, rBytes, msg) => {\n    const { pointBytes: P, scalar: s } = e;\n    const r = modL_LE(rBytes); // r was created outside, reduce it modulo L\n    const R = G.mul(r).toRawBytes(); // R = [r]B\n    const hashable = concatB(R, P, msg); // dom2(F, C) || R || A || PH(M)\n    const finish = (hashed) => {\n        const S = M(r + modL_LE(hashed) * s, N); // S = (r + k * s) mod L; 0 <= s < l\n        return au8(concatB(R, n2b_32LE(S)), 64); // 64-byte sig: 32b R.x + 32b LE(S)\n    };\n    return { hashable, finish };\n};\n/** Signs message (NOT message hash) using private key. Async. */\nconst signAsync = async (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key async\n    const e = await getExtendedPublicKeyAsync(privKey); // pub,prfx\n    const rBytes = await sha512a(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(true, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\n/** Signs message (NOT message hash) using private key. To use, set `etc.sha512Sync` first. */\nconst sign = (msg, privKey) => {\n    const m = toU8(msg); // RFC8032 5.1.6: sign msg with key sync\n    const e = getExtendedPublicKey(privKey); // pub,prfx\n    const rBytes = sha512s(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinish(false, _sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst dvo = { zip215: true };\nconst _verify = (sig, msg, pub, opts = dvo) => {\n    sig = toU8(sig, 64); // Signature hex str/Bytes, must be 64 bytes\n    msg = toU8(msg); // Message hex str/Bytes\n    pub = toU8(pub, 32);\n    const { zip215 } = opts; // switch between zip215 and rfc8032 verif\n    let A, R, s, SB, hashable = new Uint8Array();\n    try {\n        A = Point.fromHex(pub, zip215); // public key A decoded\n        R = Point.fromHex(sig.slice(0, 32), zip215); // 0 <= R < 2^256: ZIP215 R can be >= P\n        s = b2n_LE(sig.slice(32, 64)); // Decode second half as an integer S\n        SB = G.mul(s, false); // in the range 0 <= s < L\n        hashable = concatB(R.toRawBytes(), A.toRawBytes(), msg); // dom2(F, C) || R || A || PH(M)\n    }\n    catch (error) { }\n    const finish = (hashed) => {\n        if (SB == null)\n            return false; // false if try-catch catched an error\n        if (!zip215 && A.isSmallOrder())\n            return false; // false for SBS: Strongly Binding Signature\n        const k = modL_LE(hashed); // decode in little-endian, modulo L\n        const RkA = R.add(A.mul(k, false)); // [8]R + [8][k]A'\n        return RkA.add(SB.negate()).clearCofactor().is0(); // [8][S]B = [8]R + [8][k]A'\n    };\n    return { hashable, finish };\n};\n// RFC8032 5.1.7: verification async, sync\n/** Verifies signature on message and public key. Async. */\nconst verifyAsync = async (s, m, p, opts = dvo) => hashFinish(true, _verify(s, m, p, opts));\n/** Verifies signature on message and public key. To use, set `etc.sha512Sync` first. */\nconst verify = (s, m, p, opts = dvo) => hashFinish(false, _verify(s, m, p, opts));\nconst cr = () => // We support: 1) browsers 2) node.js 19+\n typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n/** Math, hex, byte helpers. Not in `utils` because utils share API with noble-curves. */\nconst etc = {\n    bytesToHex: b2h,\n    hexToBytes: h2b,\n    concatBytes: concatB,\n    mod: M,\n    invert: invert,\n    randomBytes: (len = 32) => {\n        const c = cr(); // Can be shimmed in node.js <= 18 to prevent error:\n        // import { webcrypto } from 'node:crypto';\n        // if (!globalThis.crypto) globalThis.crypto = webcrypto;\n        if (!c || !c.getRandomValues)\n            err('crypto.getRandomValues must be defined');\n        return c.getRandomValues(u8n(len));\n    },\n    sha512Async: async (...messages) => {\n        const c = cr();\n        const s = c && c.subtle;\n        if (!s)\n            err('etc.sha512Async or crypto.subtle must be defined');\n        const m = concatB(...messages);\n        return u8n(await s.digest('SHA-512', m.buffer));\n    },\n    sha512Sync: undefined, // Actual logic below\n};\nObject.defineProperties(etc, { sha512Sync: {\n        configurable: false, get() { return _shaS; }, set(f) { if (!_shaS)\n            _shaS = f; },\n    } });\n/** ed25519-specific key utilities. */\nconst utils = {\n    getExtendedPublicKeyAsync: getExtendedPublicKeyAsync,\n    getExtendedPublicKey: getExtendedPublicKey,\n    randomPrivateKey: () => etc.randomBytes(32),\n    precompute: (w = 8, p = G) => { p.multiply(3n); w; return p; }, // no-op\n};\nconst W = 8; // Precomputes-related code. W = window size\nconst precompute = () => {\n    const points = []; // 10x sign(), 2x verify(). To achieve this,\n    const windows = 256 / W + 1; // app needs to spend 40ms+ to calculate\n    let p = G, b = p; // a lot of points related to base point G.\n    for (let w = 0; w < windows; w++) { // Points are stored in array and used\n        b = p; // any time Gx multiplication is done.\n        points.push(b); // They consume 16-32 MiB of RAM.\n        for (let i = 1; i < 2 ** (W - 1); i++) {\n            b = b.add(p);\n            points.push(b);\n        }\n        p = b.double(); // Precomputes don't speed-up getSharedKey,\n    } // which multiplies user point by scalar,\n    return points; // when precomputes are using base point\n};\nlet Gpows = undefined; // precomputes for base point G\nconst wNAF = (n) => {\n    // Compared to other point mult methods,\n    const comp = Gpows || (Gpows = precompute()); // stores 2x less points using subtraction\n    const neg = (cnd, p) => { let n = p.negate(); return cnd ? n : p; }; // negate\n    let p = I, f = G; // f must be G, or could become I in the end\n    const windows = 1 + 256 / W; // W=8 17 windows\n    const wsize = 2 ** (W - 1); // W=8 128 window size\n    const mask = BigInt(2 ** W - 1); // W=8 will create mask 0b11111111\n    const maxNum = 2 ** W; // W=8 256\n    const shiftBy = BigInt(W); // W=8 8\n    for (let w = 0; w < windows; w++) {\n        const off = w * wsize;\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > wsize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off1 = off, off2 = off + Math.abs(wbits) - 1; // offsets, evaluate both\n        const cnd1 = w % 2 !== 0, cnd2 = wbits < 0; // conditions, evaluate both\n        if (wbits === 0) {\n            f = f.add(neg(cnd1, comp[off1])); // bits are 0: add garbage to fake point\n        }\n        else { //          ^ can't add off2, off2 = I\n            p = p.add(neg(cnd2, comp[off2])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n}; // !! you can disable precomputes by commenting-out call of the wNAF() inside Point#mul()\nexport { getPublicKey, getPublicKeyAsync, sign, verify, // Remove the export to easily use in REPL\nsignAsync, verifyAsync, CURVE, etc, utils, Point as ExtendedPoint }; // envs like browser console\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes, type CHash, type Input } from './utils.ts';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    clean(pad);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  clone(): HMAC<T> {\n    return this._cloneInto();\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { type Input, Hash, abytes, aexists, aoutput, clean, createView, toBytes } from './utils.ts';\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/** Choice: a ? b : c */\nexport function Chi(a: number, b: number, c: number): number {\n  return (a & b) ^ (~a & c);\n}\n\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a: number, b: number, c: number): number {\n  return (a & b) ^ (a & c) ^ (b & c);\n}\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n\n  readonly blockLen: number;\n  readonly outputLen: number;\n  readonly padOffset: number;\n  readonly isLE: boolean;\n\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(blockLen: number, outputLen: number, padOffset: number, isLE: boolean) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { view, buffer, blockLen } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    clean(this.buffer.subarray(pos));\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.destroyed = destroyed;\n    to.finished = finished;\n    to.length = length;\n    to.pos = pos;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n  0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV: Uint32Array = /* @__PURE__ */ Uint32Array.from([\n  0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n  0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n", "/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\nimport { Chi, HashMD, Maj } from './_md.ts';\nimport { type CHash, clean, createHasher, rotl } from './utils.ts';\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n  0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n\n/** SHA1 legacy hash class. */\nexport class SHA1 extends HashMD<SHA1> {\n  private A = SHA1_IV[0] | 0;\n  private B = SHA1_IV[1] | 0;\n  private C = SHA1_IV[2] | 0;\n  private D = SHA1_IV[3] | 0;\n  private E = SHA1_IV[4] | 0;\n\n  constructor() {\n    super(64, 20, 8, false);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { A, B, C, D, E } = this;\n    return [A, B, C, D, E];\n  }\n  protected set(A: number, B: number, C: number, D: number, E: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) SHA1_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 80; i++)\n      SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n    // Compression function main loop, 80 rounds\n    let { A, B, C, D, E } = this;\n    for (let i = 0; i < 80; i++) {\n      let F, K;\n      if (i < 20) {\n        F = Chi(B, C, D);\n        K = 0x5a827999;\n      } else if (i < 40) {\n        F = B ^ C ^ D;\n        K = 0x6ed9eba1;\n      } else if (i < 60) {\n        F = Maj(B, C, D);\n        K = 0x8f1bbcdc;\n      } else {\n        F = B ^ C ^ D;\n        K = 0xca62c1d6;\n      }\n      const T = (rotl(A, 5) + F + E + K + SHA1_W[i]) | 0;\n      E = D;\n      D = C;\n      C = rotl(B, 30);\n      B = A;\n      A = T;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    this.set(A, B, C, D, E);\n  }\n  protected roundClean(): void {\n    clean(SHA1_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nexport const sha1: CHash = /* @__PURE__ */ createHasher(() => new SHA1());\n\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) =>\n  Math.floor(p32 * Math.abs(Math.sin(i + 1)))\n);\n\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nexport class MD5 extends HashMD<MD5> {\n  private A = MD5_IV[0] | 0;\n  private B = MD5_IV[1] | 0;\n  private C = MD5_IV[2] | 0;\n  private D = MD5_IV[3] | 0;\n\n  constructor() {\n    super(64, 16, 8, true);\n  }\n  protected get(): [number, number, number, number] {\n    const { A, B, C, D } = this;\n    return [A, B, C, D];\n  }\n  protected set(A: number, B: number, C: number, D: number): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) MD5_W[i] = view.getUint32(offset, true);\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D } = this;\n    for (let i = 0; i < 64; i++) {\n      let F, g, s;\n      if (i < 16) {\n        F = Chi(B, C, D);\n        g = i;\n        s = [7, 12, 17, 22];\n      } else if (i < 32) {\n        F = Chi(D, B, C);\n        g = (5 * i + 1) % 16;\n        s = [5, 9, 14, 20];\n      } else if (i < 48) {\n        F = B ^ C ^ D;\n        g = (3 * i + 5) % 16;\n        s = [4, 11, 16, 23];\n      } else {\n        F = C ^ (B | ~D);\n        g = (7 * i) % 16;\n        s = [6, 10, 15, 21];\n      }\n      F = F + A + K[i] + MD5_W[g];\n      A = D;\n      D = C;\n      C = B;\n      B = B + rotl(F, s[i % 4]);\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    this.set(A, B, C, D);\n  }\n  protected roundClean(): void {\n    clean(MD5_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nexport const md5: CHash = /* @__PURE__ */ createHasher(() => new MD5());\n\n// RIPEMD-160\n\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n  const L = [Id160];\n  const R = [Pi160];\n  const res = [L, R];\n  for (let i = 0; i < 4; i++) for (let j of res) j.push(j[i].map((k) => Rho160[k]));\n  return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\n\nconst shifts160 = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  if (group === 1) return (x & y) | (~x & z);\n  if (group === 2) return (x | ~y) ^ z;\n  if (group === 3) return (x & z) | (y & ~z);\n  return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number): void {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF_160[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean(): void {\n    clean(BUF_160);\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nexport const ripemd160: CHash = /* @__PURE__ */ createHasher(() => new RIPEMD160());\n", "/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n * @deprecated\n */\nimport { RIPEMD160 as RIPEMD160n, ripemd160 as ripemd160n } from './legacy.ts';\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const RIPEMD160: typeof RIPEMD160n = RIPEMD160n;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nexport const ripemd160: typeof ripemd160n = ripemd160n;\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from './_md.ts';\nimport * as u64 from './_u64.ts';\nimport { type CHash, clean, createHasher, rotr } from './utils.ts';\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor(outputLen: number = 32) {\n    super(64, outputLen, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    clean(SHA256_W);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    clean(this.buffer);\n  }\n}\n\nexport class SHA224 extends SHA256 {\n  protected A: number = SHA224_IV[0] | 0;\n  protected B: number = SHA224_IV[1] | 0;\n  protected C: number = SHA224_IV[2] | 0;\n  protected D: number = SHA224_IV[3] | 0;\n  protected E: number = SHA224_IV[4] | 0;\n  protected F: number = SHA224_IV[5] | 0;\n  protected G: number = SHA224_IV[6] | 0;\n  protected H: number = SHA224_IV[7] | 0;\n  constructor() {\n    super(28);\n  }\n}\n\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\n\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  // h -- high 32 bits, l -- low 32 bits\n  protected Ah: number = SHA512_IV[0] | 0;\n  protected Al: number = SHA512_IV[1] | 0;\n  protected Bh: number = SHA512_IV[2] | 0;\n  protected Bl: number = SHA512_IV[3] | 0;\n  protected Ch: number = SHA512_IV[4] | 0;\n  protected Cl: number = SHA512_IV[5] | 0;\n  protected Dh: number = SHA512_IV[6] | 0;\n  protected Dl: number = SHA512_IV[7] | 0;\n  protected Eh: number = SHA512_IV[8] | 0;\n  protected El: number = SHA512_IV[9] | 0;\n  protected Fh: number = SHA512_IV[10] | 0;\n  protected Fl: number = SHA512_IV[11] | 0;\n  protected Gh: number = SHA512_IV[12] | 0;\n  protected Gl: number = SHA512_IV[13] | 0;\n  protected Hh: number = SHA512_IV[14] | 0;\n  protected Hl: number = SHA512_IV[15] | 0;\n\n  constructor(outputLen: number = 64) {\n    super(128, outputLen, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ): void {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean(): void {\n    clean(SHA512_W_H, SHA512_W_L);\n  }\n  destroy(): void {\n    clean(this.buffer);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  protected Ah: number = SHA384_IV[0] | 0;\n  protected Al: number = SHA384_IV[1] | 0;\n  protected Bh: number = SHA384_IV[2] | 0;\n  protected Bl: number = SHA384_IV[3] | 0;\n  protected Ch: number = SHA384_IV[4] | 0;\n  protected Cl: number = SHA384_IV[5] | 0;\n  protected Dh: number = SHA384_IV[6] | 0;\n  protected Dl: number = SHA384_IV[7] | 0;\n  protected Eh: number = SHA384_IV[8] | 0;\n  protected El: number = SHA384_IV[9] | 0;\n  protected Fh: number = SHA384_IV[10] | 0;\n  protected Fl: number = SHA384_IV[11] | 0;\n  protected Gh: number = SHA384_IV[12] | 0;\n  protected Gl: number = SHA384_IV[13] | 0;\n  protected Hh: number = SHA384_IV[14] | 0;\n  protected Hl: number = SHA384_IV[15] | 0;\n\n  constructor() {\n    super(48);\n  }\n}\n\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n  0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n  0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n  0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n  0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\n\nexport class SHA512_224 extends SHA512 {\n  protected Ah: number = T224_IV[0] | 0;\n  protected Al: number = T224_IV[1] | 0;\n  protected Bh: number = T224_IV[2] | 0;\n  protected Bl: number = T224_IV[3] | 0;\n  protected Ch: number = T224_IV[4] | 0;\n  protected Cl: number = T224_IV[5] | 0;\n  protected Dh: number = T224_IV[6] | 0;\n  protected Dl: number = T224_IV[7] | 0;\n  protected Eh: number = T224_IV[8] | 0;\n  protected El: number = T224_IV[9] | 0;\n  protected Fh: number = T224_IV[10] | 0;\n  protected Fl: number = T224_IV[11] | 0;\n  protected Gh: number = T224_IV[12] | 0;\n  protected Gl: number = T224_IV[13] | 0;\n  protected Hh: number = T224_IV[14] | 0;\n  protected Hl: number = T224_IV[15] | 0;\n\n  constructor() {\n    super(28);\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  protected Ah: number = T256_IV[0] | 0;\n  protected Al: number = T256_IV[1] | 0;\n  protected Bh: number = T256_IV[2] | 0;\n  protected Bl: number = T256_IV[3] | 0;\n  protected Ch: number = T256_IV[4] | 0;\n  protected Cl: number = T256_IV[5] | 0;\n  protected Dh: number = T256_IV[6] | 0;\n  protected Dl: number = T256_IV[7] | 0;\n  protected Eh: number = T256_IV[8] | 0;\n  protected El: number = T256_IV[9] | 0;\n  protected Fh: number = T256_IV[10] | 0;\n  protected Fl: number = T256_IV[11] | 0;\n  protected Gh: number = T256_IV[12] | 0;\n  protected Gl: number = T256_IV[13] | 0;\n  protected Hh: number = T256_IV[14] | 0;\n  protected Hl: number = T256_IV[15] | 0;\n\n  constructor() {\n    super(32);\n  }\n}\n\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256: CHash = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224: CHash = /* @__PURE__ */ createHasher(() => new SHA224());\n\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512: CHash = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384: CHash = /* @__PURE__ */ createHasher(() => new SHA384());\n\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256: CHash = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224: CHash = /* @__PURE__ */ createHasher(() => new SHA512_224());\n", "/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA224 as SHA224n,\n  sha224 as sha224n,\n  SHA256 as SHA256n,\n  sha256 as sha256n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256: typeof SHA256n = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256: typeof sha256n = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224: typeof SHA224n = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224: typeof sha224n = sha224n;\n", "/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport {\n  SHA384 as SHA384n,\n  sha384 as sha384n,\n  sha512_224 as sha512_224n,\n  SHA512_224 as SHA512_224n,\n  sha512_256 as sha512_256n,\n  SHA512_256 as SHA512_256n,\n  SHA512 as SHA512n,\n  sha512 as sha512n,\n} from './sha2.ts';\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512: typeof SHA512n = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512: typeof sha512n = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384: typeof SHA384n = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384: typeof sha384n = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224: typeof SHA512_224n = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224: typeof sha512_224n = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256: typeof SHA512_256n = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256: typeof sha512_256n = sha512_256n;\n", "/*\nAttribution & Copyright Comments:\nOriginal work Copyright (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com)\nThis code is based on the original work by Patricio Palladino and Paul Miller.\nModifications Copyright (c) 2025, Allwin Ketnawang (getlea.org)\n\nThe MIT License (MIT)\n\nCopyright (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com)\nCopyright (c) 2025, Allwin Ketnawang (getlea.org)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201CSoftware\u201D), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201CAS IS\u201D, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nimport * as ed25519 from \"@noble/ed25519\";\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport {\n    bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes\n} from \"@noble/hashes/utils\";\n\ned25519.etc.sha512Sync = (...messages) => sha512(concatBytes(...messages));\n\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET = 0x80000000; // 2^31\nconst ZERO = new Uint8Array([0]); // Used for public key prefix\n\n/**\n * Helper function to ensure input is Uint8Array and validate length.\n * @param {Uint8Array | string} input - The input value (Uint8Array or hex string).\n * @param {...number} expectedLengths - Optional expected lengths for validation.\n * @returns {Uint8Array} The validated input as a Uint8Array.\n */\nfunction ensureBytes(input, ...expectedLengths) {\n    let bytes;\n    if (typeof input === 'string') {\n        try { bytes = hexToBytes(input); } catch (e) { throw new TypeError(`Invalid hex string: ${e instanceof Error ? e.message : e}`); }\n    } else if (input instanceof Uint8Array) {\n        bytes = input;\n    } else { throw new TypeError(`Input must be a Uint8Array or a hex string, got ${typeof input}`); }\n    if (expectedLengths.length > 0 && !expectedLengths.includes(bytes.length)) { throw new Error(`Invalid input length: ${bytes.length}. Expected one of: ${expectedLengths.join(', ')}`); }\n    return bytes;\n}\n\n/** BIP32 / SLIP-10 compatible hash160 (SHA256 -> RIPEMD160). */\nconst hash160 = (data) => ripemd160(sha256(data));\n/** Read Uint32BE from Uint8Array. */\nconst bytesToNumberBE = (bytes) => createView(bytes).getUint32(0, false);\n/** Write number to Uint32BE Uint8Array. */\nconst numberToBytesBE = (num) => {\n    if (!Number.isSafeInteger(num) || num < 0 || num >= 2 ** 32) { throw new Error(`Invalid number: ${num}. Must be >= 0 and < 2^32`); }\n    const buffer = new Uint8Array(4);\n    createView(buffer).setUint32(0, num, false); // Big Endian\n    return buffer;\n};\n\n/**\n * Represents an Ed25519 Hierarchical Deterministic Key based on SLIP-0010.\n * Focuses on key derivation; sign/verify operations should be done externally.\n */\nexport class HDKey {\n    /** @type {number} Derivation depth */\n    depth;\n    /** @type {number} Child index this key was derived with */\n    index;\n    /** @type {number} Fingerprint of the parent key */\n    parentFingerprint;\n    /** @type {Uint8Array} The 32-byte private key */\n    privateKey;\n    /** @type {Uint8Array} The 32-byte chain code */\n    chainCode;\n\n    /**\n     * Private constructor. Use HDKey.fromMasterSeed() to create instances.\n     * @param {object} options Internal options.\n     * @private\n     */\n    constructor(options) {\n        if (!(options.privateKey instanceof Uint8Array) || options.privateKey.length !== 32) { throw new TypeError(\"privateKey must be a 32-byte Uint8Array\"); }\n        if (!(options.chainCode instanceof Uint8Array) || options.chainCode.length !== 32) { throw new TypeError(\"chainCode must be a 32-byte Uint8Array\"); }\n        this.depth = options.depth ?? 0;\n        this.index = options.index ?? 0;\n        this.parentFingerprint = options.parentFingerprint ?? 0;\n        if (this.depth === 0) { if (this.parentFingerprint !== 0 || this.index !== 0) { throw new Error(\"Root key (depth 0) must have parentFingerprint and index set to 0\"); } }\n        this.privateKey = options.privateKey;\n        this.chainCode = options.chainCode;\n    }\n\n    /**\n     * Creates an HDKey from a master seed.\n     * @param {Uint8Array | string} seed - The master seed (bytes or hex string). Recommended: 32 bytes. Min: 16 bytes, Max: 64 bytes.\n     * @returns {HDKey} A new HDKey instance representing the master node (m).\n     */\n    static fromMasterSeed(seed) {\n        const seedBytes = ensureBytes(seed);\n        const seedLengthBits = seedBytes.length * 8;\n        if (seedLengthBits < 128 || seedLengthBits > 512) { throw new Error(`Invalid seed length: ${seedBytes.length} bytes (${seedLengthBits} bits). Must be between 128 and 512 bits.`); }\n        const I = hmac(sha512, MASTER_SECRET, seedBytes);\n        const privateKey = I.slice(0, 32);\n        const chainCode = I.slice(32, 64);\n        return new this({ privateKey: privateKey, chainCode: chainCode }); // 'this' refers to HDKey class\n    }\n\n    /** The raw 32-byte Ed25519 public key. */\n    get publicKeyRaw() {\n        // Requires ed25519.etc.sha512Sync to be set globally\n        return ed25519.getPublicKey(this.privateKey);\n    }\n\n    /** The public key prefixed with 0x00 (for SLIP-10 fingerprinting). */\n    get publicKey() {\n        return concatBytes(ZERO, this.publicKeyRaw);\n    }\n\n    /** The hash160 (SHA256 -> RIPEMD160) of the *prefixed* public key. */\n    get pubHash() {\n        return hash160(this.publicKey);\n    }\n\n    /** The fingerprint of the key (first 4 bytes of pubHash). */\n    get fingerprint() {\n        return bytesToNumberBE(this.pubHash.slice(0, 4));\n    }\n\n    /** Hex representation of the fingerprint. */\n    get fingerprintHex() {\n        return bytesToHex(numberToBytesBE(this.fingerprint));\n    }\n\n    /** Hex representation of the parent fingerprint. */\n    get parentFingerprintHex() {\n        return bytesToHex(numberToBytesBE(this.parentFingerprint));\n    }\n\n    /**\n     * Derives a child key based on a BIP32 path string (e.g., \"m/44'/501'/0'\").\n     * NOTE: Ed25519 SLIP-0010 only supports hardened derivation (using ').\n     * @param {string} path - The derivation path string. Must start with 'm'.\n     * @returns {HDKey} The derived HDKey instance.\n     */\n    derive(path) {\n        if (!/^[mM](?: H)?(\\/[0-9]+'?)*$/.test(path)) {\n            throw new Error('Invalid derivation path format. Expected \"m/...\" with hardened indices (e.g., \"m/44\\'/0\\'\").');\n        }\n        if (path === 'm' || path === 'M') { return this; }\n        const segments = path.replace(/^[mM]\\/?/, '').split('/');\n        let currentKey = this;\n        for (const segment of segments) {\n            const match = /^([0-9]+)('?)$/.exec(segment);\n            if (!match) { throw new Error(`Invalid path segment: ${segment}`); }\n            let index = parseInt(match[1], 10);\n            const isHardened = match[2] === \"'\";\n            if (!Number.isSafeInteger(index) || index >= HARDENED_OFFSET) { throw new Error(`Invalid index number: ${index}. Must be < 2^31.`); }\n            if (!isHardened) { throw new Error(`Non-hardened derivation (index ${index}) is not supported for Ed25519 SLIP-0010. Use hardened index (e.g., ${index}').`); }\n            index += HARDENED_OFFSET;\n            currentKey = currentKey.deriveChild(index);\n        }\n        return currentKey;\n    }\n\n    /**\n     * Derives a child key using a specific index.\n     * NOTE: Only hardened indices (index >= HARDENED_OFFSET) are supported for Ed25519 SLIP-0010.\n     * @param {number} index - The child index number. Must be >= HARDENED_OFFSET.\n     * @returns {HDKey} The derived HDKey instance.\n     */\n    deriveChild(index) {\n        if (!Number.isSafeInteger(index) || index < HARDENED_OFFSET || index >= 2 ** 32) { throw new Error(`Invalid index ${index}. Hardened index must be >= ${HARDENED_OFFSET} and < 2^32.`); }\n        const indexBytes = numberToBytesBE(index);\n        const data = concatBytes(ZERO, this.privateKey, indexBytes); // Data = 0x00 || kpar || ser32(i)\n        const I = hmac(sha512, this.chainCode, data); // I = HMAC-SHA512(Key = cpar, Data = data)\n        const childPrivateKey = I.slice(0, 32); // I_L\n        const childChainCode = I.slice(32, 64); // I_R\n        return new this.constructor({ // Use current class constructor\n            privateKey: childPrivateKey,\n            chainCode: childChainCode,\n            depth: this.depth + 1,\n            index: index,\n            parentFingerprint: this.fingerprint, // Current key's fingerprint\n        });\n    }\n\n    // Sign and Verify methods are intentionally removed.\n    // Use HDKey instance properties (.privateKey, .publicKeyRaw)\n    // with base @noble/ed25519 functions (sign, verify) externally.\n}", "/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\nimport { hmac } from './hmac.ts';\n// prettier-ignore\nimport {\n  ahash, anumber,\n  asyncLoop, checkOpts, clean, createView, Hash, kdfInputToBytes,\n  type CHash,\n  type KDFInput\n} from './utils.ts';\n\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: KDFInput, _salt: KDFInput, _opts: Pbkdf2Opt) {\n  ahash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  anumber(c);\n  anumber(dkLen);\n  anumber(asyncTick);\n  if (c < 1) throw new Error('iterations (c) should be >= 1');\n  const password = kdfInputToBytes(_password);\n  const salt = kdfInputToBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  clean(u);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nexport function pbkdf2(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Uint8Array {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + \u22EF + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ \u22EF ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc\u22121)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nexport async function pbkdf2Async(\n  hash: CHash,\n  password: KDFInput,\n  salt: KDFInput,\n  opts: Pbkdf2Opt\n): Promise<Uint8Array> {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + \u22EF + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ \u22EF ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc\u22121)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n", "import { sha256 } from '@noble/hashes/sha256';\nimport { pbkdf2 } from '@noble/hashes/pbkdf2';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { randomBytes } from '@noble/hashes/utils';\n\nconst englishWordlist = [\"abandon\", \"ability\", \"able\", \"about\", \"above\", \"absent\", \"absorb\", \"abstract\", \"absurd\", \"abuse\", \"access\", \"accident\", \"account\", \"accuse\", \"achieve\", \"acid\", \"acoustic\", \"acquire\", \"across\", \"act\", \"action\", \"actor\", \"actress\", \"actual\", \"adapt\", \"add\", \"addict\", \"address\", \"adjust\", \"admit\", \"adult\", \"advance\", \"advice\", \"aerobic\", \"affair\", \"afford\", \"afraid\", \"again\", \"age\", \"agent\", \"agree\", \"ahead\", \"aim\", \"air\", \"airport\", \"aisle\", \"alarm\", \"album\", \"alcohol\", \"alert\", \"alien\", \"all\", \"alley\", \"allow\", \"almost\", \"alone\", \"alpha\", \"already\", \"also\", \"alter\", \"always\", \"amateur\", \"amazing\", \"among\", \"amount\", \"amused\", \"analyst\", \"anchor\", \"ancient\", \"anger\", \"angle\", \"angry\", \"animal\", \"ankle\", \"announce\", \"annual\", \"another\", \"answer\", \"antenna\", \"antique\", \"anxiety\", \"any\", \"apart\", \"apology\", \"appear\", \"apple\", \"approve\", \"april\", \"arch\", \"arctic\", \"area\", \"arena\", \"argue\", \"arm\", \"armed\", \"armor\", \"army\", \"around\", \"arrange\", \"arrest\", \"arrive\", \"arrow\", \"art\", \"artefact\", \"artist\", \"artwork\", \"ask\", \"aspect\", \"assault\", \"asset\", \"assist\", \"assume\", \"asthma\", \"athlete\", \"atom\", \"attack\", \"attend\", \"attitude\", \"attract\", \"auction\", \"audit\", \"august\", \"aunt\", \"author\", \"auto\", \"autumn\", \"average\", \"avocado\", \"avoid\", \"awake\", \"aware\", \"away\", \"awesome\", \"awful\", \"awkward\", \"axis\", \"baby\", \"bachelor\", \"bacon\", \"badge\", \"bag\", \"balance\", \"balcony\", \"ball\", \"bamboo\", \"banana\", \"banner\", \"bar\", \"barely\", \"bargain\", \"barrel\", \"base\", \"basic\", \"basket\", \"battle\", \"beach\", \"bean\", \"beauty\", \"because\", \"become\", \"beef\", \"before\", \"begin\", \"behave\", \"behind\", \"believe\", \"below\", \"belt\", \"bench\", \"benefit\", \"best\", \"betray\", \"better\", \"between\", \"beyond\", \"bicycle\", \"bid\", \"bike\", \"bind\", \"biology\", \"bird\", \"birth\", \"bitter\", \"black\", \"blade\", \"blame\", \"blanket\", \"blast\", \"bleak\", \"bless\", \"blind\", \"blood\", \"blossom\", \"blouse\", \"blue\", \"blur\", \"blush\", \"board\", \"boat\", \"body\", \"boil\", \"bomb\", \"bone\", \"bonus\", \"book\", \"boost\", \"border\", \"boring\", \"borrow\", \"boss\", \"bottom\", \"bounce\", \"box\", \"boy\", \"bracket\", \"brain\", \"brand\", \"brass\", \"brave\", \"bread\", \"breeze\", \"brick\", \"bridge\", \"brief\", \"bright\", \"bring\", \"brisk\", \"broccoli\", \"broken\", \"bronze\", \"broom\", \"brother\", \"brown\", \"brush\", \"bubble\", \"buddy\", \"budget\", \"buffalo\", \"build\", \"bulb\", \"bulk\", \"bullet\", \"bundle\", \"bunker\", \"burden\", \"burger\", \"burst\", \"bus\", \"business\", \"busy\", \"butter\", \"buyer\", \"buzz\", \"cabbage\", \"cabin\", \"cable\", \"cactus\", \"cage\", \"cake\", \"call\", \"calm\", \"camera\", \"camp\", \"can\", \"canal\", \"cancel\", \"candy\", \"cannon\", \"canoe\", \"canvas\", \"canyon\", \"capable\", \"capital\", \"captain\", \"car\", \"carbon\", \"card\", \"cargo\", \"carpet\", \"carry\", \"cart\", \"case\", \"cash\", \"casino\", \"castle\", \"casual\", \"cat\", \"catalog\", \"catch\", \"category\", \"cattle\", \"caught\", \"cause\", \"caution\", \"cave\", \"ceiling\", \"celery\", \"cement\", \"census\", \"century\", \"cereal\", \"certain\", \"chair\", \"chalk\", \"champion\", \"change\", \"chaos\", \"chapter\", \"charge\", \"chase\", \"chat\", \"cheap\", \"check\", \"cheese\", \"chef\", \"cherry\", \"chest\", \"chicken\", \"chief\", \"child\", \"chimney\", \"choice\", \"choose\", \"chronic\", \"chuckle\", \"chunk\", \"churn\", \"cigar\", \"cinnamon\", \"circle\", \"citizen\", \"city\", \"civil\", \"claim\", \"clap\", \"clarify\", \"claw\", \"clay\", \"clean\", \"clerk\", \"clever\", \"click\", \"client\", \"cliff\", \"climb\", \"clinic\", \"clip\", \"clock\", \"clog\", \"close\", \"cloth\", \"cloud\", \"clown\", \"club\", \"clump\", \"cluster\", \"clutch\", \"coach\", \"coast\", \"coconut\", \"code\", \"coffee\", \"coil\", \"coin\", \"collect\", \"color\", \"column\", \"combine\", \"come\", \"comfort\", \"comic\", \"common\", \"company\", \"concert\", \"conduct\", \"confirm\", \"congress\", \"connect\", \"consider\", \"control\", \"convince\", \"cook\", \"cool\", \"copper\", \"copy\", \"coral\", \"core\", \"corn\", \"correct\", \"cost\", \"cotton\", \"couch\", \"country\", \"couple\", \"course\", \"cousin\", \"cover\", \"coyote\", \"crack\", \"cradle\", \"craft\", \"cram\", \"crane\", \"crash\", \"crater\", \"crawl\", \"crazy\", \"cream\", \"credit\", \"creek\", \"crew\", \"cricket\", \"crime\", \"crisp\", \"critic\", \"crop\", \"cross\", \"crouch\", \"crowd\", \"crucial\", \"cruel\", \"cruise\", \"crumble\", \"crunch\", \"crush\", \"cry\", \"crystal\", \"cube\", \"culture\", \"cup\", \"cupboard\", \"curious\", \"current\", \"curtain\", \"curve\", \"cushion\", \"custom\", \"cute\", \"cycle\", \"dad\", \"damage\", \"damp\", \"dance\", \"danger\", \"daring\", \"dash\", \"daughter\", \"dawn\", \"day\", \"deal\", \"debate\", \"debris\", \"decade\", \"december\", \"decide\", \"decline\", \"decorate\", \"decrease\", \"deer\", \"defense\", \"define\", \"defy\", \"degree\", \"delay\", \"deliver\", \"demand\", \"demise\", \"denial\", \"dentist\", \"deny\", \"depart\", \"depend\", \"deposit\", \"depth\", \"deputy\", \"derive\", \"describe\", \"desert\", \"design\", \"desk\", \"despair\", \"destroy\", \"detail\", \"detect\", \"develop\", \"device\", \"devote\", \"diagram\", \"dial\", \"diamond\", \"diary\", \"dice\", \"diesel\", \"diet\", \"differ\", \"digital\", \"dignity\", \"dilemma\", \"dinner\", \"dinosaur\", \"direct\", \"dirt\", \"disagree\", \"discover\", \"disease\", \"dish\", \"dismiss\", \"disorder\", \"display\", \"distance\", \"divert\", \"divide\", \"divorce\", \"dizzy\", \"doctor\", \"document\", \"dog\", \"doll\", \"dolphin\", \"domain\", \"donate\", \"donkey\", \"donor\", \"door\", \"dose\", \"double\", \"dove\", \"draft\", \"dragon\", \"drama\", \"drastic\", \"draw\", \"dream\", \"dress\", \"drift\", \"drill\", \"drink\", \"drip\", \"drive\", \"drop\", \"drum\", \"dry\", \"duck\", \"dumb\", \"dune\", \"during\", \"dust\", \"dutch\", \"duty\", \"dwarf\", \"dynamic\", \"eager\", \"eagle\", \"early\", \"earn\", \"earth\", \"easily\", \"east\", \"easy\", \"echo\", \"ecology\", \"economy\", \"edge\", \"edit\", \"educate\", \"effort\", \"egg\", \"eight\", \"either\", \"elbow\", \"elder\", \"electric\", \"elegant\", \"element\", \"elephant\", \"elevator\", \"elite\", \"else\", \"embark\", \"embody\", \"embrace\", \"emerge\", \"emotion\", \"employ\", \"empower\", \"empty\", \"enable\", \"enact\", \"end\", \"endless\", \"endorse\", \"enemy\", \"energy\", \"enforce\", \"engage\", \"engine\", \"enhance\", \"enjoy\", \"enlist\", \"enough\", \"enrich\", \"enroll\", \"ensure\", \"enter\", \"entire\", \"entry\", \"envelope\", \"episode\", \"equal\", \"equip\", \"era\", \"erase\", \"erode\", \"erosion\", \"error\", \"erupt\", \"escape\", \"essay\", \"essence\", \"estate\", \"eternal\", \"ethics\", \"evidence\", \"evil\", \"evoke\", \"evolve\", \"exact\", \"example\", \"excess\", \"exchange\", \"excite\", \"exclude\", \"excuse\", \"execute\", \"exercise\", \"exhaust\", \"exhibit\", \"exile\", \"exist\", \"exit\", \"exotic\", \"expand\", \"expect\", \"expire\", \"explain\", \"expose\", \"express\", \"extend\", \"extra\", \"eye\", \"eyebrow\", \"fabric\", \"face\", \"faculty\", \"fade\", \"faint\", \"faith\", \"fall\", \"false\", \"fame\", \"family\", \"famous\", \"fan\", \"fancy\", \"fantasy\", \"farm\", \"fashion\", \"fat\", \"fatal\", \"father\", \"fatigue\", \"fault\", \"favorite\", \"feature\", \"february\", \"federal\", \"fee\", \"feed\", \"feel\", \"female\", \"fence\", \"festival\", \"fetch\", \"fever\", \"few\", \"fiber\", \"fiction\", \"field\", \"figure\", \"file\", \"film\", \"filter\", \"final\", \"find\", \"fine\", \"finger\", \"finish\", \"fire\", \"firm\", \"first\", \"fiscal\", \"fish\", \"fit\", \"fitness\", \"fix\", \"flag\", \"flame\", \"flash\", \"flat\", \"flavor\", \"flee\", \"flight\", \"flip\", \"float\", \"flock\", \"floor\", \"flower\", \"fluid\", \"flush\", \"fly\", \"foam\", \"focus\", \"fog\", \"foil\", \"fold\", \"follow\", \"food\", \"foot\", \"force\", \"forest\", \"forget\", \"fork\", \"fortune\", \"forum\", \"forward\", \"fossil\", \"foster\", \"found\", \"fox\", \"fragile\", \"frame\", \"frequent\", \"fresh\", \"friend\", \"fringe\", \"frog\", \"front\", \"frost\", \"frown\", \"frozen\", \"fruit\", \"fuel\", \"fun\", \"funny\", \"furnace\", \"fury\", \"future\", \"gadget\", \"gain\", \"galaxy\", \"gallery\", \"game\", \"gap\", \"garage\", \"garbage\", \"garden\", \"garlic\", \"garment\", \"gas\", \"gasp\", \"gate\", \"gather\", \"gauge\", \"gaze\", \"general\", \"genius\", \"genre\", \"gentle\", \"genuine\", \"gesture\", \"ghost\", \"giant\", \"gift\", \"giggle\", \"ginger\", \"giraffe\", \"girl\", \"give\", \"glad\", \"glance\", \"glare\", \"glass\", \"glide\", \"glimpse\", \"globe\", \"gloom\", \"glory\", \"glove\", \"glow\", \"glue\", \"goat\", \"goddess\", \"gold\", \"good\", \"goose\", \"gorilla\", \"gospel\", \"gossip\", \"govern\", \"gown\", \"grab\", \"grace\", \"grain\", \"grant\", \"grape\", \"grass\", \"gravity\", \"great\", \"green\", \"grid\", \"grief\", \"grit\", \"grocery\", \"group\", \"grow\", \"grunt\", \"guard\", \"guess\", \"guide\", \"guilt\", \"guitar\", \"gun\", \"gym\", \"habit\", \"hair\", \"half\", \"hammer\", \"hamster\", \"hand\", \"happy\", \"harbor\", \"hard\", \"harsh\", \"harvest\", \"hat\", \"have\", \"hawk\", \"hazard\", \"head\", \"health\", \"heart\", \"heavy\", \"hedgehog\", \"height\", \"hello\", \"helmet\", \"help\", \"hen\", \"hero\", \"hidden\", \"high\", \"hill\", \"hint\", \"hip\", \"hire\", \"history\", \"hobby\", \"hockey\", \"hold\", \"hole\", \"holiday\", \"hollow\", \"home\", \"honey\", \"hood\", \"hope\", \"horn\", \"horror\", \"horse\", \"hospital\", \"host\", \"hotel\", \"hour\", \"hover\", \"hub\", \"huge\", \"human\", \"humble\", \"humor\", \"hundred\", \"hungry\", \"hunt\", \"hurdle\", \"hurry\", \"hurt\", \"husband\", \"hybrid\", \"ice\", \"icon\", \"idea\", \"identify\", \"idle\", \"ignore\", \"ill\", \"illegal\", \"illness\", \"image\", \"imitate\", \"immense\", \"immune\", \"impact\", \"impose\", \"improve\", \"impulse\", \"inch\", \"include\", \"income\", \"increase\", \"index\", \"indicate\", \"indoor\", \"industry\", \"infant\", \"inflict\", \"inform\", \"inhale\", \"inherit\", \"initial\", \"inject\", \"injury\", \"inmate\", \"inner\", \"innocent\", \"input\", \"inquiry\", \"insane\", \"insect\", \"inside\", \"inspire\", \"install\", \"intact\", \"interest\", \"into\", \"invest\", \"invite\", \"involve\", \"iron\", \"island\", \"isolate\", \"issue\", \"item\", \"ivory\", \"jacket\", \"jaguar\", \"jar\", \"jazz\", \"jealous\", \"jeans\", \"jelly\", \"jewel\", \"job\", \"join\", \"joke\", \"journey\", \"joy\", \"judge\", \"juice\", \"jump\", \"jungle\", \"junior\", \"junk\", \"just\", \"kangaroo\", \"keen\", \"keep\", \"ketchup\", \"key\", \"kick\", \"kid\", \"kidney\", \"kind\", \"kingdom\", \"kiss\", \"kit\", \"kitchen\", \"kite\", \"kitten\", \"kiwi\", \"knee\", \"knife\", \"knock\", \"know\", \"lab\", \"label\", \"labor\", \"ladder\", \"lady\", \"lake\", \"lamp\", \"language\", \"laptop\", \"large\", \"later\", \"latin\", \"laugh\", \"laundry\", \"lava\", \"law\", \"lawn\", \"lawsuit\", \"layer\", \"lazy\", \"leader\", \"leaf\", \"learn\", \"leave\", \"lecture\", \"left\", \"leg\", \"legal\", \"legend\", \"leisure\", \"lemon\", \"lend\", \"length\", \"lens\", \"leopard\", \"lesson\", \"letter\", \"level\", \"liar\", \"liberty\", \"library\", \"license\", \"life\", \"lift\", \"light\", \"like\", \"limb\", \"limit\", \"link\", \"lion\", \"liquid\", \"list\", \"little\", \"live\", \"lizard\", \"load\", \"loan\", \"lobster\", \"local\", \"lock\", \"logic\", \"lonely\", \"long\", \"loop\", \"lottery\", \"loud\", \"lounge\", \"love\", \"loyal\", \"lucky\", \"luggage\", \"lumber\", \"lunar\", \"lunch\", \"luxury\", \"lyrics\", \"machine\", \"mad\", \"magic\", \"magnet\", \"maid\", \"mail\", \"main\", \"major\", \"make\", \"mammal\", \"man\", \"manage\", \"mandate\", \"mango\", \"mansion\", \"manual\", \"maple\", \"marble\", \"march\", \"margin\", \"marine\", \"market\", \"marriage\", \"mask\", \"mass\", \"master\", \"match\", \"material\", \"math\", \"matrix\", \"matter\", \"maximum\", \"maze\", \"meadow\", \"mean\", \"measure\", \"meat\", \"mechanic\", \"medal\", \"media\", \"melody\", \"melt\", \"member\", \"memory\", \"mention\", \"menu\", \"mercy\", \"merge\", \"merit\", \"merry\", \"mesh\", \"message\", \"metal\", \"method\", \"middle\", \"midnight\", \"milk\", \"million\", \"mimic\", \"mind\", \"minimum\", \"minor\", \"minute\", \"miracle\", \"mirror\", \"misery\", \"miss\", \"mistake\", \"mix\", \"mixed\", \"mixture\", \"mobile\", \"model\", \"modify\", \"mom\", \"moment\", \"monitor\", \"monkey\", \"monster\", \"month\", \"moon\", \"moral\", \"more\", \"morning\", \"mosquito\", \"mother\", \"motion\", \"motor\", \"mountain\", \"mouse\", \"move\", \"movie\", \"much\", \"muffin\", \"mule\", \"multiply\", \"muscle\", \"museum\", \"mushroom\", \"music\", \"must\", \"mutual\", \"myself\", \"mystery\", \"myth\", \"naive\", \"name\", \"napkin\", \"narrow\", \"nasty\", \"nation\", \"nature\", \"near\", \"neck\", \"need\", \"negative\", \"neglect\", \"neither\", \"nephew\", \"nerve\", \"nest\", \"net\", \"network\", \"neutral\", \"never\", \"news\", \"next\", \"nice\", \"night\", \"noble\", \"noise\", \"nominee\", \"noodle\", \"normal\", \"north\", \"nose\", \"notable\", \"note\", \"nothing\", \"notice\", \"novel\", \"now\", \"nuclear\", \"number\", \"nurse\", \"nut\", \"oak\", \"obey\", \"object\", \"oblige\", \"obscure\", \"observe\", \"obtain\", \"obvious\", \"occur\", \"ocean\", \"october\", \"odor\", \"off\", \"offer\", \"office\", \"often\", \"oil\", \"okay\", \"old\", \"olive\", \"olympic\", \"omit\", \"once\", \"one\", \"onion\", \"online\", \"only\", \"open\", \"opera\", \"opinion\", \"oppose\", \"option\", \"orange\", \"orbit\", \"orchard\", \"order\", \"ordinary\", \"organ\", \"orient\", \"original\", \"orphan\", \"ostrich\", \"other\", \"outdoor\", \"outer\", \"output\", \"outside\", \"oval\", \"oven\", \"over\", \"own\", \"owner\", \"oxygen\", \"oyster\", \"ozone\", \"pact\", \"paddle\", \"page\", \"pair\", \"palace\", \"palm\", \"panda\", \"panel\", \"panic\", \"panther\", \"paper\", \"parade\", \"parent\", \"park\", \"parrot\", \"party\", \"pass\", \"patch\", \"path\", \"patient\", \"patrol\", \"pattern\", \"pause\", \"pave\", \"payment\", \"peace\", \"peanut\", \"pear\", \"peasant\", \"pelican\", \"pen\", \"penalty\", \"pencil\", \"people\", \"pepper\", \"perfect\", \"permit\", \"person\", \"pet\", \"phone\", \"photo\", \"phrase\", \"physical\", \"piano\", \"picnic\", \"picture\", \"piece\", \"pig\", \"pigeon\", \"pill\", \"pilot\", \"pink\", \"pioneer\", \"pipe\", \"pistol\", \"pitch\", \"pizza\", \"place\", \"planet\", \"plastic\", \"plate\", \"play\", \"please\", \"pledge\", \"pluck\", \"plug\", \"plunge\", \"poem\", \"poet\", \"point\", \"polar\", \"pole\", \"police\", \"pond\", \"pony\", \"pool\", \"popular\", \"portion\", \"position\", \"possible\", \"post\", \"potato\", \"pottery\", \"poverty\", \"powder\", \"power\", \"practice\", \"praise\", \"predict\", \"prefer\", \"prepare\", \"present\", \"pretty\", \"prevent\", \"price\", \"pride\", \"primary\", \"print\", \"priority\", \"prison\", \"private\", \"prize\", \"problem\", \"process\", \"produce\", \"profit\", \"program\", \"project\", \"promote\", \"proof\", \"property\", \"prosper\", \"protect\", \"proud\", \"provide\", \"public\", \"pudding\", \"pull\", \"pulp\", \"pulse\", \"pumpkin\", \"punch\", \"pupil\", \"puppy\", \"purchase\", \"purity\", \"purpose\", \"purse\", \"push\", \"put\", \"puzzle\", \"pyramid\", \"quality\", \"quantum\", \"quarter\", \"question\", \"quick\", \"quit\", \"quiz\", \"quote\", \"rabbit\", \"raccoon\", \"race\", \"rack\", \"radar\", \"radio\", \"rail\", \"rain\", \"raise\", \"rally\", \"ramp\", \"ranch\", \"random\", \"range\", \"rapid\", \"rare\", \"rate\", \"rather\", \"raven\", \"raw\", \"razor\", \"ready\", \"real\", \"reason\", \"rebel\", \"rebuild\", \"recall\", \"receive\", \"recipe\", \"record\", \"recycle\", \"reduce\", \"reflect\", \"reform\", \"refuse\", \"region\", \"regret\", \"regular\", \"reject\", \"relax\", \"release\", \"relief\", \"rely\", \"remain\", \"remember\", \"remind\", \"remove\", \"render\", \"renew\", \"rent\", \"reopen\", \"repair\", \"repeat\", \"replace\", \"report\", \"require\", \"rescue\", \"resemble\", \"resist\", \"resource\", \"response\", \"result\", \"retire\", \"retreat\", \"return\", \"reunion\", \"reveal\", \"review\", \"reward\", \"rhythm\", \"rib\", \"ribbon\", \"rice\", \"rich\", \"ride\", \"ridge\", \"rifle\", \"right\", \"rigid\", \"ring\", \"riot\", \"ripple\", \"risk\", \"ritual\", \"rival\", \"river\", \"road\", \"roast\", \"robot\", \"robust\", \"rocket\", \"romance\", \"roof\", \"rookie\", \"room\", \"rose\", \"rotate\", \"rough\", \"round\", \"route\", \"royal\", \"rubber\", \"rude\", \"rug\", \"rule\", \"run\", \"runway\", \"rural\", \"sad\", \"saddle\", \"sadness\", \"safe\", \"sail\", \"salad\", \"salmon\", \"salon\", \"salt\", \"salute\", \"same\", \"sample\", \"sand\", \"satisfy\", \"satoshi\", \"sauce\", \"sausage\", \"save\", \"say\", \"scale\", \"scan\", \"scare\", \"scatter\", \"scene\", \"scheme\", \"school\", \"science\", \"scissors\", \"scorpion\", \"scout\", \"scrap\", \"screen\", \"script\", \"scrub\", \"sea\", \"search\", \"season\", \"seat\", \"second\", \"secret\", \"section\", \"security\", \"seed\", \"seek\", \"segment\", \"select\", \"sell\", \"seminar\", \"senior\", \"sense\", \"sentence\", \"series\", \"service\", \"session\", \"settle\", \"setup\", \"seven\", \"shadow\", \"shaft\", \"shallow\", \"share\", \"shed\", \"shell\", \"sheriff\", \"shield\", \"shift\", \"shine\", \"ship\", \"shiver\", \"shock\", \"shoe\", \"shoot\", \"shop\", \"short\", \"shoulder\", \"shove\", \"shrimp\", \"shrug\", \"shuffle\", \"shy\", \"sibling\", \"sick\", \"side\", \"siege\", \"sight\", \"sign\", \"silent\", \"silk\", \"silly\", \"silver\", \"similar\", \"simple\", \"since\", \"sing\", \"siren\", \"sister\", \"situate\", \"six\", \"size\", \"skate\", \"sketch\", \"ski\", \"skill\", \"skin\", \"skirt\", \"skull\", \"slab\", \"slam\", \"sleep\", \"slender\", \"slice\", \"slide\", \"slight\", \"slim\", \"slogan\", \"slot\", \"slow\", \"slush\", \"small\", \"smart\", \"smile\", \"smoke\", \"smooth\", \"snack\", \"snake\", \"snap\", \"sniff\", \"snow\", \"soap\", \"soccer\", \"social\", \"sock\", \"soda\", \"soft\", \"solar\", \"soldier\", \"solid\", \"solution\", \"solve\", \"someone\", \"song\", \"soon\", \"sorry\", \"sort\", \"soul\", \"sound\", \"soup\", \"source\", \"south\", \"space\", \"spare\", \"spatial\", \"spawn\", \"speak\", \"special\", \"speed\", \"spell\", \"spend\", \"sphere\", \"spice\", \"spider\", \"spike\", \"spin\", \"spirit\", \"split\", \"spoil\", \"sponsor\", \"spoon\", \"sport\", \"spot\", \"spray\", \"spread\", \"spring\", \"spy\", \"square\", \"squeeze\", \"squirrel\", \"stable\", \"stadium\", \"staff\", \"stage\", \"stairs\", \"stamp\", \"stand\", \"start\", \"state\", \"stay\", \"steak\", \"steel\", \"stem\", \"step\", \"stereo\", \"stick\", \"still\", \"sting\", \"stock\", \"stomach\", \"stone\", \"stool\", \"story\", \"stove\", \"strategy\", \"street\", \"strike\", \"strong\", \"struggle\", \"student\", \"stuff\", \"stumble\", \"style\", \"subject\", \"submit\", \"subway\", \"success\", \"such\", \"sudden\", \"suffer\", \"sugar\", \"suggest\", \"suit\", \"summer\", \"sun\", \"sunny\", \"sunset\", \"super\", \"supply\", \"supreme\", \"sure\", \"surface\", \"surge\", \"surprise\", \"surround\", \"survey\", \"suspect\", \"sustain\", \"swallow\", \"swamp\", \"swap\", \"swarm\", \"swear\", \"sweet\", \"swift\", \"swim\", \"swing\", \"switch\", \"sword\", \"symbol\", \"symptom\", \"syrup\", \"system\", \"table\", \"tackle\", \"tag\", \"tail\", \"talent\", \"talk\", \"tank\", \"tape\", \"target\", \"task\", \"taste\", \"tattoo\", \"taxi\", \"teach\", \"team\", \"tell\", \"ten\", \"tenant\", \"tennis\", \"tent\", \"term\", \"test\", \"text\", \"thank\", \"that\", \"theme\", \"then\", \"theory\", \"there\", \"they\", \"thing\", \"this\", \"thought\", \"three\", \"thrive\", \"throw\", \"thumb\", \"thunder\", \"ticket\", \"tide\", \"tiger\", \"tilt\", \"timber\", \"time\", \"tiny\", \"tip\", \"tired\", \"tissue\", \"title\", \"toast\", \"tobacco\", \"today\", \"toddler\", \"toe\", \"together\", \"toilet\", \"token\", \"tomato\", \"tomorrow\", \"tone\", \"tongue\", \"tonight\", \"tool\", \"tooth\", \"top\", \"topic\", \"topple\", \"torch\", \"tornado\", \"tortoise\", \"toss\", \"total\", \"tourist\", \"toward\", \"tower\", \"town\", \"toy\", \"track\", \"trade\", \"traffic\", \"tragic\", \"train\", \"transfer\", \"trap\", \"trash\", \"travel\", \"tray\", \"treat\", \"tree\", \"trend\", \"trial\", \"tribe\", \"trick\", \"trigger\", \"trim\", \"trip\", \"trophy\", \"trouble\", \"truck\", \"true\", \"truly\", \"trumpet\", \"trust\", \"truth\", \"try\", \"tube\", \"tuition\", \"tumble\", \"tuna\", \"tunnel\", \"turkey\", \"turn\", \"turtle\", \"twelve\", \"twenty\", \"twice\", \"twin\", \"twist\", \"two\", \"type\", \"typical\", \"ugly\", \"umbrella\", \"unable\", \"unaware\", \"uncle\", \"uncover\", \"under\", \"undo\", \"unfair\", \"unfold\", \"unhappy\", \"uniform\", \"unique\", \"unit\", \"universe\", \"unknown\", \"unlock\", \"until\", \"unusual\", \"unveil\", \"update\", \"upgrade\", \"uphold\", \"upon\", \"upper\", \"upset\", \"urban\", \"urge\", \"usage\", \"use\", \"used\", \"useful\", \"useless\", \"usual\", \"utility\", \"vacant\", \"vacuum\", \"vague\", \"valid\", \"valley\", \"valve\", \"van\", \"vanish\", \"vapor\", \"various\", \"vast\", \"vault\", \"vehicle\", \"velvet\", \"vendor\", \"venture\", \"venue\", \"verb\", \"verify\", \"version\", \"very\", \"vessel\", \"veteran\", \"viable\", \"vibrant\", \"vicious\", \"victory\", \"video\", \"view\", \"village\", \"vintage\", \"violin\", \"virtual\", \"virus\", \"visa\", \"visit\", \"visual\", \"vital\", \"vivid\", \"vocal\", \"voice\", \"void\", \"volcano\", \"volume\", \"vote\", \"voyage\", \"wage\", \"wagon\", \"wait\", \"walk\", \"wall\", \"walnut\", \"want\", \"warfare\", \"warm\", \"warrior\", \"wash\", \"wasp\", \"waste\", \"water\", \"wave\", \"way\", \"wealth\", \"weapon\", \"wear\", \"weasel\", \"weather\", \"web\", \"wedding\", \"weekend\", \"weird\", \"welcome\", \"west\", \"wet\", \"whale\", \"what\", \"wheat\", \"wheel\", \"when\", \"where\", \"whip\", \"whisper\", \"wide\", \"width\", \"wife\", \"wild\", \"will\", \"win\", \"window\", \"wine\", \"wing\", \"wink\", \"winner\", \"winter\", \"wire\", \"wisdom\", \"wise\", \"wish\", \"witness\", \"wolf\", \"woman\", \"wonder\", \"wood\", \"wool\", \"word\", \"work\", \"world\", \"worry\", \"worth\", \"wrap\", \"wreck\", \"wrestle\", \"wrist\", \"write\", \"wrong\", \"yard\", \"year\", \"yellow\", \"you\", \"young\", \"youth\", \"zebra\", \"zero\", \"zone\", \"zoo\"];\n// Normalization (NFKD) is crucial for consistent lookups.\nconst wordlistMap = new Map(\n    englishWordlist.map((word, index) => {\n        const normalizedWord = word.normalize('NFKD');\n        return [normalizedWord, index];\n    })\n);\n\n// --- Constants ---\nconst BITS_PER_WORD = 11;\nconst PBKDF2_ROUNDS = 2048;\nconst PBKDF2_KEY_LENGTH = 64; // 512 bits\nconst SALT_PREFIX = \"mnemonic\";\n\n// Map word count to entropy bits and vice-versa for validation\nconst WORD_COUNT_TO_ENTROPY_BITS = { 12: 128, 15: 160, 18: 192, 21: 224, 24: 256 };\nconst ENTROPY_BITS_TO_WORD_COUNT = { 128: 12, 160: 15, 192: 18, 224: 21, 256: 24 };\n\n// Converts a Uint8Array to a binary string.\nfunction bytesToBinaryString(bytes) {\n    return Array.from(bytes, byte => byte.toString(2).padStart(8, '0')).join('');\n}\n\n// Converts a binary string back to a Uint8Array.\n// Input binary string length must be a multiple of 8.\nfunction binaryStringToBytes(bits) {\n    const bitsLength = bits.length;\n    if (bitsLength % 8 !== 0) {\n        throw new Error('Invalid binary string length: Must be a multiple of 8.');\n    }\n    const byteLength = bitsLength / 8;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < byteLength; i++) {\n        const byteSlice = bits.slice(i * 8, (i + 1) * 8);\n        bytes[i] = parseInt(byteSlice, 2);\n    }\n    return bytes;\n}\n\nfunction generateEntropy(strength) {\n    if (!ENTROPY_BITS_TO_WORD_COUNT[strength]) {\n        throw new Error(`Invalid entropy strength: ${strength} bits. Must correspond to 12, 15, 18, 21, or 24 words.`);\n    }\n    const bytesToGenerate = strength / 8;\n    try {\n        return randomBytes(bytesToGenerate);\n    } catch (error) {\n        throw new Error(`Failed to generate entropy. Secure random source unavailable or error occurred: ${error.message}`);\n    }\n}\n\n// Converts entropy (random bytes) to a BIP39 mnemonic phrase.\nfunction entropyToMnemonic(entropy) {\n    const entropyBitsLength = entropy.length * 8;\n    if (!ENTROPY_BITS_TO_WORD_COUNT[entropyBitsLength]) {\n        throw new Error(`Invalid entropy length: ${entropy.length} bytes (${entropyBitsLength} bits). Must correspond to 12, 15, 18, 21, or 24 words.`);\n    }\n\n    const entropyBinaryString = bytesToBinaryString(entropy);\n    const hash = sha256(entropy);\n    const hashBinaryString = bytesToBinaryString(hash);\n\n    // Checksum length is entropy length in bits / 32\n    const checksumBitsLength = entropyBitsLength / 32;\n    const checksumBits = hashBinaryString.slice(0, checksumBitsLength);\n\n    const totalBinaryString = entropyBinaryString + checksumBits;\n    const totalBitsLength = totalBinaryString.length;\n\n    // Each word represents 11 bits\n    if (totalBitsLength % BITS_PER_WORD !== 0) {\n        throw new Error(`Internal error: Total bits length (${totalBitsLength}) not divisible by ${BITS_PER_WORD}.`);\n    }\n\n    const wordCount = totalBitsLength / BITS_PER_WORD;\n    const words = [];\n    for (let i = 0; i < wordCount; i++) {\n        const chunk = totalBinaryString.slice(i * BITS_PER_WORD, (i + 1) * BITS_PER_WORD);\n        const index = parseInt(chunk, 2);\n        words.push(englishWordlist[index]);\n    }\n\n    return words.join(' ');\n}\n\n// Converts a BIP39 mnemonic phrase back to entropy. Validates checksum.\n// THIS FUNCTION IS USED FOR VALIDATION internally by mnemonicToSeed.\nfunction mnemonicToEntropy(mnemonic) {\n    // Perform basic check on input type\n    if (typeof mnemonic !== 'string' || mnemonic.length === 0) {\n        throw new Error('Invalid mnemonic: Input must be a non-empty string.');\n    }\n\n    const words = mnemonic.normalize('NFKD').trim().split(/\\s+/);\n    const wordCount = words.length;\n\n    const entropyBitsLength = WORD_COUNT_TO_ENTROPY_BITS[wordCount];\n    if (entropyBitsLength === undefined) {\n        throw new Error(`Invalid mnemonic word count: ${wordCount}. Must be 12, 15, 18, 21, or 24.`);\n    }\n\n    const indices = words.map((word, i) => {\n        // Normalize the input word for lookup against the normalized map keys\n        const normalizedWordForLookup = word.normalize('NFKD');\n        const indexFromMap = wordlistMap.get(normalizedWordForLookup);\n        if (indexFromMap === undefined) {\n            throw new Error(`Invalid mnemonic: Word at index ${i} not found in wordlist.`);\n        }\n        return indexFromMap;\n    });\n\n    const totalBinaryString = indices.map(index => index.toString(2).padStart(BITS_PER_WORD, '0')).join('');\n    const totalBitsLength = wordCount * BITS_PER_WORD;\n\n    // Checksum length is total bits / 33 (or entropy bits / 32)\n    const checksumBitsLength = totalBitsLength / 33;\n\n    const entropyBinaryString = totalBinaryString.slice(0, entropyBitsLength);\n    const checksumBitsFromMnemonic = totalBinaryString.slice(entropyBitsLength);\n\n    const derivedEntropyBytes = binaryStringToBytes(entropyBinaryString);\n\n    if (derivedEntropyBytes.length * 8 !== entropyBitsLength) {\n        throw new Error('Internal error: Derived entropy byte length mismatch during conversion.');\n    }\n\n    const hash = sha256(derivedEntropyBytes);\n    const hashBinaryString = bytesToBinaryString(hash);\n    const expectedChecksumBits = hashBinaryString.slice(0, checksumBitsLength);\n\n    if (checksumBitsFromMnemonic !== expectedChecksumBits) {\n        throw new Error('Invalid mnemonic: Checksum mismatch.');\n    }\n\n    return derivedEntropyBytes;\n}\n\n\n// --- Exported Functions ---\n\n// Generates a new BIP39 mnemonic phrase (English wordlist).\nexport function generateMnemonic(strength = 128) {\n    // generateEntropy handles strength validation\n    const entropy = generateEntropy(strength);\n    return entropyToMnemonic(entropy);\n}\n\n// Derives the BIP39 seed from a mnemonic phrase and optional passphrase.\n// Uses PBKDF2-HMAC-SHA512 with 2048 rounds.\n// VALIDATES the mnemonic before deriving the seed. Throws error if invalid.\nexport function mnemonicToSeed(mnemonic, passphrase = \"\") {\n    // This will throw an error if the mnemonic is invalid, preventing seed derivation.\n    mnemonicToEntropy(mnemonic);\n\n    // Normalize according to BIP39 recommendation (NFKD)\n    const normalizedMnemonic = mnemonic.normalize('NFKD'); // Mnemonic is already validated, but normalize again for PBKDF2 as per spec\n    const normalizedPassphrase = passphrase.normalize('NFKD');\n\n    const passwordBytes = new TextEncoder().encode(normalizedMnemonic); // Mnemonic is the \"password\"\n    const saltPrefixBytes = new TextEncoder().encode(SALT_PREFIX);\n    const passphraseBytes = new TextEncoder().encode(normalizedPassphrase);\n\n    // Construct the salt: salt = \"mnemonic\" + passphrase\n    const saltBytes = new Uint8Array(saltPrefixBytes.length + passphraseBytes.length);\n    saltBytes.set(saltPrefixBytes, 0);\n    saltBytes.set(passphraseBytes, saltPrefixBytes.length);\n\n    // PBKDF2-HMAC-SHA512\n    const seed = pbkdf2(sha512, passwordBytes, saltBytes, {\n        c: PBKDF2_ROUNDS,          // Iteration count\n        dkLen: PBKDF2_KEY_LENGTH   // Derived key length in bytes (64 bytes / 512 bits)\n    });\n\n    return seed;\n}", "'use strict';\n\n// --- Constants ---\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/** @type {number[]} */\nconst GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nconst BECH32M_CONST = 0x2bc830a3; // Using Bech32m checksum constant\n\n// --- Configuration for Your Blockchain (ADJUST THESE!) ---\n/** Represents the data type or version being encoded. */\nconst DATA_VERSION_BYTE = null; // Set to null if no version byte needed\n/** Minimum allowed length in bytes for the data being encoded (e.g., public key). */\nconst MIN_DATA_LENGTH_BYTES = 32; // <<< ADJUSTED FOR 32-byte PUBLIC KEY\n/** Maximum allowed length in bytes for the data being encoded (e.g., public key). */\nconst MAX_DATA_LENGTH_BYTES = 32; // <<< ADJUSTED FOR 32-byte PUBLIC KEY\n\n// BIP-173 constants (generally stay the same)\nconst MAX_BECH32_LENGTH = 90;\nconst MIN_HRP_LENGTH = 1;\nconst MAX_HRP_LENGTH = 83;\nconst CHECKSUM_LENGTH = 6;\n// Minimum Bech32 string length depends on HRP, version byte presence, and min data length\nconst MIN_BECH32_LENGTH = MIN_HRP_LENGTH + 1 /*sep*/ + (DATA_VERSION_BYTE !== null ? 1 : 0) + Math.ceil(MIN_DATA_LENGTH_BYTES * 8 / 5) + CHECKSUM_LENGTH;\n\n\n// --- Precomputed Character Lookup Map ---\n/** @type {Record<string, number>} */\nconst CHAR_MAP = {};\nfor (let i = 0; i < CHARSET.length; i++) {\n    const char = CHARSET[i];\n    // Add type assertion or check to satisfy TS2538\n    if (char === undefined) continue; // Should theoretically not happen\n    CHAR_MAP[char] = i;\n}\n\n// --- Internal Helper Functions ---\n\n/**\n * @private Calculates the polynomial modulus.\n * @param {Array<number>} values - Array of 5-bit values.\n * @returns {number} The polymod checksum state.\n */\nfunction polymod(values) {\n    let checksumState = 1;\n    for (let index = 0; index < values.length; ++index) {\n        const value = values[index];\n        if (value === undefined) continue; // Added check\n        const top = checksumState >> 25;\n        checksumState = (checksumState & 0x1ffffff) << 5 ^ value;\n        for (let i = 0; i < 5; ++i) {\n            // Check added implicitly by typing GENERATOR as number[]\n            // Explicit check added to satisfy TS2532\n            const genValue = GENERATOR[i];\n            if (((top >> i) & 1) && genValue !== undefined) { // <<< EXPLICIT CHECK HERE\n                checksumState ^= genValue;\n            }\n        }\n    }\n    return checksumState;\n}\n\n/**\n * @private Expands the HRP for checksum calculation.\n * @param {string} hrp - The human-readable part.\n * @returns {Array<number>} Expanded HRP values.\n */\nfunction hrpExpand(hrp) {\n    const expanded = new Array(hrp.length * 2 + 1);\n    let i = 0;\n    for (let index = 0; index < hrp.length; ++index) expanded[i++] = hrp.charCodeAt(index) >> 5;\n    expanded[i++] = 0;\n    for (let index = 0; index < hrp.length; ++index) expanded[i++] = hrp.charCodeAt(index) & 31;\n    return expanded;\n}\n\n/**\n * @private Verifies the BECH32M checksum.\n * @param {string} hrp - The human-readable part.\n * @param {Array<number>} dataWithChecksum - 5-bit data including checksum.\n * @returns {boolean} True if checksum is valid.\n */\nfunction verifyChecksum(hrp, dataWithChecksum) {\n    const expandedHrp = hrpExpand(hrp);\n    const combined = new Array(expandedHrp.length + dataWithChecksum.length);\n    let k = 0;\n    for (let i = 0; i < expandedHrp.length; i++) combined[k++] = expandedHrp[i];\n    for (let i = 0; i < dataWithChecksum.length; i++) combined[k++] = dataWithChecksum[i];\n    return polymod(combined) === BECH32M_CONST;\n}\n\n/**\n * @private Creates the BECH32M checksum.\n * @param {string} hrp - The human-readable part.\n * @param {Array<number>} data5bitWithVersion - 5-bit data (potentially including version byte).\n * @returns {Array<number>} The 6-element checksum array.\n */\nfunction createChecksum(hrp, data5bitWithVersion) {\n    const expandedHrp = hrpExpand(hrp);\n    const values = new Array(expandedHrp.length + data5bitWithVersion.length + CHECKSUM_LENGTH);\n    let k = 0;\n    for (let i = 0; i < expandedHrp.length; i++) values[k++] = expandedHrp[i];\n    for (let i = 0; i < data5bitWithVersion.length; i++) values[k++] = data5bitWithVersion[i];\n    for (let i = 0; i < CHECKSUM_LENGTH; i++) values[k++] = 0; // Checksum placeholder\n\n    const mod = polymod(values) ^ BECH32M_CONST;\n    const checksum = new Array(CHECKSUM_LENGTH);\n    for (let i = 0; i < CHECKSUM_LENGTH; ++i) {\n        checksum[i] = (mod >> 5 * (CHECKSUM_LENGTH - 1 - i)) & 31;\n    }\n    return checksum;\n}\n\n/**\n * @private Converts bits from one base to another.\n * @param {Array<number> | Uint8Array} inputData - Data to convert.\n * @param {number} frombits - Input bit size (e.g., 8).\n * @param {number} tobits - Output bit size (e.g., 5).\n * @param {boolean} pad - Whether to pad output.\n * @returns {Array<number>} Converted data.\n * @throws {Error} If input values or padding are invalid.\n */\nfunction convertbits(inputData, frombits, tobits, pad) {\n    let acc = 0;\n    let bits = 0;\n    const ret = [];\n    const maxv = (1 << tobits) - 1;\n    const max_acc = (1 << (frombits + tobits - 1)) - 1;\n\n    for (let index = 0; index < inputData.length; ++index) {\n        const value = inputData[index];\n        if (value === undefined || value < 0 || (value >> frombits) !== 0) {\n            throw new Error(`Invalid value in convertbits: ${value}`);\n        }\n        acc = ((acc << frombits) | value) & max_acc;\n        bits += frombits;\n        while (bits >= tobits) {\n            bits -= tobits;\n            ret.push((acc >> bits) & maxv);\n        }\n    }\n\n    if (pad) {\n        if (bits > 0) {\n            ret.push((acc << (tobits - bits)) & maxv);\n        }\n    } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n        throw new Error(\"Invalid padding/conversion in convertbits\");\n    }\n    return ret;\n}\n\n/**\n * @private Internal: Encodes HRP and 5-bit data (optionally prepends version).\n * @param {string} hrp - The human-readable part.\n * @param {Array<number>} data5bit - 5-bit data array.\n * @returns {string} Encoded Bech32m string.\n */\nfunction _encodeBech32mData(hrp, data5bit) {\n    // Prepend version byte if configured\n    const data5bitWithVersion = (DATA_VERSION_BYTE !== null)\n        ? [DATA_VERSION_BYTE, ...data5bit]\n        : [...data5bit];\n\n    const checksum = createChecksum(hrp, data5bitWithVersion);\n\n    const combined = new Array(data5bitWithVersion.length + checksum.length);\n    let k = 0;\n    for (let i = 0; i < data5bitWithVersion.length; i++) combined[k++] = data5bitWithVersion[i];\n    for (let i = 0; i < checksum.length; i++) combined[k++] = checksum[i];\n\n    let ret = hrp + '1';\n    for (let index = 0; index < combined.length; ++index) {\n        const charIndex = combined[index];\n        if (charIndex === undefined) throw new Error(\"Undefined index in combined data\"); // Added check\n        ret += CHARSET.charAt(charIndex);\n    }\n    return ret;\n}\n\n/**\n * @private Internal: Decodes and validates BECH32M string (syntax, checksum, version).\n * @param {string} bechString - The Bech32m string.\n * @returns {{ hrp: string; data5bitWithVersionAndChecksum: Array<number>; version: number | null }} Decoded parts.\n * @throws {Error} If string is invalid.\n */\nfunction _decodeBech32mDataAndValidate(bechString) {\n    if (typeof bechString !== 'string') throw new Error(\"Input must be a string.\");\n\n    let has_lower = false, has_upper = false;\n    for (let index = 0; index < bechString.length; ++index) {\n        const charCode = bechString.charCodeAt(index);\n        if (charCode < 33 || charCode > 126) throw new Error(`Invalid character: ${bechString[index]}`);\n        if (charCode >= 97 && charCode <= 122) has_lower = true;\n        else if (charCode >= 65 && charCode <= 90) has_upper = true;\n    }\n    if (has_lower && has_upper) throw new Error(\"Mixed case detected.\");\n\n    const lowerBechString = bechString.toLowerCase();\n    const sepPos = lowerBechString.lastIndexOf('1');\n\n    // Use calculated MIN_BECH32_LENGTH\n    if (sepPos < MIN_HRP_LENGTH || sepPos + 1 + CHECKSUM_LENGTH > lowerBechString.length ||\n        lowerBechString.length > MAX_BECH32_LENGTH || lowerBechString.length < MIN_BECH32_LENGTH) {\n        throw new Error(`Invalid structure or length (min: ${MIN_BECH32_LENGTH}, max: ${MAX_BECH32_LENGTH}, got: ${lowerBechString.length})`);\n    }\n\n    const hrp = lowerBechString.substring(0, sepPos);\n    const data5bitWithVersionAndChecksum = [];\n    for (let index = sepPos + 1; index < lowerBechString.length; ++index) {\n        const char = lowerBechString.charAt(index);\n        const charValue = CHAR_MAP[char]; // Uses typed CHAR_MAP\n        if (charValue === undefined) throw new Error(`Invalid data character: ${char}`);\n        data5bitWithVersionAndChecksum.push(charValue);\n    }\n\n    if (!verifyChecksum(hrp, data5bitWithVersionAndChecksum)) {\n        throw new Error(\"Checksum verification failed.\");\n    }\n\n    // Check minimum length for encoded data part\n    const expectedMinDataPartLen = (DATA_VERSION_BYTE !== null ? 1 : 0) + Math.ceil(MIN_DATA_LENGTH_BYTES * 8 / 5) + CHECKSUM_LENGTH;\n    if (data5bitWithVersionAndChecksum.length < expectedMinDataPartLen) {\n        throw new Error(`Decoded data part too short (${data5bitWithVersionAndChecksum.length} < ${expectedMinDataPartLen}).`);\n    }\n\n    /** @type {number | null} */\n    let version = null;\n    if (DATA_VERSION_BYTE !== null) {\n        // Explicitly handle potential undefined from array access before assigning to 'version'\n        const firstVal = data5bitWithVersionAndChecksum[0];\n        version = (firstVal === undefined) ? null : firstVal; // <<< FIX HERE: Assign null if undefined\n\n        if (version === null || version !== DATA_VERSION_BYTE) { // <<< FIX HERE: Check against null\n            throw new Error(`Unsupported version: expected ${DATA_VERSION_BYTE}, got ${version}`);\n        }\n    }\n\n    return { hrp: hrp, data5bitWithVersionAndChecksum: data5bitWithVersionAndChecksum, version: version };\n}\n\n// --- Exported Functions ---\n\n/**\n * Decodes a BECH32M string into its HRP and data bytes.\n * Throws an error if the address is invalid, has the wrong HRP, or fails validation.\n *\n * @param {string} expectedHrp - The expected human-readable part.\n * @param {string} bech32mString - The BECH32M address string.\n * @returns {{ dataBytes: Array<number> }} The decoded 8-bit data bytes.\n * @throws {Error} If decoding fails or validation checks do not pass.\n * @export\n */\nexport function decode(expectedHrp, bech32mString) {\n    const decodedParts = _decodeBech32mDataAndValidate(bech32mString);\n\n    if (decodedParts.hrp !== expectedHrp) {\n        throw new Error(`Mismatched HRP: expected '${expectedHrp}', got '${decodedParts.hrp}'`);\n    }\n\n    // Determine where the actual data starts (after version byte, if any) and ends (before checksum)\n    const dataStartIndex = (DATA_VERSION_BYTE !== null) ? 1 : 0;\n    const dataEndIndex = decodedParts.data5bitWithVersionAndChecksum.length - CHECKSUM_LENGTH;\n\n    const data5bit = decodedParts.data5bitWithVersionAndChecksum.slice(dataStartIndex, dataEndIndex);\n    const dataBytes = convertbits(data5bit, 5, 8, false); // Throws on error\n\n    // Validate decoded data length against configured limits\n    if (dataBytes.length < MIN_DATA_LENGTH_BYTES || dataBytes.length > MAX_DATA_LENGTH_BYTES) {\n        throw new Error(`Invalid decoded data length: ${dataBytes.length} bytes (must be between ${MIN_DATA_LENGTH_BYTES} and ${MAX_DATA_LENGTH_BYTES})`);\n    }\n\n    return { dataBytes: dataBytes };\n}\n\n/**\n * Encodes HRP and data bytes into a BECH32M string.\n * Throws an error if inputs are invalid.\n *\n * @param {string} hrp - The human-readable part (lowercase, 1-83 chars).\n * @param {Uint8Array | Array<number>} dataBytes - The data to encode (array of 8-bit values). Length must be within configured min/max.\n * @returns {string} The encoded BECH32M string.\n * @throws {Error} If inputs are invalid (HRP, dataBytes) or encoding fails.\n * @export\n */\nexport function encode(hrp, dataBytes) {\n    // HRP validation\n    if (typeof hrp !== 'string' || hrp.length < MIN_HRP_LENGTH || hrp.length > MAX_HRP_LENGTH) {\n        throw new Error(`Invalid HRP length: ${hrp?.length}`);\n    }\n    for (let i = 0; i < hrp.length; ++i) {\n        const charCode = hrp.charCodeAt(i);\n        if (charCode < 33 || charCode > 126) throw new Error(`Invalid HRP character code: ${charCode}`);\n        if (charCode >= 65 && charCode <= 90) throw new Error(`Invalid HRP character case: ${hrp[i]}`);\n    }\n\n    // Data validation (type, length, content)\n    if (!dataBytes || typeof dataBytes.length !== 'number') throw new Error(\"Invalid dataBytes type.\");\n    if (dataBytes.length < MIN_DATA_LENGTH_BYTES || dataBytes.length > MAX_DATA_LENGTH_BYTES) {\n        throw new Error(`Invalid dataBytes length: ${dataBytes.length} (must be between ${MIN_DATA_LENGTH_BYTES} and ${MAX_DATA_LENGTH_BYTES})`);\n    }\n    // Check elements are valid bytes\n    const dataBytesArray = (dataBytes instanceof Uint8Array) ? dataBytes : Uint8Array.from(dataBytes);\n    for (let i = 0; i < dataBytesArray.length; ++i) {\n        const byte = dataBytesArray[i];\n        if (byte === undefined || typeof byte !== 'number' || !Number.isInteger(byte) || byte < 0 || byte > 255) {\n            throw new Error(`Invalid data byte at index ${i}: ${byte}`);\n        }\n    }\n\n\n    const data5bit = convertbits(dataBytesArray, 8, 5, true); // Throws on error\n    const encodedString = _encodeBech32mData(hrp, data5bit);\n\n    // Final length check safeguard\n    if (encodedString.length > MAX_BECH32_LENGTH) {\n        throw new Error(`Internal error: Generated string exceeds max length (${encodedString.length})`);\n    }\n\n    return encodedString;\n}\n", "/**\n * Defines constants used throughout the Lea blockchain library.\n */\n\n/**\n * The SLIP-0044 coin type assigned to the Lea blockchain.\n * This is used in BIP-44 derivation paths (m/44'/COIN_TYPE'/...).\n * Make sure this is the officially registered or chosen number for your chain.\n * Remember that hardened derivation (apostrophe ') is required by SLIP-0010 for Ed25519 keys.\n * Example value used: 2323\n */\nexport const LEA_COIN_TYPE = 2323;\n\n/**\n * Default derivation path structure base for accounts (SLIP-0010 compatible).\n * Example: \"m/44'/COIN_TYPE'\" - The account index will be appended.\n */\nexport const DEFAULT_ACCOUNT_DERIVATION_BASE = `m/44'/${LEA_COIN_TYPE}'`;\n\n/**\n * Default Bech32m Human-Readable Part (HRP) for Lea addresses.\n * Example: 'lea'\n */\nexport const ADDRESS_HRP = 'lea';\n\n// Add other constants as needed:\n// export const DEFAULT_RPC_ENDPOINT = 'http://localhost:8899';\n// export const NETWORK_ID = 'lea-mainnet';\n// export const WS_ENDPOINT = 'ws://localhost:8900';", "import { verify } from '@noble/ed25519'; // Import the verify function\nimport { encode as bech32mEncode, decode as bech32mDecode } from './bech32m.js';\nimport { ADDRESS_HRP } from './constants.js';\n\nexport class PublicKey {\n    #bytes;\n\n    constructor(value) {\n        if (typeof value === 'string') {\n            try {\n                const decoded = bech32mDecode(ADDRESS_HRP, value);\n                this.#bytes = Uint8Array.from(decoded.dataBytes);\n            } catch (e) {\n                let errorMessage = \"Invalid Bech32m address format\";\n                if (e instanceof Error) {\n                    errorMessage += `: ${value}. ${e.message}`;\n                } else {\n                    errorMessage += `: ${value}. An unknown error occurred during decoding.`;\n                }\n                throw new Error(errorMessage);\n            }\n        } else if (value instanceof Uint8Array) {\n            if (value.length !== 32) {\n                throw new Error(`Public key bytes must be 32 bytes long, received ${value.length}`);\n            }\n            this.#bytes = Uint8Array.from(value);\n        } else {\n            throw new Error(\"Invalid input type for PublicKey constructor. Must be Uint8Array or Bech32m string.\");\n        }\n    }\n\n    async verify(message, signature) {\n        try {\n            const isValid = await verify(signature, message, this.#bytes);\n            return isValid;\n        } catch (error) {\n            console.error(\"Signature verification failed:\", error);\n            return false;\n        }\n    }\n\n    toBytes() {\n        return Uint8Array.from(this.#bytes);\n    }\n\n    toString() {\n        try {\n            return bech32mEncode(ADDRESS_HRP, this.#bytes);\n        } catch (error) {\n            console.error(\"PublicKey Bech32m encoding failed:\", error);\n            throw new Error(\"Failed to encode public key as Bech32m.\");\n        }\n    }\n\n    equals(other) {\n        if (!other || typeof other.toBytes !== 'function') {\n            return false;\n        }\n        const otherBytes = other.toBytes();\n        if (this.#bytes.length !== otherBytes.length) {\n            return false;\n        }\n        for (let i = 0; i < this.#bytes.length; i++) {\n            if (this.#bytes[i] !== otherBytes[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n//export const PublicKey = (publicKey) => {\n//    return new PublicKeyImpl(publicKey);\n//};", "import { etc, sign, getPublicKey, utils } from '@noble/ed25519';\nimport { sha512 } from '@noble/hashes/sha2.js'\nimport { concatBytes } from \"@noble/hashes/utils\";\nimport { PublicKey } from './publickey.js';\nimport { randomBytes } from '@noble/hashes/utils';\n\netc.sha512Sync = (...messages) => sha512(concatBytes(...messages));\n\nexport class KeypairImpl {\n    #publicKeyInstance;\n    #secretKeyBytes;\n\n    constructor(publicKeyInstance, secretKeyBytes) {\n        this.#publicKeyInstance = publicKeyInstance;\n        this.#secretKeyBytes = secretKeyBytes;\n    }\n\n    get publicKey() {\n        return this.#publicKeyInstance;\n    }\n\n    get secretKey() {\n        return Uint8Array.from(this.#secretKeyBytes.slice(0, 32));\n    }\n\n    async sign(message) {\n        const signature = await sign(message, this.secretKey);\n        return signature;\n    }\n}\n\nconst Keypair = {\n    generate: () => {\n        const randomSeed = randomBytes(32);\n        const publicKeyBytes = getPublicKey(randomSeed);\n        const publicKeyInstance = new PublicKey(publicKeyBytes);\n        return new KeypairImpl(publicKeyInstance, randomSeed);\n    },\n    fromSecretKey: (secretKey) => {\n        if (!secretKey || secretKey.length !== 32) {\n            throw new Error(\"Secret key must be 32 bytes.\");\n        }\n        const publicKeyBytes = getPublicKey(secretKey);\n        const publicKeyInstance = new PublicKey(publicKeyBytes);\n        return new KeypairImpl(publicKeyInstance, secretKey);\n    }\n};\n\nexport { Keypair };", "import { HDKey } from './hd.js';\nimport { mnemonicToSeed } from './bip39.js'\nimport { Keypair } from './keypair.js';\nimport { DEFAULT_ACCOUNT_DERIVATION_BASE } from './constants.js';\n\n\n/**\n * Implements the Wallet interface for managing HD keys using @scure/bip39.\n * @implements {WalletDef}\n */\nclass WalletImpl {\n    /**\n     * The master HDKey derived from the seed.\n     * @type {HDKey}\n     */\n    #masterKey;\n\n    /**\n     * Creates an instance of WalletImpl. Use Wallet.fromMnemonic.\n     * @param {HDKey} masterKey - The master HDKey object.\n     * @hideconstructor\n     */\n    constructor(masterKey) {\n        if (!(masterKey instanceof HDKey)) {\n            throw new Error(\"Invalid masterKey provided to WalletImpl constructor.\");\n        }\n        this.#masterKey = masterKey;\n    }\n\n    /**\n     * Derives a Keypair using a BIP-44 derivation path string.\n     * @param {string} path - The derivation path (e.g., \"m/44'/2323'/0'/0'\").\n     * @returns {KeypairDef} The derived Keypair.\n     * @throws {Error} if the path is invalid or derivation fails.\n     */\n    deriveAccount(path) {\n        try {\n            const derivedHDKey = this.#masterKey.derive(path);\n            // Assumes Keypair.fromSecretKey handles public key derivation\n            return Keypair.fromSecretKey(derivedHDKey.privateKey);\n        } catch (error) {\n            console.error(`Error deriving account for path ${path}:`, error);\n            throw new Error(`Failed to derive account for path ${path}.`);\n        }\n    }\n\n    /**\n     * Derives a Keypair using a simple account index based on SLIP-0010 pattern.\n     * Uses the path `m/44'/COIN_TYPE'/{index}'`. Index MUST be hardened.\n     * @param {number} index - The account index (e.g., 0, 1, 2...).\n     * @returns {KeypairDef} The derived Keypair.\n     * @throws {Error} if the index is invalid or derivation fails.\n     */\n    getAccount(index) {\n        if (typeof index !== 'number' || index < 0 || !Number.isInteger(index)) {\n            throw new Error(\"Account index must be a non-negative integer.\");\n        }\n        const path = `${DEFAULT_ACCOUNT_DERIVATION_BASE}/${index}'`;\n        return this.deriveAccount(path);\n    }\n\n    /**\n     * Exports the raw private key for a derived account at a specific index.\n     * Uses the path `m/44'/COIN_TYPE'/{index}'`. Index MUST be hardened.\n     * Use with extreme caution.\n     * @param {number} index - The account index.\n     * @returns {Uint8Array} The raw private key (secret key) as a byte array.\n     * @throws {Error} if the index is invalid or derivation fails.\n     */\n    exportPrivateKey(index) {\n        if (typeof index !== 'number' || index < 0 || !Number.isInteger(index)) {\n            throw new Error(\"Account index must be a non-negative integer.\");\n        }\n        const path = `${DEFAULT_ACCOUNT_DERIVATION_BASE}/${index}'`;\n        try {\n            const derivedHDKey = this.#masterKey.derive(path);\n            // Return a copy of the private key (seed part)\n            return Uint8Array.from(derivedHDKey.privateKey);\n        } catch (error) {\n            console.error(`Error exporting private key for index ${index}:`, error);\n            throw new Error(`Failed to export private key for index ${index}.`);\n        }\n    }\n}\n\n/**\n * Static methods for creating Wallet instances using @scure/bip39.\n * Matches the WalletConstructor interface shape.\n * @type {WalletConstructorDef}\n */\nconst Wallet = {\n    /**\n     * Creates a Wallet instance from a BIP-39 mnemonic phrase using @scure/bip39.\n     * Uses synchronous seed generation.\n     * @param {string} mnemonic - The seed phrase.\n     * @param {string} [passphrase] - (Optional) BIP-39 passphrase.\n     * @returns {WalletDef} A new Wallet instance.\n     * @throws {Error} if the mnemonic is invalid according to the English wordlist.\n     */\n    fromMnemonic: (mnemonic, passphrase) => {\n        // Validate using @scure/bip39 and the explicitly imported English wordlist\n        const seed = mnemonicToSeed(mnemonic, passphrase);\n\n        // Create the master HD key from the seed\n        const masterKey = HDKey.fromMasterSeed(seed);\n\n        // Return the Wallet implementation instance\n        return new WalletImpl(masterKey);\n    },\n};\n\n// Export the Wallet object containing the static methods using named export\nexport { Wallet };", "class ConnectionImpl {\n    constructor(cluster = \"devnet\") {\n        this.url = this._resolveClusterUrl(cluster);\n    }\n\n    _resolveClusterUrl(cluster) {\n        if (typeof cluster === \"string\" && /^https?:\\/\\//i.test(cluster)) {\n            return cluster;\n        }\n\n        const clusterUrls = {\n            \"mainnet-beta\": \"https://api.mainnet-beta.getlea.org\",\n            devnet: \"https://api.devnet.getlea.org\",\n            testnet: \"https://api.testnet.getlea.org\",\n            local: \"http://localhost:3000\",\n            localhost: \"http://localhost:3000\",\n        };\n\n        if (!clusterUrls[cluster]) {\n            throw new Error(`Unknown cluster: ${cluster}`);\n        }\n\n        return clusterUrls[cluster];\n    }\n\n    async _sendRequest(method, params) {\n        const response = await fetch(this.url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                jsonrpc: \"1.0\",\n                method,\n                ...(params !== undefined && { params }) //params: []\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error from ${this.url}: ${response.status} ${response.statusText}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.result) {\n            throw new Error(`Malformed response from ${this.url} for method '${method}': ${JSON.stringify(data)}`);\n        }\n\n        return data.result;\n    }\n\n    getVersion() {\n        return this._sendRequest(\"getVersion\");\n    }\n\n    getLatestBlockhash() {\n        return this._sendRequest(\"getLatestBlockhash\");\n    }\n\n    sendTransaction(tx) {\n        return this._sendRequest(\"sendTransaction\", tx);\n    }\n\n    getBalance(addrs) {\n        return this._sendRequest(\"getBalance\", addrs);\n    }\n}\n\nexport const Connection = (cluster = \"devnet\") => new ConnectionImpl(cluster);\n", "var __toBinary = /* @__PURE__ */ (() => {\n  var table = new Uint8Array(128);\n  for (var i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;\n  return (base64) => {\n    var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == \"=\") - (base64[n - 2] == \"=\")) * 3 / 4 | 0);\n    for (var i2 = 0, j = 0; i2 < n; ) {\n      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];\n      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];\n      bytes[j++] = c0 << 2 | c1 >> 4;\n      bytes[j++] = c1 << 4 | c2 >> 2;\n      bytes[j++] = c2 << 6 | c3;\n    }\n    return bytes;\n  };\n})();\n\n// src/encoder.mvp.wasm\nvar encoder_mvp_default = __toBinary(\"AGFzbQEAAAABMglgAX8Bf2ACf38Bf2ADf39/AX9gAX8AYAJ/fwBgAn99AGAEf39/fwBgAn98AGACf34AAxsaAAABAgIAAAADBAUGBwQEBAgECAQECAQIAgAEBQFwAQEBBQMBAAIGCAF/AUGwiAYLB+QFGQZtZW1vcnkCABNnZXRfcHVibGljX2tleV9zaXplAAAXZ2V0X3NpZ25hdHVyZV9pdGVtX3NpemUAARBjdGVfZW5jb2Rlcl9pbml0AAcGbWFsbG9jABkRY3RlX2VuY29kZXJfcmVzZXQACBRjdGVfZW5jb2Rlcl9nZXRfZGF0YQAFFGN0ZV9lbmNvZGVyX2dldF9zaXplAAYhY3RlX2VuY29kZXJfYmVnaW5fcHVibGljX2tleV9saXN0AAMgY3RlX2VuY29kZXJfYmVnaW5fc2lnbmF0dXJlX2xpc3QABChjdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfaW5kZXhfcmVmZXJlbmNlAA0gY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX3VsZWIxMjgAFyBjdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfc2xlYjEyOAASHWN0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV9pbnQ4ABEeY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2ludDE2AA4eY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2ludDMyAA8eY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2ludDY0ABAeY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX3VpbnQ4ABYfY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX3VpbnQxNgATH2N0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV91aW50MzIAFB9jdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfdWludDY0ABUgY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2Zsb2F0MzIACiBjdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfZmxvYXQ2NAAMIGN0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV9ib29sZWFuAAkeY3RlX2VuY29kZXJfYmVnaW5fY29tbWFuZF9kYXRhAAIKshEaIwACQCAAQQRJDQAAAAsgAEEYdEEYdUECdEGAiICAAGooAgALIwACQCAAQQRJDQAAAAsgAEEYdEEYdUECdEGQiICAAGooAgALsQEBA38CQCAARQ0AAkACQCABQR9LDQBBASECIAFBAWoiAyAAKAIIIgRqIAAoAgRLDQIgACgCACAEaiABQcABcjoAAAwBCyABQa0JSw0BQQIhAiABQQJqIgMgACgCCCIEaiAAKAIESw0BIAAoAgAgBGogAUEGdkEccUHgAXI6AAAgACgCCCAAKAIAakEBaiABOgAACyAAIAMgACgCCCIBajYCCCABIAAoAgBqIAJqDwsAAAuFAQECfwJAIABFDQAgAUFwakH/AXFB8AFNDQAgAkEETw0AIAJBGHRBGHVBAnRBgIiAgABqKAIAIAFsQQFqIgMgACgCCCIEaiAAKAIESw0AIAAoAgAgBGogAUECdEE8cSACQQNxcjoAACAAIAAoAggiASADajYCCCABIAAoAgBqQQFqDwsAAAuJAQECfwJAIABFDQAgAUFwakH/AXFB8AFNDQAgAkEETw0AIAJBGHRBGHVBAnRBkIiAgABqKAIAIAFsQQFqIgMgACgCCCIEaiAAKAIESw0AIAAoAgAgBGogAkEDcSABQQJ0QTxxckHAAHI6AAAgACAAKAIIIgEgA2o2AgggASAAKAIAakEBag8LAAALEAACQCAADQAAAAsgACgCAAsQAAJAIAANAAAACyAAKAIIC5kBAQd/AkAgAEUNAEEAQQAoAqCIgIAAIgEgAUEMaiICIAJBgIACSyIDGyIEQbCIgIAAaiAEIABqIgVBgIACSyIGGyEHQQAgAUGwiICAAGogAxshAQJAAkAgAkGBgAJJDQAgBg0BC0EAIAQgBSAGGzYCoIiAgAALIAFBATYCCCABIAA2AgQgASAHNgIAIAdB8QE6AAAgAQ8LAAALLgACQCAARQ0AIABBADYCCCAAKAIERQ0AIABBATYCCCAAKAIAQfEBOgAADwsAAAs+AQJ/AkAgAEUNACAAKAIIIgJBAWoiAyAAKAIESw0AIAAgAzYCCCAAKAIAIAJqQYd/QYN/IAEbOgAADwsAAAs4AQF/I4CAgIAAQRBrIgIkgICAgAAgAiABOAIMIABBCEEEIAJBDGoQi4CAgAAgAkEQaiSAgICAAAtsAQJ/AkAgAEUNACADRQ0AIAAoAggiBEEBaiIFIAJqIAAoAgRLDQAgACAFNgIIIAAoAgAgBGogAUECdEE8cUGCAXI6AAAgACgCACAAKAIIaiADIAIQmICAgAAaIAAgACgCCCACajYCCA8LAAALOAEBfyOAgICAAEEQayICJICAgIAAIAIgATkDCCAAQQlBCCACQQhqEIuAgIAAIAJBEGokgICAgAALSAECfwJAIABFDQAgAUEQTw0AIAAoAggiAkEBaiIDIAAoAgRLDQAgACADNgIIIAAoAgAgAmogAUECdEE8cUGAAXI6AAAPCwAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE7AQ4gAEEBQQIgAkEOahCLgICAACACQRBqJICAgIAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE2AgwgAEECQQQgAkEMahCLgICAACACQRBqJICAgIAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE3AwggAEEDQQggAkEIahCLgICAACACQRBqJICAgIAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE6AA8gAEEAQQEgAkEPahCLgICAACACQRBqJICAgIAAC9wBAwR/AX4BfwJAAkAgAEUNACAAKAIIIgJBAWogACgCBEsNACAAKAIAIAJqQYkBOgAAIAAoAggiAkEBdEECaiAAKAIESw0AIAIgACgCAGpBAWohAyACQQJqIQRBACECA0AgAadB/wBxIQUCQCABQj9WDQAgAyACaiAFOgAADAMLIAMgAmpBAEGAfyABQgeHIgZCf1EgAULAAINCBoincSIHGyAFcjoAACAHDQIgBiEBIAQgACgCCGogAkEBaiICaiAAKAIETQ0ACwsAAAsgACAAKAIIIAJqQQJqNgIICzgBAX8jgICAgABBEGsiAiSAgICAACACIAE7AQ4gAEEFQQIgAkEOahCLgICAACACQRBqJICAgIAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE2AgwgAEEGQQQgAkEMahCLgICAACACQRBqJICAgIAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE3AwggAEEHQQggAkEIahCLgICAACACQRBqJICAgIAACzgBAX8jgICAgABBEGsiAiSAgICAACACIAE6AA8gAEEEQQEgAkEPahCLgICAACACQRBqJICAgIAAC7EBAQN/AkACQCAARQ0AIAAoAggiAkEBaiAAKAIESw0AIAAoAgAgAmpBhQE6AAAgACgCCCICQQF0QQJqIAAoAgRLDQAgAiAAKAIAakEBaiEDIAJBAmohBEEAIQIDQCADIAJqIAGnQf8AcSABQv8AVkEHdHI6AAAgAUKAAVQNAiABQgeIIQEgBCAAKAIIaiACQQFqIgJqIAAoAgRNDQALCwAACyAAIAAoAgggAmpBAmo2AggLuwEBBH8CQCACRQ0AIAJBA3EhA0EAIQQCQCACQX9qQQNJDQAgAkF8cSEFQQAhBANAIAAgBGoiAiABIARqIgYtAAA6AAAgAkEBaiAGQQFqLQAAOgAAIAJBAmogBkECai0AADoAACACQQNqIAZBA2otAAA6AAAgBSAEQQRqIgRHDQALCyADRQ0AIAEgBGohAiAAIARqIQQDQCAEIAItAAA6AAAgAkEBaiECIARBAWohBCADQX9qIgMNAAsLIAALOgECf0EAIQECQEEAKAKgiICAACICIABqIgBBgIACSw0AQQAgADYCoIiAgAAgAkGwiICAAGohAQsgAQsLJwEAQYAICyAgAAAAIAAAADAAAABAAAAAQAAAACAAAAAgAAAAIAAAAACOBgRuYW1lAeYFGgATZ2V0X3B1YmxpY19rZXlfc2l6ZQEXZ2V0X3NpZ25hdHVyZV9pdGVtX3NpemUCHmN0ZV9lbmNvZGVyX2JlZ2luX2NvbW1hbmRfZGF0YQMhY3RlX2VuY29kZXJfYmVnaW5fcHVibGljX2tleV9saXN0BCBjdGVfZW5jb2Rlcl9iZWdpbl9zaWduYXR1cmVfbGlzdAUUY3RlX2VuY29kZXJfZ2V0X2RhdGEGFGN0ZV9lbmNvZGVyX2dldF9zaXplBxBjdGVfZW5jb2Rlcl9pbml0CBFjdGVfZW5jb2Rlcl9yZXNldAkgY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2Jvb2xlYW4KIGN0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV9mbG9hdDMyCxl3cml0ZV9maXhlZF9kYXRhX2ludGVybmFsDCBjdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfZmxvYXQ2NA0oY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2luZGV4X3JlZmVyZW5jZQ4eY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2ludDE2Dx5jdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfaW50MzIQHmN0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV9pbnQ2NBEdY3RlX2VuY29kZXJfd3JpdGVfaXhkYXRhX2ludDgSIGN0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV9zbGViMTI4Ex9jdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfdWludDE2FB9jdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfdWludDMyFR9jdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfdWludDY0Fh5jdGVfZW5jb2Rlcl93cml0ZV9peGRhdGFfdWludDgXIGN0ZV9lbmNvZGVyX3dyaXRlX2l4ZGF0YV91bGViMTI4GAZtZW1jcHkZBm1hbGxvYwcSAQAPX19zdGFja19wb2ludGVyCQoBAAcucm9kYXRhAC0JcHJvZHVjZXJzAQxwcm9jZXNzZWQtYnkBDERlYmlhbiBjbGFuZwYxNC4wLjY=\");\n\n// src/encoder.class.js\nvar CteEncoder = class _CteEncoder {\n  #wasmInstance = null;\n  #wasmMemory = null;\n  #wasmExports = null;\n  #encoderHandle = 0;\n  // Pointer to C struct cte_encoder_t*\n  /**\n   * @private\n   * @description Internal constructor. Use static `CteEncoder.create()` method instead.\n   * @param {WebAssembly.Instance} wasmInstance - The instantiated encoder WASM module for this object.\n   * @param {DataView} wasmMemory - A DataView for this instance's WASM memory.\n   * @param {number} encoderHandle - The pointer (handle) to the C encoder context (`cte_encoder_t*`).\n   */\n  constructor(wasmInstance, wasmMemory, encoderHandle) {\n    this.#wasmInstance = wasmInstance;\n    this.#wasmMemory = wasmMemory;\n    this.#wasmExports = wasmInstance.exports;\n    this.#encoderHandle = encoderHandle;\n  }\n  /**\n   * @static\n   * @async\n   * @description Asynchronously creates and initializes a new, independent CTE encoder instance.\n   * Loads and instantiates a fresh copy of the encoder WASM module for this instance.\n   * @param {number} capacity - The fixed buffer capacity in bytes for the encoder. Should be large enough for the expected transaction.\n   * @returns {Promise<CteEncoder>} A promise that resolves to the initialized CteEncoder instance.\n   * @throws {Error} If WASM binary is invalid, instantiation fails, exports are missing, or C-level encoder initialization (`cte_encoder_init`) fails.\n   * @example\n   * import { CteEncoder } from '@leachain/ctejs-core'; // Use package name\n   *\n   * async function main() {\n   * try {\n   * // Each call creates a new WASM instance\n   * const encoder1 = await CteEncoder.create(1024);\n   * const encoder2 = await CteEncoder.create(2048);\n   * console.log('Encoders ready!');\n   * } catch (err) {\n   * console.error(\"Failed to create encoder:\", err);\n   * }\n   * }\n   * main();\n   */\n  static async create(capacity) {\n    const importObject = {\n      env: {\n        abort: () => {\n          throw new Error(`WASM Encoder aborted`);\n        }\n      }\n    };\n    const requiredExports = [\n      \"memory\",\n      \"get_public_key_size\",\n      \"get_signature_item_size\",\n      //\n      \"cte_encoder_init\",\n      \"cte_encoder_reset\",\n      \"cte_encoder_get_data\",\n      \"cte_encoder_get_size\",\n      //\n      \"cte_encoder_begin_public_key_list\",\n      \"cte_encoder_begin_signature_list\",\n      //\n      \"cte_encoder_write_ixdata_index_reference\",\n      \"cte_encoder_write_ixdata_uleb128\",\n      //\n      \"cte_encoder_write_ixdata_sleb128\",\n      \"cte_encoder_write_ixdata_int8\",\n      //\n      \"cte_encoder_write_ixdata_uint8\",\n      \"cte_encoder_write_ixdata_int16\",\n      //\n      \"cte_encoder_write_ixdata_uint16\",\n      \"cte_encoder_write_ixdata_int32\",\n      //\n      \"cte_encoder_write_ixdata_uint32\",\n      \"cte_encoder_write_ixdata_int64\",\n      //\n      \"cte_encoder_write_ixdata_uint64\",\n      \"cte_encoder_write_ixdata_float32\",\n      //\n      \"cte_encoder_write_ixdata_float64\",\n      \"cte_encoder_write_ixdata_boolean\",\n      //\n      \"cte_encoder_begin_command_data\"\n      //\n    ];\n    const { instance } = await WebAssembly.instantiate(encoder_mvp_default, importObject);\n    const memory = new DataView(instance.exports.memory.buffer);\n    for (const exportName of requiredExports) {\n      if (!(exportName in instance.exports)) {\n        throw new Error(`WASM Encoder module instance is missing required export: ${exportName}`);\n      }\n    }\n    const handle = instance.exports.cte_encoder_init(capacity);\n    if (!handle) {\n      throw new Error(\"Failed to create CTE encoder handle in WASM\");\n    }\n    return new _CteEncoder(instance, memory, handle);\n  }\n  /**\n   * @private\n   * @description Refreshes the internal DataView reference to this instance's WASM memory buffer.\n   */\n  #refreshMemoryView() {\n    if (this.#wasmMemory.buffer !== this.#wasmInstance.exports.memory.buffer) {\n      this.#wasmMemory = new DataView(this.#wasmInstance.exports.memory.buffer);\n    }\n  }\n  /**\n   * @description Resets the encoder state for this instance, allowing reuse of its allocated buffer.\n   * @returns {this} The encoder instance for chaining.\n   * @throws {Error} If the encoder instance handle is invalid (e.g., after destroy).\n   */\n  reset() {\n    if (!this.#encoderHandle) throw new Error(\"Encoder handle invalid (destroyed?).\");\n    this.#wasmExports.cte_encoder_reset(this.#encoderHandle);\n    this.#refreshMemoryView();\n    return this;\n  }\n  /**\n   * @description Retrieves the currently encoded data from this instance as a byte array.\n   * Returns a copy. Terminates an encoding chain.\n   * @returns {Uint8Array} A copy of the encoded data bytes.\n   * @throws {Error} If the encoder instance handle is invalid or WASM memory access fails.\n   */\n  getEncodedData() {\n    if (!this.#encoderHandle) throw new Error(\"Encoder handle invalid (destroyed?).\");\n    const dataPtr = this.#wasmExports.cte_encoder_get_data(this.#encoderHandle);\n    const size = this.#wasmExports.cte_encoder_get_size(this.#encoderHandle);\n    if (!dataPtr && size > 0) {\n      throw new Error(\"WASM get_data returned null pointer but size > 0.\");\n    }\n    if (size === 0) {\n      return new Uint8Array(0);\n    }\n    this.#refreshMemoryView();\n    if (dataPtr + size > this.#wasmMemory.buffer.byteLength) {\n      throw new Error(`WASM memory access error reading encoded data`);\n    }\n    return new Uint8Array(this.#wasmMemory.buffer.slice(dataPtr, dataPtr + size));\n  }\n  // --- Size Helpers ---\n  /**\n   * Gets the expected size in bytes for a signature/hash item based on crypto type code,\n   * using this instance's WASM module.\n   * @param {number} typeCode - The crypto type code (e.g., `CTE.CTE_CRYPTO_TYPE_ED25519`).\n   * @returns {number} The size in bytes.\n   * @throws {Error} If the encoder instance handle is invalid or the WASM function returns an invalid size.\n   */\n  getSignatureItemSize(typeCode) {\n    if (!this.#encoderHandle) throw new Error(\"Encoder not initialized or destroyed.\");\n    const size = this.#wasmExports.get_signature_item_size(typeCode);\n    if (size <= 0) throw new Error(`WASM get_signature_item_size invalid size (${size}) for type ${typeCode}`);\n    return size;\n  }\n  /**\n   * Gets the expected size in bytes for a public key item based on crypto type code,\n   * using this instance's WASM module.\n   * @param {number} typeCode - The crypto type code (e.g., `CTE.CTE_CRYPTO_TYPE_ED25519`).\n   * @returns {number} The size in bytes.\n   * @throws {Error} If the encoder instance handle is invalid or the WASM function returns an invalid size.\n   */\n  getPublicKeySize(typeCode) {\n    if (!this.#encoderHandle) throw new Error(\"Encoder not initialized or destroyed.\");\n    const size = this.#wasmExports.get_public_key_size(typeCode);\n    if (size <= 0) throw new Error(`WASM get_public_key_size invalid size (${size}) for type ${typeCode}`);\n    return size;\n  }\n  // --- Encoding Methods (Implementations use this.#wasmExports etc.) ---\n  /** @private */\n  #beginAndWriteListData(beginFuncName, items, typeCode, getWasmItemSizeFunc, listName) {\n    if (!this.#encoderHandle) throw new Error(\"Encoder handle invalid.\");\n    if (!Array.isArray(items) || items.length < 1 || items.length > CTE_LIST_MAX_LEN) {\n      throw new Error(`Invalid ${listName} list size`);\n    }\n    const itemCount = items.length;\n    const itemSize = this.#wasmExports[getWasmItemSizeFunc](typeCode);\n    if (itemSize <= 0) {\n      throw new Error(`Invalid ${listName} item size ${itemSize}`);\n    }\n    const expectedTotalItemSize = itemCount * itemSize;\n    const writePtr = this.#wasmExports[beginFuncName](this.#encoderHandle, itemCount, typeCode);\n    if (!writePtr) {\n      throw new Error(`Begin ${listName} list failed in WASM`);\n    }\n    this.#refreshMemoryView();\n    if (writePtr + expectedTotalItemSize > this.#wasmMemory.buffer.byteLength) {\n      throw new Error(`WASM overflow preparing ${listName}`);\n    }\n    const memoryBytesView = new Uint8Array(this.#wasmMemory.buffer);\n    let currentOffset = writePtr;\n    for (const item of items) {\n      if (!(item instanceof Uint8Array) || item.length !== itemSize) {\n        throw new Error(`Invalid ${listName} item: Expected Uint8Array size ${itemSize}.`);\n      }\n      memoryBytesView.set(item, currentOffset);\n      currentOffset += itemSize;\n    }\n    return this;\n  }\n  /** @returns {this} */\n  addPublicKeyList(keys, typeCode) {\n    return this.#beginAndWriteListData(\n      \"cte_encoder_begin_public_key_list\",\n      keys,\n      typeCode,\n      \"get_public_key_size\",\n      \"PublicKey\"\n    );\n  }\n  //\n  /** @returns {this} */\n  addSignatureList(signatures, typeCode) {\n    return this.#beginAndWriteListData(\n      \"cte_encoder_begin_signature_list\",\n      signatures,\n      typeCode,\n      \"get_signature_item_size\",\n      \"Signature\"\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataIndexReference(index) {\n    if (!this.#encoderHandle) throw new Error(\"Encoder handle invalid.\");\n    if (typeof index !== \"number\" || index < 0 || index > CTE_LEGACY_INDEX_MAX_VALUE || !Number.isInteger(index)) {\n      throw new Error(`Invalid legacy index`);\n    }\n    this.#wasmExports.cte_encoder_write_ixdata_index_reference(this.#encoderHandle, index);\n    return this;\n  }\n  /** @private @returns {this} */\n  #writeSimpleIxData(fn, v, t, c = null) {\n    if (!this.#encoderHandle) throw new Error(\"Encoder handle invalid.\");\n    if (c && !c(v)) {\n      throw new Error(`Invalid IxData ${t}: Val ${v}`);\n    }\n    this.#wasmExports[fn](this.#encoderHandle, v);\n    return this;\n  }\n  //\n  /** @returns {this} */\n  addIxDataUleb128(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_uleb128\",\n      BigInt(v),\n      \"ULEB128\",\n      (x) => typeof x === \"bigint\" && x >= 0n\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataSleb128(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_sleb128\",\n      BigInt(v),\n      \"SLEB128\",\n      (x) => typeof x === \"bigint\"\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataInt8(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_int8\",\n      v,\n      \"Int8\",\n      (x) => Number.isInteger(x) && x >= -128 && x <= 127\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataUint8(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_uint8\",\n      v,\n      \"Uint8\",\n      (x) => Number.isInteger(x) && x >= 0 && x <= 255\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataInt16(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_int16\",\n      v,\n      \"Int16\",\n      (x) => Number.isInteger(x) && x >= -32768 && x <= 32767\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataUint16(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_uint16\",\n      v,\n      \"Uint16\",\n      (x) => Number.isInteger(x) && x >= 0 && x <= 65535\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataInt32(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_int32\",\n      v,\n      \"Int32\",\n      (x) => Number.isInteger(x) && x >= -(2 ** 31) && x <= 2 ** 31 - 1\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataUint32(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_uint32\",\n      v,\n      \"Uint32\",\n      (x) => Number.isInteger(x) && x >= 0 && x <= 2 ** 32 - 1\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataInt64(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_int64\",\n      BigInt(v),\n      \"Int64\",\n      (x) => typeof x === \"bigint\"\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataUint64(v) {\n    return this.#writeSimpleIxData(\n      \"cte_encoder_write_ixdata_uint64\",\n      BigInt(v),\n      \"Uint64\",\n      (x) => typeof x === \"bigint\" && x >= 0n\n    );\n  }\n  //\n  /** @returns {this} */\n  addIxDataFloat32(v) {\n    return this.#writeSimpleIxData(\"cte_encoder_write_ixdata_float32\", v, \"Float32\", (x) => typeof x === \"number\");\n  }\n  //\n  /** @returns {this} */\n  addIxDataFloat64(v) {\n    return this.#writeSimpleIxData(\"cte_encoder_write_ixdata_float64\", v, \"Float64\", (x) => typeof x === \"number\");\n  }\n  //\n  /** @returns {this} */\n  addIxDataBoolean(v) {\n    return this.#writeSimpleIxData(\"cte_encoder_write_ixdata_boolean\", !!v, \"Boolean\");\n  }\n  //\n  /**\n   * Adds a Command Data field. Requires input as `Uint8Array`.\n   * @param {Uint8Array} data - The command payload bytes. Length must not exceed `CTE.CTE_COMMAND_EXTENDED_MAX_LEN`.\n   * @returns {this} The encoder instance for chaining.\n   * @throws {Error} If data is not a `Uint8Array` or exceeds max length, or WASM fails.\n   */\n  addCommandData(data) {\n    if (!this.#encoderHandle) throw new Error(\"Encoder handle invalid.\");\n    if (!(data instanceof Uint8Array)) {\n      throw new Error(\"Command data must be a Uint8Array.\");\n    }\n    const bytes = data;\n    const len = bytes.length;\n    if (len > CTE_COMMAND_EXTENDED_MAX_LEN) {\n      throw new Error(`Cmd data too long: ${len} > ${CTE_COMMAND_EXTENDED_MAX_LEN}`);\n    }\n    const ptr = this.#wasmExports.cte_encoder_begin_command_data(this.#encoderHandle, len);\n    if (!ptr) {\n      throw new Error(`Begin command data failed`);\n    }\n    this.#refreshMemoryView();\n    if (ptr + len > this.#wasmMemory.buffer.byteLength) {\n      throw new Error(`WASM overflow for Command Data`);\n    }\n    new Uint8Array(this.#wasmMemory.buffer).set(bytes, ptr);\n    return this;\n  }\n  /**\n   * @description Cleans up Javascript references associated with this encoder instance.\n   * Does not explicitly free WASM memory. Future calls to this instance will fail.\n   */\n  destroy() {\n    this.#encoderHandle = 0;\n    this.#wasmExports = null;\n    this.#wasmInstance = null;\n    this.#wasmMemory = null;\n  }\n};\n\n// src/decoder.mvp.wasm\nvar decoder_mvp_default = __toBinary(\"AGFzbQEAAAABLQhgAX8Bf2ACf38Bf2ABfwF9YAR/f39/AGABfwF8YAF/AX5gAX8AYAN/f38BfwMiIQAAAAAAAQAAAAAAAAABAgMEAAAABQAFAAAFAAUAAAYHAAQFAXABAQEFAwEAAgYIAX8BQbCIBgsHqAceBm1lbW9yeQIAE2dldF9wdWJsaWNfa2V5X3NpemUAABdnZXRfc2lnbmF0dXJlX2l0ZW1fc2l6ZQABEGN0ZV9kZWNvZGVyX2luaXQAAgZtYWxsb2MAIBBjdGVfZGVjb2Rlcl9sb2FkAAMRY3RlX2RlY29kZXJfcmVzZXQAHhRjdGVfZGVjb2Rlcl9wZWVrX3RhZwAKJmN0ZV9kZWNvZGVyX3BlZWtfcHVibGljX2tleV9saXN0X2NvdW50AAYlY3RlX2RlY29kZXJfcGVla19wdWJsaWNfa2V5X2xpc3RfdHlwZQAHJWN0ZV9kZWNvZGVyX3JlYWRfcHVibGljX2tleV9saXN0X2RhdGEAHCVjdGVfZGVjb2Rlcl9wZWVrX3NpZ25hdHVyZV9saXN0X2NvdW50AAgkY3RlX2RlY29kZXJfcGVla19zaWduYXR1cmVfbGlzdF90eXBlAAkkY3RlX2RlY29kZXJfcmVhZF9zaWduYXR1cmVfbGlzdF9kYXRhAB0nY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfaW5kZXhfcmVmZXJlbmNlABEfY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfdWxlYjEyOAAbH2N0ZV9kZWNvZGVyX3JlYWRfaXhkYXRhX3NsZWIxMjgAFhxjdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV9pbnQ4ABUdY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfaW50MTYAEh1jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV9pbnQzMgATHWN0ZV9kZWNvZGVyX3JlYWRfaXhkYXRhX2ludDY0ABQdY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfdWludDgAGh5jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV91aW50MTYAFx5jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV91aW50MzIAGB5jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV91aW50NjQAGR9jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV9mbG9hdDMyAA4fY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfZmxvYXQ2NAAQH2N0ZV9kZWNvZGVyX3JlYWRfaXhkYXRhX2Jvb2xlYW4ADCRjdGVfZGVjb2Rlcl9wZWVrX2NvbW1hbmRfZGF0YV9sZW5ndGgABCVjdGVfZGVjb2Rlcl9yZWFkX2NvbW1hbmRfZGF0YV9wYXlsb2FkAAsK3RQhIwACQCAAQQRJDQAAAAsgAEEYdEEYdUECdEGAiICAAGooAgALIwACQCAAQQRJDQAAAAsgAEEYdEEYdUECdEGQiICAAGooAgALnwEBBH8CQCAARQ0AIABB0QlPDQBBAEEAKAKgiICAACIBQbCIgIAAaiABQQxqIgJBgIACSyIDGyEEIAEgAiADGyIDIABqIQECQAJAIAJBgYACSQ0AIAFBgIACSw0BC0EAIAMgASABQYCAAksbNgKgiICAAAsgBEEANgIIIAQgADYCBCAEQQAgA0GwiICAAGogAUGAgAJLGzYCACAEDwsAAAsHACAAKAIACzoBAX8jgICAgABBEGsiASSAgICAAAJAIAANAAAACyAAIAFBDGoQhYCAgAAhACABQRBqJICAgIAAIAALogEBBH8CQCAAKAIIIgJBAWoiAyAAKAIEIgRNDQAgAUEANgIAQX8PCwJAIAAoAgAiBSACai0AACIAQcABcUHAAUcNAAJAIABBIHENACABQQE2AgAgAEEfcQ8LIABBA3ENAAJAIAJBAmogBE0NACABQQA2AgBBfw8LIAFBAjYCACAAQQZ0QYAOcSAFIANqLQAAciIAQdJ2akHxdk0NACAADwsAAAtMAQJ/AkAgAEUNAEH/ASEBAkAgACgCCCICQQFqIAAoAgRLDQAgACgCACACai0AACIAQcAATw0BIABBA00NASAAQQJ2IQELIAEPCwAAC0UBAn8CQCAARQ0AQf8BIQECQCAAKAIIIgJBAWogACgCBEsNACAAKAIAIAJqLQAAIgBBwABPDQEgAEEDcSEBCyABDwsAAAtPAQJ/AkAgAEUNAEH/ASEBAkAgACgCCCICQQFqIAAoAgRLDQAgACgCACACai0AACIAQcABcUHAAEcNASAAQQJ2QQ9xIgFFDQELIAEPCwAAC0kBAn8CQCAARQ0AQf8BIQECQCAAKAIIIgJBAWogACgCBEsNACAAKAIAIAJqLQAAIgBBwAFxQcAARw0BIABBA3EhAQsgAQ8LAAALVgECfwJAAkAgACgCCCIBDQAgACgCAC0AAEHxAUcNAUEBIQEgAEEBNgIIC0F/IQICQCABQQFqIAAoAgRLDQAgACgCACABai0AAEHAAXEhAgsgAg8LAAALcwEDfyOAgICAAEEQayIBJICAgIAAAkAgAEUNACAAIAFBDGoQhYCAgAAiAkF/Rg0AIAEoAgwiA0UNACAAKAIIIANqIgMgAmoiAiAAKAIESw0AIAAgAjYCCCAAKAIAIQAgAUEQaiSAgICAACAAIANqDwsAAAspAAJAIABFDQAgAEEDEI2AgIAAQQJ2QQ9xIgBBAk8NACAAQQBHDwsAAAtIAQJ/AkAgACgCCCICQQFqIgMgACgCBEsNACAAKAIAIAJqLQAAIgJBwAFxQYABRw0AIAJBA3EgAUcNACAAIAM2AgggAg8LAAALPAIBfwF9I4CAgIAAQRBrIgEkgICAgAAgAEEIQQQgAUEMahCPgICAACABKgIMIQIgAUEQaiSAgICAACACC1kAAkAgAEUNACADRQ0AIABBAhCNgICAAEECdkEPcSABRw0AIAAoAggiASACaiAAKAIESw0AIAMgACgCACABaiACEJ+AgIAAGiAAIAAoAgggAmo2AggPCwAACzwCAX8BfCOAgICAAEEQayIBJICAgIAAIABBCUEIIAFBCGoQj4CAgAAgASsDCCECIAFBEGokgICAgAAgAgsbAAJAIAANAAAACyAAQQAQjYCAgABBAnZBD3ELOgEBfyOAgICAAEEQayIBJICAgIAAIABBAUECIAFBDmoQj4CAgAAgAS4BDiEAIAFBEGokgICAgAAgAAs6AQF/I4CAgIAAQRBrIgEkgICAgAAgAEECQQQgAUEMahCPgICAACABKAIMIQAgAUEQaiSAgICAACAACzwCAX8BfiOAgICAAEEQayIBJICAgIAAIABBA0EIIAFBCGoQj4CAgAAgASkDCCECIAFBEGokgICAgAAgAgs6AQF/I4CAgIAAQRBrIgEkgICAgAAgAEEAQQEgAUEPahCPgICAACABLAAPIQAgAUEQaiSAgICAACAAC7cBBgJ/AX4BfwF+AX8BfgJAAkAgAEUNACAAQQEQjYCAgABBPHFBCEcNACAAKAIIIQEgACgCBCECQgAhA0EAIQRCeSEFA0AgAUEBaiIGIAJLDQEgACAGNgIIIAAoAgAgAWotAAAiAUH/AHGtIAVCB3wiB4YgA4QhAyABQYABcUUNAiAEQQdqIQQgByEFIAYhASAHQjlUDQALCwAACyADQgBCfyAFQg58hkIAIAFBwABxGyAEQThLG4QLOgEBfyOAgICAAEEQayIBJICAgIAAIABBBUECIAFBDmoQj4CAgAAgAS8BDiEAIAFBEGokgICAgAAgAAs6AQF/I4CAgIAAQRBrIgEkgICAgAAgAEEGQQQgAUEMahCPgICAACABKAIMIQAgAUEQaiSAgICAACAACzwCAX8BfiOAgICAAEEQayIBJICAgIAAIABBB0EIIAFBCGoQj4CAgAAgASkDCCECIAFBEGokgICAgAAgAgs6AQF/I4CAgIAAQRBrIgEkgICAgAAgAEEEQQEgAUEPahCPgICAACABLQAPIQAgAUEQaiSAgICAACAAC6gBAwN/An4BfwJAAkAgAEUNACAAQQEQjYCAgABBPHFBBEcNACAAKAIIIQEgACgCBCECQQAhA0IAIQRCACEFA0AgASADakEBaiIGIAJLDQEgACAGNgIIIAAoAgAgAWogA2otAAAhBgJAIARCP1INACAGQQJPDQILIAZB/wBxrSAEhiAFhCEFIAZBgAFxRQ0CIARCB3whBCADQQFqIgNBCkcNAAsLAAALIAULbwEEfwJAIABFDQAgACgCCCIBQQFqIgIgACgCBCIDSw0AIAAoAgAiBCABai0AACIBQcAATw0AIAFBA00NACACIAFBA3FBAnRBgIiAgABqKAIAIAFBAnZsaiIBIANLDQAgACABNgIIIAQgAmoPCwAAC3YBBX8CQCAARQ0AIAAoAggiAUEBaiICIAAoAgQiA0sNACAAKAIAIgQgAWotAAAiAUHAAXFBwABHDQAgAUECdkEPcSIFRQ0AIAIgAUEDcUECdEGQiICAAGooAgAgBWxqIgEgA0sNACAAIAE2AgggBCACag8LAAALEgACQCAADQAAAAsgAEEBNgIIC7sBAQR/AkAgAkUNACACQQNxIQNBACEEAkAgAkF/akEDSQ0AIAJBfHEhBUEAIQQDQCAAIARqIgIgASAEaiIGLQAAOgAAIAJBAWogBkEBai0AADoAACACQQJqIAZBAmotAAA6AAAgAkEDaiAGQQNqLQAAOgAAIAUgBEEEaiIERw0ACwsgA0UNACABIARqIQIgACAEaiEEA0AgBCACLQAAOgAAIAJBAWohAiAEQQFqIQQgA0F/aiIDDQALCyAACzoBAn9BACEBAkBBACgCoIiAgAAiAiAAaiIAQYCAAksNAEEAIAA2AqCIgIAAIAJBsIiAgABqIQELIAELCycBAEGACAsgIAAAACAAAAAwAAAAQAAAAEAAAAAgAAAAIAAAACAAAAAA+AcEbmFtZQHQByEAE2dldF9wdWJsaWNfa2V5X3NpemUBF2dldF9zaWduYXR1cmVfaXRlbV9zaXplAhBjdGVfZGVjb2Rlcl9pbml0AxBjdGVfZGVjb2Rlcl9sb2FkBCRjdGVfZGVjb2Rlcl9wZWVrX2NvbW1hbmRfZGF0YV9sZW5ndGgFGl9wYXJzZV9jb21tYW5kX2RhdGFfaGVhZGVyBiZjdGVfZGVjb2Rlcl9wZWVrX3B1YmxpY19rZXlfbGlzdF9jb3VudAclY3RlX2RlY29kZXJfcGVla19wdWJsaWNfa2V5X2xpc3RfdHlwZQglY3RlX2RlY29kZXJfcGVla19zaWduYXR1cmVfbGlzdF9jb3VudAkkY3RlX2RlY29kZXJfcGVla19zaWduYXR1cmVfbGlzdF90eXBlChRjdGVfZGVjb2Rlcl9wZWVrX3RhZwslY3RlX2RlY29kZXJfcmVhZF9jb21tYW5kX2RhdGFfcGF5bG9hZAwfY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfYm9vbGVhbg0WX2NvbnN1bWVfaXhkYXRhX2hlYWRlcg4fY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfZmxvYXQzMg8QX3JlYWRfZml4ZWRfZGF0YRAfY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfZmxvYXQ2NBEnY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfaW5kZXhfcmVmZXJlbmNlEh1jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV9pbnQxNhMdY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfaW50MzIUHWN0ZV9kZWNvZGVyX3JlYWRfaXhkYXRhX2ludDY0FRxjdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV9pbnQ4Fh9jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV9zbGViMTI4Fx5jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV91aW50MTYYHmN0ZV9kZWNvZGVyX3JlYWRfaXhkYXRhX3VpbnQzMhkeY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfdWludDY0Gh1jdGVfZGVjb2Rlcl9yZWFkX2l4ZGF0YV91aW50OBsfY3RlX2RlY29kZXJfcmVhZF9peGRhdGFfdWxlYjEyOBwlY3RlX2RlY29kZXJfcmVhZF9wdWJsaWNfa2V5X2xpc3RfZGF0YR0kY3RlX2RlY29kZXJfcmVhZF9zaWduYXR1cmVfbGlzdF9kYXRhHhFjdGVfZGVjb2Rlcl9yZXNldB8GbWVtY3B5IAZtYWxsb2MHEgEAD19fc3RhY2tfcG9pbnRlcgkKAQAHLnJvZGF0YQAtCXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AQxEZWJpYW4gY2xhbmcGMTQuMC42\");\n\n// src/decoder.class.js\nvar CteDecoder = class _CteDecoder {\n  #wasmInstance = null;\n  #wasmMemory = null;\n  #wasmExports = null;\n  #decoderHandle = 0;\n  // Pointer to C struct cte_decoder_t*\n  #isDestroyed = false;\n  /**\n   * @private\n   * @description Internal constructor. Use static `CteDecoder.create()` method instead.\n   * @param {WebAssembly.Instance} wasmInstance - The instantiated decoder WASM module for this object.\n   * @param {DataView} wasmMemory - A DataView for this instance's WASM memory.\n   * @param {number} decoderHandle - The pointer (handle) to the C decoder context (`cte_decoder_t*`).\n   */\n  constructor(wasmInstance, wasmMemory, decoderHandle) {\n    this.#wasmInstance = wasmInstance;\n    this.#wasmMemory = wasmMemory;\n    this.#wasmExports = wasmInstance.exports;\n    this.#decoderHandle = decoderHandle;\n  }\n  /**\n   * @static\n   * @async\n   * @description Asynchronously creates and initializes a new, independent CTE decoder instance with the provided data buffer.\n   * Loads and instantiates a fresh copy of the decoder WASM module and copies the input buffer into its memory.\n   * @param {Uint8Array} cteBuffer - The buffer containing the CTE encoded data. Size must not exceed `CTE.CTE_MAX_TRANSACTION_SIZE`.\n   * @returns {Promise<CteDecoder>} A promise that resolves to the initialized CteDecoder instance.\n   * @throws {Error} If input is invalid, WASM binary/instantiation fails, exports are missing, buffer size is exceeded, or C-level decoder initialization fails.\n   * @example\n   * import { CteDecoder } from '@leachain/ctejs-core'; // Use package name\n   *\n   * async function main(encodedBytes) {\n   * try {\n   * const decoder = await CteDecoder.create(encodedBytes);\n   * console.log('Decoder ready!');\n   * // Proceed with decoding...\n   * } catch (err) {\n   * console.error(\"Failed to create decoder:\", err);\n   * }\n   * }\n   */\n  static async create(cteBuffer) {\n    if (!(cteBuffer instanceof Uint8Array)) {\n      throw new Error(\"Input must be Uint8Array.\");\n    }\n    if (cteBuffer.length === 0) {\n      console.warn(\"Input buffer empty. WASM might abort.\");\n    }\n    if (cteBuffer.length > CTE_MAX_TRANSACTION_SIZE) {\n      throw new Error(`Input buffer size ${cteBuffer.length} exceeds max ${CTE_MAX_TRANSACTION_SIZE}`);\n    }\n    const importObject = {\n      env: {\n        abort: () => {\n          throw new Error(`WASM Decoder aborted`);\n        }\n      }\n    };\n    const requiredExports = [\n      \"memory\",\n      \"get_public_key_size\",\n      \"get_signature_item_size\",\n      //\n      \"cte_decoder_init\",\n      \"cte_decoder_load\",\n      \"cte_decoder_reset\",\n      \"cte_decoder_peek_tag\",\n      //\n      \"cte_decoder_peek_public_key_list_count\",\n      \"cte_decoder_peek_public_key_list_type\",\n      //\n      \"cte_decoder_read_public_key_list_data\",\n      \"cte_decoder_peek_signature_list_count\",\n      //\n      \"cte_decoder_peek_signature_list_type\",\n      \"cte_decoder_read_signature_list_data\",\n      //\n      \"cte_decoder_read_ixdata_index_reference\",\n      \"cte_decoder_read_ixdata_uleb128\",\n      //\n      \"cte_decoder_read_ixdata_sleb128\",\n      \"cte_decoder_read_ixdata_int8\",\n      //\n      \"cte_decoder_read_ixdata_uint8\",\n      \"cte_decoder_read_ixdata_int16\",\n      //\n      \"cte_decoder_read_ixdata_uint16\",\n      \"cte_decoder_read_ixdata_int32\",\n      //\n      \"cte_decoder_read_ixdata_uint32\",\n      \"cte_decoder_read_ixdata_int64\",\n      //\n      \"cte_decoder_read_ixdata_uint64\",\n      \"cte_decoder_read_ixdata_float32\",\n      //\n      \"cte_decoder_read_ixdata_float64\",\n      \"cte_decoder_read_ixdata_boolean\",\n      //\n      \"cte_decoder_peek_command_data_length\",\n      \"cte_decoder_read_command_data_payload\"\n      //\n    ];\n    const { instance } = await WebAssembly.instantiate(decoder_mvp_default, importObject);\n    const memory = new DataView(instance.exports.memory.buffer);\n    for (const exportName of requiredExports) {\n      if (!(exportName in instance.exports)) {\n        throw new Error(`WASM Decoder module instance is missing required export: ${exportName}`);\n      }\n    }\n    const bufferLen = cteBuffer.length;\n    const handle = instance.exports.cte_decoder_init(bufferLen);\n    if (!handle) {\n      throw new Error(\"Failed to create decoder handle in WASM\");\n    }\n    const loadPtr = instance.exports.cte_decoder_load(handle);\n    if (!loadPtr) {\n      throw new Error(\"Failed to get load pointer from WASM decoder\");\n    }\n    const currentMemoryForInstance = new DataView(instance.exports.memory.buffer);\n    if (loadPtr + bufferLen > currentMemoryForInstance.buffer.byteLength) {\n      throw new Error(`WASM memory overflow loading data into decoder instance`);\n    }\n    new Uint8Array(currentMemoryForInstance.buffer).set(cteBuffer, loadPtr);\n    return new _CteDecoder(instance, memory, handle);\n  }\n  /** @private */\n  #checkDestroyed() {\n    if (this.#isDestroyed || !this.#decoderHandle) {\n      throw new Error(\"Decoder instance destroyed or handle invalid.\");\n    }\n  }\n  /** @private */\n  #refreshMemoryView() {\n    if (this.#wasmMemory.buffer !== this.#wasmInstance.exports.memory.buffer) {\n      this.#wasmMemory = new DataView(this.#wasmInstance.exports.memory.buffer);\n    }\n  }\n  /**\n   * @description Resets the decoder's read position to the beginning of the loaded buffer for this instance.\n   * @throws {Error} If the decoder instance has been destroyed.\n   */\n  reset() {\n    this.#checkDestroyed();\n    this.#wasmExports.cte_decoder_reset(this.#decoderHandle);\n    this.#refreshMemoryView();\n  }\n  //\n  /**\n   * @description Peeks at the tag (first byte, masked) of the next field in this instance's buffer.\n   * @returns {number | null} The tag value (e.g., `CTE.CTE_TAG_PUBLIC_KEY_LIST`) or `null` if at EOF/error.\n   * @throws {Error} If the decoder instance has been destroyed.\n   */\n  peekTag() {\n    this.#checkDestroyed();\n    const t = this.#wasmExports.cte_decoder_peek_tag(this.#decoderHandle);\n    return t < 0 ? null : t;\n  }\n  //\n  /**\n   * @description Peeks at the header of a Public Key List field in this instance's buffer.\n   * @returns {{count: number, typeCode: number} | null} Key count and type code, or `null`.\n   * @throws {Error} If the decoder instance has been destroyed.\n   */\n  peekPublicKeyListInfo() {\n    this.#checkDestroyed();\n    if (this.peekTag() !== CTE_TAG_PUBLIC_KEY_LIST) return null;\n    const c = this.#wasmExports.cte_decoder_peek_public_key_list_count(this.#decoderHandle);\n    const t = this.#wasmExports.cte_decoder_peek_public_key_list_type(this.#decoderHandle);\n    return c === CTE_PEEK_EOF || t === CTE_PEEK_EOF ? null : { count: c, typeCode: t };\n  }\n  //\n  /**\n   * @description Reads and consumes a Public Key List field from this instance's buffer.\n   * @returns {Uint8Array | null} A copy of the key data, or `null`.\n   * @throws {Error} If read fails, instance destroyed, or memory access fails.\n   */\n  readPublicKeyListData() {\n    this.#checkDestroyed();\n    const i = this.peekPublicKeyListInfo();\n    if (!i) return null;\n    const sz = this.#wasmExports.get_public_key_size(i.typeCode);\n    if (sz <= 0) throw new Error(`Invalid PK size ${sz}`);\n    const totSz = i.count * sz;\n    const ptr = this.#wasmExports.cte_decoder_read_public_key_list_data(this.#decoderHandle);\n    if (!ptr) throw new Error(\"Read PK fail\");\n    this.#refreshMemoryView();\n    if (ptr + totSz > this.#wasmMemory.buffer.byteLength) throw new Error(`PK read overflow`);\n    return new Uint8Array(this.#wasmMemory.buffer.slice(ptr, ptr + totSz));\n  }\n  /**\n   * @description Peeks at the header of a Signature List field in this instance's buffer.\n   * @returns {{count: number, typeCode: number} | null} Item count and type code, or `null`.\n   * @throws {Error} If the decoder instance has been destroyed.\n   */\n  peekSignatureListInfo() {\n    this.#checkDestroyed();\n    if (this.peekTag() !== CTE_TAG_SIGNATURE_LIST) return null;\n    const c = this.#wasmExports.cte_decoder_peek_signature_list_count(this.#decoderHandle);\n    const t = this.#wasmExports.cte_decoder_peek_signature_list_type(this.#decoderHandle);\n    return c === CTE_PEEK_EOF || t === CTE_PEEK_EOF ? null : { count: c, typeCode: t };\n  }\n  //\n  /**\n   * @description Reads and consumes a Signature List field from this instance's buffer.\n   * @returns {Uint8Array | null} A copy of the signature/hash data, or `null`.\n   * @throws {Error} If read fails, instance destroyed, or memory access fails.\n   */\n  readSignatureListData() {\n    this.#checkDestroyed();\n    const i = this.peekSignatureListInfo();\n    if (!i) return null;\n    const sz = this.#wasmExports.get_signature_item_size(i.typeCode);\n    if (sz <= 0) throw new Error(`Invalid Sig size ${sz}`);\n    const totSz = i.count * sz;\n    const ptr = this.#wasmExports.cte_decoder_read_signature_list_data(this.#decoderHandle);\n    if (!ptr) throw new Error(\"Read Sig fail\");\n    this.#refreshMemoryView();\n    if (ptr + totSz > this.#wasmMemory.buffer.byteLength) throw new Error(`Sig read overflow`);\n    return new Uint8Array(this.#wasmMemory.buffer.slice(ptr, ptr + totSz));\n  }\n  /** @private */\n  #readSimpleIxData(fn) {\n    this.#checkDestroyed();\n    if (this.peekTag() !== CTE_TAG_IXDATA_FIELD) throw new Error(\"Expected IxData\");\n    return this.#wasmExports[fn](this.#decoderHandle);\n  }\n  //\n  /** Reads IxData: Legacy Index Reference (0-15). @returns {number} */\n  readIxDataIndexReference() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_index_reference\");\n  }\n  //\n  /** Reads IxData: ULEB128 encoded value. @returns {bigint} */\n  readIxDataUleb128() {\n    return BigInt(this.#readSimpleIxData(\"cte_decoder_read_ixdata_uleb128\"));\n  }\n  //\n  /** Reads IxData: SLEB128 encoded value. @returns {bigint} */\n  readIxDataSleb128() {\n    return BigInt(this.#readSimpleIxData(\"cte_decoder_read_ixdata_sleb128\"));\n  }\n  //\n  /** Reads IxData: Fixed int8. @returns {number} */\n  readIxDataInt8() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_int8\");\n  }\n  //\n  /** Reads IxData: Fixed uint8. @returns {number} */\n  readIxDataUint8() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_uint8\");\n  }\n  //\n  /** Reads IxData: Fixed int16. @returns {number} */\n  readIxDataInt16() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_int16\");\n  }\n  //\n  /** Reads IxData: Fixed uint16. @returns {number} */\n  readIxDataUint16() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_uint16\");\n  }\n  //\n  /** Reads IxData: Fixed int32. @returns {number} */\n  readIxDataInt32() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_int32\");\n  }\n  //\n  /** Reads IxData: Fixed uint32. @returns {number} */\n  readIxDataUint32() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_uint32\");\n  }\n  //\n  /** Reads IxData: Fixed int64. @returns {bigint} */\n  readIxDataInt64() {\n    return BigInt(this.#readSimpleIxData(\"cte_decoder_read_ixdata_int64\"));\n  }\n  //\n  /** Reads IxData: Fixed uint64. @returns {bigint} */\n  readIxDataUint64() {\n    return BigInt(this.#readSimpleIxData(\"cte_decoder_read_ixdata_uint64\"));\n  }\n  //\n  /** Reads IxData: Fixed float32. @returns {number} */\n  readIxDataFloat32() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_float32\");\n  }\n  //\n  /** Reads IxData: Fixed float64. @returns {number} */\n  readIxDataFloat64() {\n    return this.#readSimpleIxData(\"cte_decoder_read_ixdata_float64\");\n  }\n  //\n  /** Reads IxData: Boolean constant. @returns {boolean} */\n  readIxDataBoolean() {\n    return !!this.#readSimpleIxData(\"cte_decoder_read_ixdata_boolean\");\n  }\n  //\n  /**\n   * @description Peeks at the header of Command Data in this instance's buffer.\n   * @returns {number | null} The payload length, or `null`.\n   * @throws {Error} If the decoder instance has been destroyed.\n   */\n  peekCommandDataLength() {\n    this.#checkDestroyed();\n    if (this.peekTag() !== CTE_TAG_COMMAND_DATA) return null;\n    const l = this.#wasmExports.cte_decoder_peek_command_data_length(this.#decoderHandle);\n    return l < 0 || l > CTE_COMMAND_EXTENDED_MAX_LEN ? null : l;\n  }\n  //\n  /**\n   * @description Reads and consumes a Command Data field payload from this instance's buffer.\n   * @returns {{data: Uint8Array} | null} An object containing the payload bytes as `data`, or `null`.\n   * @throws {Error} If read fails, instance destroyed, or memory access fails.\n   */\n  readCommandDataPayload() {\n    this.#checkDestroyed();\n    const len = this.peekCommandDataLength();\n    if (len === null || len < 0) return null;\n    const ptr = this.#wasmExports.cte_decoder_read_command_data_payload(this.#decoderHandle);\n    if (!ptr && len > 0) throw new Error(\"Read Cmd payload failed\");\n    let data = new Uint8Array(0);\n    if (len > 0) {\n      this.#refreshMemoryView();\n      if (ptr + len > this.#wasmMemory.buffer.byteLength) throw new Error(`Cmd read overflow`);\n      data = new Uint8Array(this.#wasmMemory.buffer.slice(ptr, ptr + len));\n    }\n    return { data };\n  }\n  /**\n   * @description Cleans up Javascript references associated with this decoder instance.\n   * Does not explicitly free WASM memory. Future calls to this instance will fail.\n   */\n  destroy() {\n    this.#decoderHandle = 0;\n    this.#wasmExports = null;\n    this.#wasmInstance = null;\n    this.#wasmMemory = null;\n    this.#isDestroyed = true;\n  }\n};\n\n// src/index.js\nvar CTE_VERSION_BYTE = 241;\nvar CTE_MAX_TRANSACTION_SIZE = 1232;\nvar CTE_TAG_MASK = 192;\nvar CTE_TAG_PUBLIC_KEY_LIST = 0;\nvar CTE_TAG_SIGNATURE_LIST = 64;\nvar CTE_TAG_IXDATA_FIELD = 128;\nvar CTE_TAG_COMMAND_DATA = 192;\nvar CTE_CRYPTO_TYPE_MASK = 3;\nvar CTE_CRYPTO_TYPE_ED25519 = 0;\nvar CTE_CRYPTO_TYPE_SLH_DSA_128F = 1;\nvar CTE_CRYPTO_TYPE_SLH_DSA_192F = 2;\nvar CTE_CRYPTO_TYPE_SLH_DSA_256F = 3;\nvar CTE_LIST_MAX_LEN = 15;\nvar CTE_PUBKEY_SIZE_ED25519 = 32;\nvar CTE_PUBKEY_SIZE_SLH_128F = 32;\nvar CTE_PUBKEY_SIZE_SLH_192F = 48;\nvar CTE_PUBKEY_SIZE_SLH_256F = 64;\nvar CTE_SIGNATURE_SIZE_ED25519 = 64;\nvar CTE_SIGNATURE_HASH_SIZE_PQC = 32;\nvar CTE_IXDATA_SUBTYPE_MASK = 3;\nvar CTE_IXDATA_SUBTYPE_LEGACY_INDEX = 0;\nvar CTE_IXDATA_SUBTYPE_VARINT = 1;\nvar CTE_IXDATA_SUBTYPE_FIXED = 2;\nvar CTE_IXDATA_SUBTYPE_CONSTANT = 3;\nvar CTE_IXDATA_VARINT_ENC_ZERO = 0;\nvar CTE_IXDATA_VARINT_ENC_ULEB128 = 1;\nvar CTE_IXDATA_VARINT_ENC_SLEB128 = 2;\nvar CTE_IXDATA_FIXED_TYPE_INT8 = 0;\nvar CTE_IXDATA_FIXED_TYPE_INT16 = 1;\nvar CTE_IXDATA_FIXED_TYPE_INT32 = 2;\nvar CTE_IXDATA_FIXED_TYPE_INT64 = 3;\nvar CTE_IXDATA_FIXED_TYPE_UINT8 = 4;\nvar CTE_IXDATA_FIXED_TYPE_UINT16 = 5;\nvar CTE_IXDATA_FIXED_TYPE_UINT32 = 6;\nvar CTE_IXDATA_FIXED_TYPE_UINT64 = 7;\nvar CTE_IXDATA_FIXED_TYPE_FLOAT32 = 8;\nvar CTE_IXDATA_FIXED_TYPE_FLOAT64 = 9;\nvar CTE_IXDATA_CONST_VAL_FALSE = 0;\nvar CTE_IXDATA_CONST_VAL_TRUE = 1;\nvar CTE_LEGACY_INDEX_MAX_VALUE = 15;\nvar CTE_COMMAND_FORMAT_FLAG_MASK = 32;\nvar CTE_COMMAND_FORMAT_SHORT = 0;\nvar CTE_COMMAND_FORMAT_EXTENDED = 32;\nvar CTE_COMMAND_SHORT_MAX_LEN = 31;\nvar CTE_COMMAND_EXTENDED_MAX_LEN = 1197;\nvar CTE_PEEK_EOF = 255;\nexport {\n  CTE_COMMAND_EXTENDED_MAX_LEN,\n  CTE_COMMAND_FORMAT_EXTENDED,\n  CTE_COMMAND_FORMAT_FLAG_MASK,\n  CTE_COMMAND_FORMAT_SHORT,\n  CTE_COMMAND_SHORT_MAX_LEN,\n  CTE_CRYPTO_TYPE_ED25519,\n  CTE_CRYPTO_TYPE_MASK,\n  CTE_CRYPTO_TYPE_SLH_DSA_128F,\n  CTE_CRYPTO_TYPE_SLH_DSA_192F,\n  CTE_CRYPTO_TYPE_SLH_DSA_256F,\n  CTE_IXDATA_CONST_VAL_FALSE,\n  CTE_IXDATA_CONST_VAL_TRUE,\n  CTE_IXDATA_FIXED_TYPE_FLOAT32,\n  CTE_IXDATA_FIXED_TYPE_FLOAT64,\n  CTE_IXDATA_FIXED_TYPE_INT16,\n  CTE_IXDATA_FIXED_TYPE_INT32,\n  CTE_IXDATA_FIXED_TYPE_INT64,\n  CTE_IXDATA_FIXED_TYPE_INT8,\n  CTE_IXDATA_FIXED_TYPE_UINT16,\n  CTE_IXDATA_FIXED_TYPE_UINT32,\n  CTE_IXDATA_FIXED_TYPE_UINT64,\n  CTE_IXDATA_FIXED_TYPE_UINT8,\n  CTE_IXDATA_SUBTYPE_CONSTANT,\n  CTE_IXDATA_SUBTYPE_FIXED,\n  CTE_IXDATA_SUBTYPE_LEGACY_INDEX,\n  CTE_IXDATA_SUBTYPE_MASK,\n  CTE_IXDATA_SUBTYPE_VARINT,\n  CTE_IXDATA_VARINT_ENC_SLEB128,\n  CTE_IXDATA_VARINT_ENC_ULEB128,\n  CTE_IXDATA_VARINT_ENC_ZERO,\n  CTE_LEGACY_INDEX_MAX_VALUE,\n  CTE_LIST_MAX_LEN,\n  CTE_MAX_TRANSACTION_SIZE,\n  CTE_PEEK_EOF,\n  CTE_PUBKEY_SIZE_ED25519,\n  CTE_PUBKEY_SIZE_SLH_128F,\n  CTE_PUBKEY_SIZE_SLH_192F,\n  CTE_PUBKEY_SIZE_SLH_256F,\n  CTE_SIGNATURE_HASH_SIZE_PQC,\n  CTE_SIGNATURE_SIZE_ED25519,\n  CTE_TAG_COMMAND_DATA,\n  CTE_TAG_IXDATA_FIELD,\n  CTE_TAG_MASK,\n  CTE_TAG_PUBLIC_KEY_LIST,\n  CTE_TAG_SIGNATURE_LIST,\n  CTE_VERSION_BYTE,\n  CteDecoder,\n  CteEncoder\n};\n", "// --- system-program.js ---\nimport { CteEncoder } from '@leachain/cte-core'; // Make sure this is installed\n\nconst LEA_SYSTEM_PROGRAM = new Uint8Array([\n    255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255\n]);\n\nexport class TransferInstruction {\n    #programIndex = null;\n\n    constructor({ fromPubkey, toPubkey, amount }) {\n        this.fromPubkey = fromPubkey;\n        this.toPubkey = toPubkey;\n        this.amount = amount;\n        this.fromPubkeyIndex = null;\n        this.toPubkeyIndex = null;\n    }\n\n    resolveKeys(keyList) {\n        this.#programIndex = keyList.add(LEA_SYSTEM_PROGRAM);\n        this.fromPubkeyIndex = keyList.add(this.fromPubkey);\n        this.toPubkeyIndex = keyList.add(this.toPubkey);\n    }\n\n    get programIndex() {\n        return this.#programIndex;\n    }\n\n    async toBytes() {\n        if (this.fromPubkeyIndex === null || this.toPubkeyIndex === null) {\n            throw new Error(\"resolveKeys() must be called before toBytes()\");\n        }\n        const encoder = await CteEncoder.create(2000);\n        encoder.addIxDataUint8(0x00); // Transfer action code\n        encoder.addIxDataIndexReference(this.fromPubkeyIndex);\n        encoder.addIxDataUleb128(this.amount);\n        encoder.addIxDataIndexReference(this.toPubkeyIndex);\n        return encoder.getEncodedData();\n    }\n}\n\nexport class SystemProgram {\n    static transfer(obj) {\n        return new TransferInstruction(obj);\n    }\n}\n", "import { utf8ToBytes, bytesToHex, hexToBytes, randomBytes } from '@noble/hashes/utils';\n\n/**\n * Checks if two Uint8Array instances are equal.\n * @param {Uint8Array | undefined | null} a - The first Uint8Array.\n * @param {Uint8Array | undefined | null} b - The second Uint8Array.\n * @returns {boolean} True if the arrays are equal, false otherwise.\n */\nfunction areUint8ArraysEqual(a, b) {\n    if (a === b) return true;\n    if (!a || !b || a.length !== b.length || !(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nclass KeyList {\n    _keys = []; // You are using a mix of conventions: _keys (older private convention) and #count/#maxSize (JS private fields)\n    #count = 0;\n    #maxSize;\n\n    /**\n     * Creates an instance of KeyList.\n     * @param {number} [maxSize=15] - The maximum number of keys the list can hold.\n     */\n    constructor(maxSize = 15) {\n        if (typeof maxSize !== 'number' || maxSize <= 0) {\n            throw new Error('KeyList: maxSize must be a positive number.');\n        }\n        this.#maxSize = maxSize;\n    }\n\n    /**\n     * Resolves a key input into a Uint8Array.\n     * @param {Uint8Array | { toBytes: () => Uint8Array } | any} key - The key to resolve.\n     * @returns {Uint8Array} The resolved key as a Uint8Array.\n     * @throws {Error} If the key is invalid or not a 32-byte Uint8Array.\n     * @private\n     */\n    #resolveKey(key) {\n        let bytes = null;\n\n        if (key instanceof Uint8Array) {\n            bytes = key;\n        } else if (key && typeof key.toBytes === 'function') {\n            bytes = key.toBytes();\n        }\n\n        if (!(bytes instanceof Uint8Array)) {\n            throw new Error(\"KeyList: Invalid key type. Key must be a Uint8Array or an object with a .toBytes() method that returns a Uint8Array.\");\n        }\n        if (bytes.length !== 32) {\n            throw new Error(\"KeyList: Key must be a 32-byte Uint8Array.\");\n        }\n\n        return bytes;\n    }\n\n    /**\n     * Adds a key to the list.\n     * If the key already exists, its index is returned.\n     * @param {Uint8Array | { toBytes: () => Uint8Array }} key - The key to add.\n     * @returns {number} The index of the added or existing key.\n     * @throws {Error} If the list is at maximum capacity.\n     */\n    add(key) {\n        const bytes = this.#resolveKey(key);\n\n        // Check if key already exists\n        for (let i = 0; i < this.#count; i++) {\n            if (areUint8ArraysEqual(bytes, this._keys[i])) {\n                return i; // Key already exists, return its index\n            }\n        }\n\n        if (this.#count >= this.#maxSize) {\n            throw new Error(`KeyList: Cannot add key, maximum capacity (${this.#maxSize}) reached.`);\n        }\n\n        this._keys[this.#count] = bytes;\n        return this.#count++;\n    }\n\n    /**\n     * Checks if a key exists in the list and returns its index if found.\n     * @param {Uint8Array | { toBytes: () => Uint8Array }} key - The key to check.\n     * @returns {number | false} The index of the key if found, otherwise false.\n     */\n    hasKey(key) {\n        try {\n            const bytesToFind = this.#resolveKey(key);\n            for (let i = 0; i < this.#count; i++) {\n                // Ensure you are comparing against the correct array `this._keys`\n                if (areUint8ArraysEqual(bytesToFind, this._keys[i])) {\n                    return i; // Return the index if found\n                }\n            }\n        } catch (error) {\n            // As per your original code, log a warning if key resolution fails.\n            // Depending on desired behavior, you might want to re-throw or handle differently.\n            console.warn(\"KeyList.hasKey: Could not resolve key:\", error.message);\n            return false; // Key is invalid or resolution failed\n        }\n        return false; // Key not found\n    }\n\n    /**\n     * Gets a shallow copy of the keys currently in the list.\n     * @returns {Uint8Array[]} An array of Uint8Array keys.\n     */\n    getKeys() {\n        // Ensure you are slicing the correct array `this._keys`\n        return this._keys.slice(0, this.#count);\n    }\n\n    /**\n     * Gets the current number of keys in the list.\n     * @returns {number}\n     */\n    get count() {\n        return this.#count;\n    }\n\n    /**\n     * Gets the maximum capacity of the list.\n     * @returns {number}\n     */\n    get maxSize() {\n        return this.#maxSize;\n    }\n}\n\n// Export the necessary functions and the class\nexport { utf8ToBytes, bytesToHex, hexToBytes, randomBytes, KeyList, areUint8ArraysEqual };", "import { CteEncoder, CTE_CRYPTO_TYPE_ED25519 } from '@leachain/cte-core';\nimport { KeyList, hexToBytes } from './utils.js';\nimport { KeypairImpl } from './keypair.js';\n\nconst recentBlockhashPlaceHolder = new Uint8Array([\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0\n]);\n\nexport class Transaction {\n    #keyList = new KeyList();\n    #instructions = [];\n    #signaturesEd25519 = new Map();\n    constructor() {\n        this.#keyList.add(recentBlockhashPlaceHolder); // element 0 is recent blockhash\n    }\n\n    add(instruction) {\n        instruction.resolveKeys(this.#keyList);\n        this.#instructions.push(instruction);\n    }\n\n    addSig(publicKey, signature) {\n        const pubkeyIndex = this.#keyList.hasKey(publicKey);\n        if (typeof pubkeyIndex === 'number') {\n            this.#signaturesEd25519.set(pubkeyIndex, signature);\n        }\n        else {\n            throw new Error(\"Public key missing for transaction signature\");\n        }\n        if (!(signature instanceof Uint8Array) || signature.length !== 64) {\n            throw new Error(\"Invalid Ed25519 signature: must be a Uint8Array(64)\");\n        }\n    }\n\n    async sign(signer) {\n        if (!(signer instanceof KeypairImpl)) {\n            throw new TypeError(\"Expected an instance of KeypairImpl\");\n        }\n        //build transaction without signatures\n        const encoder = await this.serializeWithoutSignatures();\n        const unsignedTransaction = encoder.getEncodedData();\n        const signature = await signer.sign(unsignedTransaction);\n        this.addSig(signer.publicKey, signature);\n    }\n\n    set recentBlockhash(blockHash) {\n        if (typeof blockHash === 'string') {\n            this.#keyList._keys[0] = hexToBytes(blockHash);\n        } else if (blockHash instanceof Uint8Array) {\n            this.#keyList._keys[0] = blockHash;\n        } else {\n            throw new Error(\"Invalid blockHash: must be a hex string or Uint8Array\");\n        }\n    }\n\n    async serializeWithoutSignatures() {\n        /* build transaction */\n        const encoder = await CteEncoder.create(2000);\n\n        /* build a 32byte index array */\n        encoder.addPublicKeyList(this.#keyList.getKeys(), CTE_CRYPTO_TYPE_ED25519);\n\n        /* number of instruction in this transaction */\n        encoder.addIxDataIndexReference(this.#instructions.length);\n\n        const encoded = [];\n        for (const ix of this.#instructions) {\n            // programm index reference\n            encoder.addIxDataIndexReference(ix.programIndex);\n            // programm command data\n            encoder.addCommandData(await ix.toBytes());\n        }\n\n        return encoder;\n    }\n\n    async toBytes() {\n        const encoder = await this.serializeWithoutSignatures();\n        /* Add any signatures we maybe have set */\n        if (this.#signaturesEd25519.size > 0) {\n            for (const [pubkeyIndex, signature] of this.#signaturesEd25519.entries()) {\n                encoder.addSignatureList([signature], CTE_CRYPTO_TYPE_ED25519);\n                encoder.addIxDataIndexReference(pubkeyIndex)\n            }\n        }\n\n        return encoder.getEncodedData();\n    }\n}\n"],
  "mappings": "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,SAAU,WAAY,UAAW,SAAU,UAAW,OAAQ,WAAY,UAAW,SAAU,MAAO,SAAU,QAAS,UAAW,SAAU,QAAS,MAAO,SAAU,UAAW,SAAU,QAAS,QAAS,UAAW,SAAU,UAAW,SAAU,SAAU,SAAU,QAAS,MAAO,QAAS,QAAS,QAAS,MAAO,MAAO,UAAW,QAAS,QAAS,QAAS,UAAW,QAAS,QAAS,MAAO,QAAS,QAAS,SAAU,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,QAAS,SAAU,QAAS,WAAY,SAAU,UAAW,SAAU,UAAW,UAAW,UAAW,MAAO,QAAS,UAAW,SAAU,QAAS,UAAW,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,MAAO,QAAS,QAAS,OAAQ,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,WAAY,SAAU,UAAW,MAAO,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,UAAW,OAAQ,SAAU,SAAU,WAAY,UAAW,UAAW,QAAS,SAAU,OAAQ,SAAU,OAAQ,SAAU,UAAW,UAAW,QAAS,QAAS,QAAS,OAAQ,UAAW,QAAS,UAAW,OAAQ,OAAQ,WAAY,QAAS,QAAS,MAAO,UAAW,UAAW,OAAQ,SAAU,SAAU,SAAU,MAAO,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,OAAQ,QAAS,UAAW,OAAQ,SAAU,SAAU,UAAW,SAAU,UAAW,MAAO,OAAQ,OAAQ,UAAW,OAAQ,QAAS,SAAU,QAAS,QAAS,QAAS,UAAW,QAAS,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,OAAQ,OAAQ,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,SAAU,SAAU,SAAU,OAAQ,SAAU,SAAU,MAAO,MAAO,UAAW,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,QAAS,WAAY,SAAU,SAAU,QAAS,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,UAAW,QAAS,OAAQ,OAAQ,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,MAAO,WAAY,OAAQ,SAAU,QAAS,OAAQ,UAAW,QAAS,QAAS,SAAU,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,MAAO,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAAW,UAAW,MAAO,SAAU,OAAQ,QAAS,SAAU,QAAS,OAAQ,OAAQ,OAAQ,SAAU,SAAU,SAAU,MAAO,UAAW,QAAS,WAAY,SAAU,SAAU,QAAS,UAAW,OAAQ,UAAW,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,WAAY,SAAU,QAAS,UAAW,SAAU,QAAS,OAAQ,QAAS,QAAS,SAAU,OAAQ,SAAU,QAAS,UAAW,QAAS,QAAS,UAAW,SAAU,SAAU,UAAW,UAAW,QAAS,QAAS,QAAS,WAAY,SAAU,UAAW,OAAQ,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,UAAW,SAAU,QAAS,QAAS,UAAW,OAAQ,SAAU,OAAQ,OAAQ,UAAW,QAAS,SAAU,UAAW,OAAQ,UAAW,QAAS,SAAU,UAAW,UAAW,UAAW,UAAW,WAAY,UAAW,WAAY,UAAW,WAAY,OAAQ,OAAQ,SAAU,OAAQ,QAAS,OAAQ,OAAQ,UAAW,OAAQ,SAAU,QAAS,UAAW,SAAU,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,QAAS,QAAS,SAAU,QAAS,QAAS,QAAS,SAAU,QAAS,OAAQ,UAAW,QAAS,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,UAAW,QAAS,SAAU,UAAW,SAAU,QAAS,MAAO,UAAW,OAAQ,UAAW,MAAO,WAAY,UAAW,UAAW,UAAW,QAAS,UAAW,SAAU,OAAQ,QAAS,MAAO,SAAU,OAAQ,QAAS,SAAU,SAAU,OAAQ,WAAY,OAAQ,MAAO,OAAQ,SAAU,SAAU,SAAU,WAAY,SAAU,UAAW,WAAY,WAAY,OAAQ,UAAW,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,SAAU,SAAU,UAAW,OAAQ,SAAU,SAAU,UAAW,QAAS,SAAU,SAAU,WAAY,SAAU,SAAU,OAAQ,UAAW,UAAW,SAAU,SAAU,UAAW,SAAU,SAAU,UAAW,OAAQ,UAAW,QAAS,OAAQ,SAAU,OAAQ,SAAU,UAAW,UAAW,UAAW,SAAU,WAAY,SAAU,OAAQ,WAAY,WAAY,UAAW,OAAQ,UAAW,WAAY,UAAW,WAAY,SAAU,SAAU,UAAW,QAAS,SAAU,WAAY,MAAO,OAAQ,UAAW,SAAU,SAAU,SAAU,QAAS,OAAQ,OAAQ,SAAU,OAAQ,QAAS,SAAU,QAAS,UAAW,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,QAAS,OAAQ,QAAS,UAAW,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,OAAQ,OAAQ,OAAQ,UAAW,UAAW,OAAQ,OAAQ,UAAW,SAAU,MAAO,QAAS,SAAU,QAAS,QAAS,WAAY,UAAW,UAAW,WAAY,WAAY,QAAS,OAAQ,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,UAAW,QAAS,SAAU,QAAS,MAAO,UAAW,UAAW,QAAS,SAAU,UAAW,SAAU,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,QAAS,SAAU,QAAS,WAAY,UAAW,QAAS,QAAS,MAAO,QAAS,QAAS,UAAW,QAAS,QAAS,SAAU,QAAS,UAAW,SAAU,UAAW,SAAU,WAAY,OAAQ,QAAS,SAAU,QAAS,UAAW,SAAU,WAAY,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,QAAS,MAAO,UAAW,SAAU,OAAQ,UAAW,OAAQ,QAAS,QAAS,OAAQ,QAAS,OAAQ,SAAU,SAAU,MAAO,QAAS,UAAW,OAAQ,UAAW,MAAO,QAAS,SAAU,UAAW,QAAS,WAAY,UAAW,WAAY,UAAW,MAAO,OAAQ,OAAQ,SAAU,QAAS,WAAY,QAAS,QAAS,MAAO,QAAS,UAAW,QAAS,SAAU,OAAQ,OAAQ,SAAU,QAAS,OAAQ,OAAQ,SAAU,SAAU,OAAQ,OAAQ,QAAS,SAAU,OAAQ,MAAO,UAAW,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAAU,OAAQ,SAAU,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,QAAS,MAAO,OAAQ,QAAS,MAAO,OAAQ,OAAQ,SAAU,OAAQ,OAAQ,QAAS,SAAU,SAAU,OAAQ,UAAW,QAAS,UAAW,SAAU,SAAU,QAAS,MAAO,UAAW,QAAS,WAAY,QAAS,SAAU,SAAU,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,UAAW,OAAQ,SAAU,SAAU,OAAQ,SAAU,UAAW,OAAQ,MAAO,SAAU,UAAW,SAAU,SAAU,UAAW,MAAO,OAAQ,OAAQ,SAAU,QAAS,OAAQ,UAAW,SAAU,QAAS,SAAU,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,SAAU,QAAS,QAAS,QAAS,UAAW,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,UAAW,OAAQ,OAAQ,QAAS,UAAW,SAAU,SAAU,SAAU,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,UAAW,QAAS,QAAS,OAAQ,QAAS,OAAQ,UAAW,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,MAAO,MAAO,QAAS,OAAQ,OAAQ,SAAU,UAAW,OAAQ,QAAS,SAAU,OAAQ,QAAS,UAAW,MAAO,OAAQ,OAAQ,SAAU,OAAQ,SAAU,QAAS,QAAS,WAAY,SAAU,QAAS,SAAU,OAAQ,MAAO,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,UAAW,QAAS,SAAU,OAAQ,OAAQ,UAAW,SAAU,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,SAAU,QAAS,WAAY,OAAQ,QAAS,OAAQ,QAAS,MAAO,OAAQ,QAAS,SAAU,QAAS,UAAW,SAAU,OAAQ,SAAU,QAAS,OAAQ,UAAW,SAAU,MAAO,OAAQ,OAAQ,WAAY,OAAQ,SAAU,MAAO,UAAW,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,OAAQ,UAAW,SAAU,WAAY,QAAS,WAAY,SAAU,WAAY,SAAU,UAAW,SAAU,SAAU,UAAW,UAAW,SAAU,SAAU,SAAU,QAAS,WAAY,QAAS,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,UAAW,OAAQ,SAAU,UAAW,QAAS,OAAQ,QAAS,SAAU,SAAU,MAAO,OAAQ,UAAW,QAAS,QAAS,QAAS,MAAO,OAAQ,OAAQ,UAAW,MAAO,QAAS,QAAS,OAAQ,SAAU,SAAU,OAAQ,OAAQ,WAAY,OAAQ,OAAQ,UAAW,MAAO,OAAQ,MAAO,SAAU,OAAQ,UAAW,OAAQ,MAAO,UAAW,OAAQ,SAAU,OAAQ,OAAQ,QAAS,QAAS,OAAQ,MAAO,QAAS,QAAS,SAAU,OAAQ,OAAQ,OAAQ,WAAY,SAAU,QAAS,QAAS,QAAS,QAAS,UAAW,OAAQ,MAAO,OAAQ,UAAW,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,OAAQ,MAAO,QAAS,SAAU,UAAW,QAAS,OAAQ,SAAU,OAAQ,UAAW,SAAU,SAAU,QAAS,OAAQ,UAAW,UAAW,UAAW,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,SAAU,OAAQ,SAAU,OAAQ,SAAU,OAAQ,OAAQ,UAAW,QAAS,OAAQ,QAAS,SAAU,OAAQ,OAAQ,UAAW,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAAU,QAAS,QAAS,SAAU,SAAU,UAAW,MAAO,QAAS,SAAU,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,SAAU,MAAO,SAAU,UAAW,QAAS,UAAW,SAAU,QAAS,SAAU,QAAS,SAAU,SAAU,SAAU,WAAY,OAAQ,OAAQ,SAAU,QAAS,WAAY,OAAQ,SAAU,SAAU,UAAW,OAAQ,SAAU,OAAQ,UAAW,OAAQ,WAAY,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,UAAW,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,UAAW,QAAS,SAAU,SAAU,WAAY,OAAQ,UAAW,QAAS,OAAQ,UAAW,QAAS,SAAU,UAAW,SAAU,SAAU,OAAQ,UAAW,MAAO,QAAS,UAAW,SAAU,QAAS,SAAU,MAAO,SAAU,UAAW,SAAU,UAAW,QAAS,OAAQ,QAAS,OAAQ,UAAW,WAAY,SAAU,SAAU,QAAS,WAAY,QAAS,OAAQ,QAAS,OAAQ,SAAU,OAAQ,WAAY,SAAU,SAAU,WAAY,QAAS,OAAQ,SAAU,SAAU,UAAW,OAAQ,QAAS,OAAQ,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,OAAQ,OAAQ,WAAY,UAAW,UAAW,SAAU,QAAS,OAAQ,MAAO,UAAW,UAAW,QAAS,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,QAAS,OAAQ,UAAW,OAAQ,UAAW,SAAU,QAAS,MAAO,UAAW,SAAU,QAAS,MAAO,MAAO,OAAQ,SAAU,SAAU,UAAW,UAAW,SAAU,UAAW,QAAS,QAAS,UAAW,OAAQ,MAAO,QAAS,SAAU,QAAS,MAAO,OAAQ,MAAO,QAAS,UAAW,OAAQ,OAAQ,MAAO,QAAS,SAAU,OAAQ,OAAQ,QAAS,UAAW,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,UAAW,QAAS,UAAW,QAAS,SAAU,UAAW,OAAQ,OAAQ,OAAQ,MAAO,QAAS,SAAU,SAAU,QAAS,OAAQ,SAAU,OAAQ,OAAQ,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,OAAQ,QAAS,OAAQ,UAAW,SAAU,UAAW,QAAS,OAAQ,UAAW,QAAS,SAAU,OAAQ,UAAW,UAAW,MAAO,UAAW,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,MAAO,QAAS,QAAS,SAAU,WAAY,QAAS,SAAU,UAAW,QAAS,MAAO,SAAU,OAAQ,QAAS,OAAQ,UAAW,OAAQ,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,QAAS,OAAQ,SAAU,SAAU,QAAS,OAAQ,SAAU,OAAQ,OAAQ,QAAS,QAAS,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,UAAW,UAAW,WAAY,WAAY,OAAQ,SAAU,UAAW,UAAW,SAAU,QAAS,WAAY,SAAU,UAAW,SAAU,UAAW,UAAW,SAAU,UAAW,QAAS,QAAS,UAAW,QAAS,WAAY,SAAU,UAAW,QAAS,UAAW,UAAW,UAAW,SAAU,UAAW,UAAW,UAAW,QAAS,WAAY,UAAW,UAAW,QAAS,UAAW,SAAU,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,QAAS,WAAY,SAAU,UAAW,QAAS,OAAQ,MAAO,SAAU,UAAW,UAAW,UAAW,UAAW,WAAY,QAAS,OAAQ,OAAQ,QAAS,SAAU,UAAW,OAAQ,OAAQ,QAAS,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,OAAQ,OAAQ,SAAU,QAAS,MAAO,QAAS,QAAS,OAAQ,SAAU,QAAS,UAAW,SAAU,UAAW,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAAU,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,SAAU,OAAQ,SAAU,WAAY,SAAU,SAAU,SAAU,QAAS,OAAQ,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,WAAY,SAAU,WAAY,WAAY,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAAU,SAAU,SAAU,MAAO,SAAU,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,SAAU,OAAQ,SAAU,QAAS,QAAS,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,SAAU,OAAQ,OAAQ,SAAU,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,MAAO,OAAQ,MAAO,SAAU,QAAS,MAAO,SAAU,UAAW,OAAQ,OAAQ,QAAS,SAAU,QAAS,OAAQ,SAAU,OAAQ,SAAU,OAAQ,UAAW,UAAW,QAAS,UAAW,OAAQ,MAAO,QAAS,OAAQ,QAAS,UAAW,QAAS,SAAU,SAAU,UAAW,WAAY,WAAY,QAAS,QAAS,SAAU,SAAU,QAAS,MAAO,SAAU,SAAU,OAAQ,SAAU,SAAU,UAAW,WAAY,OAAQ,OAAQ,UAAW,SAAU,OAAQ,UAAW,SAAU,QAAS,WAAY,SAAU,UAAW,UAAW,SAAU,QAAS,QAAS,SAAU,QAAS,UAAW,QAAS,OAAQ,QAAS,UAAW,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAAS,WAAY,QAAS,SAAU,QAAS,UAAW,MAAO,UAAW,OAAQ,OAAQ,QAAS,QAAS,OAAQ,SAAU,OAAQ,QAAS,SAAU,UAAW,SAAU,QAAS,OAAQ,QAAS,SAAU,UAAW,MAAO,OAAQ,QAAS,SAAU,MAAO,QAAS,OAAQ,QAAS,QAAS,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,SAAU,OAAQ,SAAU,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,SAAU,SAAU,OAAQ,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QAAS,UAAW,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,QAAS,QAAS,UAAW,QAAS,QAAS,UAAW,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAAU,QAAS,QAAS,UAAW,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,MAAO,SAAU,UAAW,WAAY,SAAU,UAAW,QAAS,QAAS,SAAU,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,QAAS,OAAQ,OAAQ,SAAU,QAAS,QAAS,QAAS,QAAS,UAAW,QAAS,QAAS,QAAS,QAAS,WAAY,SAAU,SAAU,SAAU,WAAY,UAAW,QAAS,UAAW,QAAS,UAAW,SAAU,SAAU,UAAW,OAAQ,SAAU,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,QAAS,SAAU,QAAS,SAAU,UAAW,OAAQ,UAAW,QAAS,WAAY,WAAY,SAAU,UAAW,UAAW,UAAW,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAAU,UAAW,QAAS,SAAU,QAAS,SAAU,MAAO,OAAQ,SAAU,OAAQ,OAAQ,OAAQ,SAAU,OAAQ,QAAS,SAAU,OAAQ,QAAS,OAAQ,OAAQ,MAAO,SAAU,SAAU,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OAAQ,UAAW,QAAS,SAAU,QAAS,QAAS,UAAW,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,OAAQ,MAAO,QAAS,SAAU,QAAS,QAAS,UAAW,QAAS,UAAW,MAAO,WAAY,SAAU,QAAS,SAAU,WAAY,OAAQ,SAAU,UAAW,OAAQ,QAAS,MAAO,QAAS,SAAU,QAAS,UAAW,WAAY,OAAQ,QAAS,UAAW,SAAU,QAAS,OAAQ,MAAO,QAAS,QAAS,UAAW,SAAU,QAAS,WAAY,OAAQ,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,QAAS,UAAW,OAAQ,OAAQ,SAAU,UAAW,QAAS,OAAQ,QAAS,UAAW,QAAS,QAAS,MAAO,OAAQ,UAAW,SAAU,OAAQ,SAAU,SAAU,OAAQ,SAAU,SAAU,SAAU,QAAS,OAAQ,QAAS,MAAO,OAAQ,UAAW,OAAQ,WAAY,SAAU,UAAW,QAAS,UAAW,QAAS,OAAQ,SAAU,SAAU,UAAW,UAAW,SAAU,OAAQ,WAAY,UAAW,SAAU,QAAS,UAAW,SAAU,SAAU,UAAW,SAAU,OAAQ,QAAS,QAAS,QAAS,OAAQ,QAAS,MAAO,OAAQ,SAAU,UAAW,QAAS,UAAW,SAAU,SAAU,QAAS,QAAS,SAAU,QAAS,MAAO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",
  "names": ["index_exports", "__export", "ADDRESS_HRP", "Connection", "DEFAULT_ACCOUNT_DERIVATION_BASE", "KeyList", "Keypair", "LEA_COIN_TYPE", "PublicKey", "SystemProgram", "Transaction", "Wallet", "areUint8ArraysEqual", "bytesToHex", "generateMnemonic", "hexToBytes", "randomBytes", "utf8ToBytes", "P", "N", "Gx", "Gy", "_d", "CURVE", "err", "m", "isS", "s", "isu8", "a", "au8", "l", "u8n", "data", "toU8", "len", "h2b", "M", "b", "isPoint", "p", "Point", "_Point", "ex", "ey", "ez", "et", "hex", "zip215", "d", "normed", "lastByte", "y", "b2n_LE", "y2", "u", "v", "isValid", "x", "uvRatio", "isXOdd", "isLastByteOdd", "other", "X1", "Y1", "Z1", "X2", "Y2", "Z2", "X1Z2", "X2Z1", "Y1Z2", "Y2Z1", "I", "A", "B", "C", "D", "x1y1", "E", "G", "F", "H", "X3", "Y3", "T3", "Z3", "T1", "T2", "n", "safe", "wNAF", "f", "scalar", "z", "iz", "invert", "n2b_32LE", "b2h", "padh", "num", "pad", "_ch", "ch", "hl", "al", "array", "ai", "hi", "n1", "n2", "concatB", "arrs", "r", "sum", "md", "q", "pow2", "power", "pow_2_252_3", "b2", "b4", "b5", "b10", "b20", "b40", "b80", "b160", "b240", "b250", "RM1", "v3", "v7", "pow", "vx2", "root1", "root2", "useRoot1", "useRoot2", "noRoot", "modL_LE", "hash", "_shaS", "sha512a", "etc", "sha512s", "hash2extK", "hashed", "head", "prefix", "point", "pointBytes", "getExtendedPublicKey", "priv", "hash2extK", "sha512s", "toU8", "getPublicKey", "priv", "getExtendedPublicKey", "hashFinish", "asynchronous", "res", "sha512a", "sha512s", "_sign", "e", "rBytes", "msg", "P", "s", "r", "modL_LE", "R", "G", "concatB", "hashed", "S", "M", "N", "au8", "n2b_32LE", "sign", "msg", "privKey", "m", "toU8", "e", "getExtendedPublicKey", "rBytes", "sha512s", "hashFinish", "_sign", "dvo", "_verify", "sig", "pub", "opts", "zip215", "A", "R", "s", "SB", "hashable", "Point", "b2n_LE", "G", "concatB", "hashed", "k", "modL_LE", "verify", "s", "m", "p", "opts", "dvo", "hashFinish", "_verify", "cr", "etc", "b2h", "h2b", "concatB", "M", "invert", "len", "c", "err", "u8n", "messages", "_shaS", "f", "precompute", "points", "windows", "p", "G", "b", "w", "Gpows", "wNAF", "n", "comp", "neg", "cnd", "I", "f", "wsize", "mask", "maxNum", "shiftBy", "off", "wbits", "off1", "off2", "cnd1", "cnd2", "crypto", "isBytes", "a", "anumber", "n", "abytes", "b", "lengths", "ahash", "h", "aexists", "instance", "checkFinished", "aoutput", "out", "min", "clean", "arrays", "i", "createView", "arr", "rotr", "word", "shift", "rotl", "hasHexBuiltin", "hexes", "_", "i", "bytesToHex", "bytes", "abytes", "hex", "asciis", "asciiToBase16", "ch", "hexToBytes", "hl", "al", "array", "ai", "hi", "n1", "n2", "char", "utf8ToBytes", "str", "toBytes", "data", "utf8ToBytes", "abytes", "kdfInputToBytes", "concatBytes", "arrays", "sum", "i", "a", "res", "pad", "checkOpts", "defaults", "opts", "Hash", "createHasher", "hashCons", "hashC", "msg", "tmp", "randomBytes", "bytesLength", "crypto", "HMAC", "Hash", "hash", "_key", "ahash", "key", "toBytes", "blockLen", "pad", "i", "clean", "buf", "aexists", "out", "abytes", "to", "oHash", "iHash", "finished", "destroyed", "outputLen", "hmac", "message", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "Chi", "a", "b", "c", "Maj", "HashMD", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "aexists", "toBytes", "abytes", "buffer", "len", "pos", "take", "dataView", "out", "aoutput", "clean", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_IV", "SHA512_IV", "Rho160", "Id160", "_", "i", "Pi160", "idxLR", "res", "j", "k", "idxL", "idxR", "shifts160", "shiftsL160", "idx", "shiftsR160", "Kl160", "Kr160", "ripemd_f", "group", "x", "y", "z", "BUF_160", "RIPEMD160", "HashMD", "h0", "h1", "h2", "h3", "h4", "view", "offset", "al", "ar", "bl", "br", "cl", "cr", "dl", "dr", "el", "er", "rGroup", "hbl", "hbr", "rl", "rr", "sl", "sr", "tl", "rotl", "tr", "clean", "ripemd160", "createHasher", "ripemd160", "U32_MASK64", "_32n", "fromBig", "n", "le", "split", "lst", "len", "Ah", "Al", "h", "l", "shrSH", "h", "_l", "s", "shrSL", "l", "rotrSH", "rotrSL", "rotrBH", "rotrBL", "add", "Ah", "Al", "Bh", "Bl", "l", "add3L", "Cl", "add3H", "low", "Ch", "add4L", "Dl", "add4H", "Dh", "add5L", "El", "add5H", "Eh", "SHA256_K", "SHA256_W", "SHA256", "HashMD", "outputLen", "SHA256_IV", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "Chi", "T2", "Maj", "clean", "K512", "split", "n", "SHA512_Kh", "SHA512_Kl", "SHA512_W_H", "SHA512_W_L", "SHA512", "HashMD", "outputLen", "SHA512_IV", "Ah", "Al", "Bh", "Bl", "Ch", "Cl", "Dh", "Dl", "Eh", "El", "Fh", "Fl", "Gh", "Gl", "Hh", "Hl", "view", "offset", "i", "W15h", "W15l", "s0h", "rotrSH", "shrSH", "s0l", "rotrSL", "shrSL", "W2h", "W2l", "s1h", "rotrBH", "s1l", "rotrBL", "SUMl", "add4L", "SUMh", "add4H", "sigma1h", "sigma1l", "CHIh", "CHIl", "T1ll", "add5L", "T1h", "add5H", "T1l", "sigma0h", "sigma0l", "MAJh", "MAJl", "add", "All", "add3L", "add3H", "clean", "sha256", "createHasher", "SHA256", "sha512", "createHasher", "SHA512", "sha256", "sha512", "etc", "messages", "sha512", "concatBytes", "MASTER_SECRET", "utf8ToBytes", "HARDENED_OFFSET", "ZERO", "ensureBytes", "input", "expectedLengths", "bytes", "hexToBytes", "e", "hash160", "data", "ripemd160", "sha256", "bytesToNumberBE", "createView", "numberToBytesBE", "num", "buffer", "HDKey", "options", "seed", "seedBytes", "seedLengthBits", "I", "hmac", "privateKey", "chainCode", "getPublicKey", "bytesToHex", "path", "segments", "currentKey", "segment", "match", "index", "isHardened", "indexBytes", "childPrivateKey", "childChainCode", "pbkdf2Init", "hash", "_password", "_salt", "_opts", "ahash", "opts", "checkOpts", "c", "dkLen", "asyncTick", "anumber", "password", "kdfInputToBytes", "salt", "DK", "PRF", "hmac", "PRFSalt", "pbkdf2Output", "prfW", "u", "clean", "pbkdf2", "arr", "view", "createView", "ti", "pos", "Ti", "ui", "i", "englishWordlist", "wordlistMap", "word", "index", "BITS_PER_WORD", "PBKDF2_ROUNDS", "PBKDF2_KEY_LENGTH", "SALT_PREFIX", "WORD_COUNT_TO_ENTROPY_BITS", "ENTROPY_BITS_TO_WORD_COUNT", "bytesToBinaryString", "bytes", "byte", "binaryStringToBytes", "bits", "bitsLength", "byteLength", "i", "byteSlice", "generateEntropy", "strength", "bytesToGenerate", "randomBytes", "error", "entropyToMnemonic", "entropy", "entropyBitsLength", "entropyBinaryString", "hash", "sha256", "hashBinaryString", "checksumBitsLength", "checksumBits", "totalBinaryString", "totalBitsLength", "wordCount", "words", "chunk", "mnemonicToEntropy", "mnemonic", "normalizedWordForLookup", "indexFromMap", "checksumBitsFromMnemonic", "derivedEntropyBytes", "expectedChecksumBits", "generateMnemonic", "mnemonicToSeed", "passphrase", "normalizedMnemonic", "normalizedPassphrase", "passwordBytes", "saltPrefixBytes", "passphraseBytes", "saltBytes", "pbkdf2", "sha512", "CHARSET", "GENERATOR", "BECH32M_CONST", "DATA_VERSION_BYTE", "MIN_DATA_LENGTH_BYTES", "MAX_DATA_LENGTH_BYTES", "MAX_BECH32_LENGTH", "MIN_HRP_LENGTH", "MAX_HRP_LENGTH", "CHECKSUM_LENGTH", "MIN_BECH32_LENGTH", "CHAR_MAP", "i", "char", "polymod", "values", "checksumState", "index", "value", "top", "genValue", "hrpExpand", "hrp", "expanded", "verifyChecksum", "dataWithChecksum", "expandedHrp", "combined", "k", "createChecksum", "data5bitWithVersion", "mod", "checksum", "convertbits", "inputData", "frombits", "tobits", "pad", "acc", "bits", "ret", "maxv", "max_acc", "_encodeBech32mData", "data5bit", "charIndex", "_decodeBech32mDataAndValidate", "bechString", "has_lower", "has_upper", "charCode", "lowerBechString", "sepPos", "data5bitWithVersionAndChecksum", "charValue", "expectedMinDataPartLen", "version", "firstVal", "decode", "expectedHrp", "bech32mString", "decodedParts", "dataStartIndex", "dataEndIndex", "dataBytes", "encode", "dataBytesArray", "byte", "encodedString", "LEA_COIN_TYPE", "DEFAULT_ACCOUNT_DERIVATION_BASE", "ADDRESS_HRP", "PublicKey", "#bytes", "value", "decoded", "decode", "ADDRESS_HRP", "e", "errorMessage", "message", "signature", "verify", "error", "encode", "other", "otherBytes", "i", "etc", "messages", "sha512", "concatBytes", "KeypairImpl", "#publicKeyInstance", "#secretKeyBytes", "publicKeyInstance", "secretKeyBytes", "message", "sign", "Keypair", "randomSeed", "randomBytes", "publicKeyBytes", "getPublicKey", "PublicKey", "secretKey", "WalletImpl", "#masterKey", "masterKey", "HDKey", "path", "derivedHDKey", "Keypair", "error", "index", "DEFAULT_ACCOUNT_DERIVATION_BASE", "Wallet", "mnemonic", "passphrase", "seed", "mnemonicToSeed", "ConnectionImpl", "cluster", "clusterUrls", "method", "params", "response", "data", "tx", "addrs", "Connection", "__toBinary", "table", "i", "base64", "bytes", "i2", "j", "c0", "c1", "c2", "c3", "encoder_mvp_default", "CteEncoder", "_CteEncoder", "#wasmInstance", "#wasmMemory", "#wasmExports", "#encoderHandle", "wasmInstance", "wasmMemory", "encoderHandle", "capacity", "importObject", "requiredExports", "instance", "memory", "exportName", "handle", "#refreshMemoryView", "dataPtr", "size", "typeCode", "#beginAndWriteListData", "beginFuncName", "items", "getWasmItemSizeFunc", "listName", "CTE_LIST_MAX_LEN", "itemCount", "itemSize", "expectedTotalItemSize", "writePtr", "memoryBytesView", "currentOffset", "item", "keys", "signatures", "index", "CTE_LEGACY_INDEX_MAX_VALUE", "#writeSimpleIxData", "fn", "v", "t", "c", "x", "data", "len", "CTE_COMMAND_EXTENDED_MAX_LEN", "ptr", "decoder_mvp_default", "CTE_CRYPTO_TYPE_ED25519", "CTE_LIST_MAX_LEN", "CTE_LEGACY_INDEX_MAX_VALUE", "CTE_COMMAND_EXTENDED_MAX_LEN", "LEA_SYSTEM_PROGRAM", "TransferInstruction", "#programIndex", "fromPubkey", "toPubkey", "amount", "keyList", "encoder", "CteEncoder", "SystemProgram", "obj", "areUint8ArraysEqual", "a", "b", "i", "KeyList", "#count", "#maxSize", "maxSize", "#resolveKey", "key", "bytes", "bytesToFind", "error", "recentBlockhashPlaceHolder", "Transaction", "#keyList", "KeyList", "#instructions", "#signaturesEd25519", "instruction", "publicKey", "signature", "pubkeyIndex", "signer", "KeypairImpl", "unsignedTransaction", "blockHash", "hexToBytes", "encoder", "CteEncoder", "CTE_CRYPTO_TYPE_ED25519", "encoded", "ix"]
}
